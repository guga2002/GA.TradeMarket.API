// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240602165045_migratenNow")]
    partial class migratenNow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1997, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2117),
                            Points = 655
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2021, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2120),
                            Points = 107
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2018, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2122),
                            Points = 289
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2017, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2123),
                            Points = 967
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2016, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2125),
                            Points = 667
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2019, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2127),
                            Points = 788
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2003, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2128),
                            Points = 319
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2021, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2130),
                            Points = 585
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(1995, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2131),
                            Points = 758
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2133),
                            Points = 172
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2002, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2134),
                            Points = 481
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2023, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2136),
                            Points = 832
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2019, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2137),
                            Points = 368
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2011, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2139),
                            Points = 275
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2001, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2140),
                            Points = 617
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2006, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(2141),
                            Points = 854
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1ECXM6uGpc1AWbwfi8tsqy7Sk543392",
                            DiscountValue = 251m,
                            ExpiryDate = new DateTime(2025, 10, 14, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(7812)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "319jQa6JnhmCb3G4wiRz57d8LZF61591",
                            DiscountValue = 118m,
                            ExpiryDate = new DateTime(2024, 12, 7, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(7902)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3245izVNvjFr78oMZCsf1hGbgW6xuEcnS19689",
                            DiscountValue = 345m,
                            ExpiryDate = new DateTime(2025, 5, 15, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(7938)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1ATarmkGMfjVKNPb4cz89s2YCJQ6EXueW96298",
                            DiscountValue = 101m,
                            ExpiryDate = new DateTime(2024, 8, 13, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(8006)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1dRVhzT18EQDiu5Y2k3LpUvgSZJBb7Xs76317",
                            DiscountValue = 281m,
                            ExpiryDate = new DateTime(2025, 1, 21, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(8042)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3zomMWHGtsd62wC5S8nQbpyJiBTj19K48243",
                            DiscountValue = 208m,
                            ExpiryDate = new DateTime(2025, 1, 18, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(8074)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "12PuEGMHnKBdbXtyzNLsfFJRkQ4w973xrD72406",
                            DiscountValue = 395m,
                            ExpiryDate = new DateTime(2024, 7, 5, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(8105)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1DvqfRnd6rXzCP5bhV9isGK2xcN55869",
                            DiscountValue = 178m,
                            ExpiryDate = new DateTime(2025, 6, 26, 20, 50, 44, 606, DateTimeKind.Local).AddTicks(8142)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 121m,
                            OperationDate = new DateTime(2024, 3, 30, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(1961),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 275m,
                            OperationDate = new DateTime(2024, 3, 27, 7, 50, 44, 608, DateTimeKind.Local).AddTicks(1967),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 557m,
                            OperationDate = new DateTime(2023, 11, 9, 1, 50, 44, 608, DateTimeKind.Local).AddTicks(1969),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 632m,
                            OperationDate = new DateTime(2023, 10, 1, 23, 50, 44, 608, DateTimeKind.Local).AddTicks(1970),
                            PersonId = "4"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 2, 20, 50, 44, 604, DateTimeKind.Local).AddTicks(4706),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Message = "doloribus",
                            NotificationDate = new DateTime(2024, 5, 27, 17, 50, 44, 610, DateTimeKind.Local).AddTicks(2896),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Message = "Repellendus alias dolore illo maiores accusamus. Aut qui quo sed. Praesentium explicabo voluptatum debitis recusandae est consequatur.",
                            NotificationDate = new DateTime(2024, 5, 8, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(2948),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Message = "Fuga rem asperiores animi quaerat. Quae et quae repudiandae suscipit eos. Explicabo alias quam facere quos aliquid. Sint aut ut. Aut et doloribus voluptatem saepe eos voluptatum. Eos quibusdam sint vitae ex consectetur.",
                            NotificationDate = new DateTime(2024, 5, 30, 13, 50, 44, 610, DateTimeKind.Local).AddTicks(3156),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Message = "Ea enim error.",
                            NotificationDate = new DateTime(2024, 5, 3, 1, 50, 44, 610, DateTimeKind.Local).AddTicks(3281),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Message = "Quam dolore placeat ut.",
                            NotificationDate = new DateTime(2024, 4, 24, 2, 50, 44, 610, DateTimeKind.Local).AddTicks(3300),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Message = "Minus quam impedit ex dolorem est et.",
                            NotificationDate = new DateTime(2024, 5, 5, 12, 50, 44, 610, DateTimeKind.Local).AddTicks(3316),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Message = "Perferendis magnam temporibus rem perspiciatis illum.",
                            NotificationDate = new DateTime(2024, 5, 2, 19, 50, 44, 610, DateTimeKind.Local).AddTicks(3373),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Message = "Atque est quia dicta fugiat incidunt rerum.\nAmet necessitatibus et sint fugiat velit.",
                            NotificationDate = new DateTime(2024, 5, 19, 0, 50, 44, 610, DateTimeKind.Local).AddTicks(3397),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Message = "Quis ut et fugiat.",
                            NotificationDate = new DateTime(2024, 5, 20, 7, 50, 44, 610, DateTimeKind.Local).AddTicks(3445),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 19, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3723),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 12, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3726),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 22, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3728),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 5, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3729),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 16, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3730),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 27, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3732),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 8, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3733),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 13, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3734),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 8, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3735),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 1, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3737),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 13, 20, 50, 44, 610, DateTimeKind.Local).AddTicks(3738),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 557m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 10, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3270),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 970m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 26, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3276),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 79m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 11, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3277),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 161m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 30, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3279),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 109m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 29, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3281),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 540m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 13, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3283),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 204m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 10, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3285),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 336m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 24, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3287),
                            PaymentMethod = "ATM",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 340m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 10, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3289),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 152m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 28, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3291),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 654m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 21, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3292),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 201m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 16, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3294),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 306m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 7, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3295),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 39m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 18, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3297),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 90m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 7, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3299),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 433m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 27, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3300),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 736m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 16, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3302),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 139m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 18, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3304),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "175",
                            CardHolderName = "Personal Loan Account",
                            CardNumber = "6706884457305044",
                            ExpiryDate = new DateTime(2032, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(108)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "154",
                            CardHolderName = "Savings Account",
                            CardNumber = "6449-4571-1642-1205",
                            ExpiryDate = new DateTime(2033, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(468)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "345",
                            CardHolderName = "Auto Loan Account",
                            CardNumber = "503815698648563020",
                            ExpiryDate = new DateTime(2028, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(790)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "574",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "4894-2067-4629-7468",
                            ExpiryDate = new DateTime(2033, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(1157)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "478",
                            CardHolderName = "Home Loan Account",
                            CardNumber = "5178-4231-3870-8234",
                            ExpiryDate = new DateTime(2033, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(1428)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "193",
                            CardHolderName = "Home Loan Account",
                            CardNumber = "6759-8819-1566-5528",
                            ExpiryDate = new DateTime(2031, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(1710)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "439",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6304551465062455",
                            ExpiryDate = new DateTime(2027, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(1947)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "930",
                            CardHolderName = "Checking Account",
                            CardNumber = "6771-8942-1375-2157",
                            ExpiryDate = new DateTime(2028, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(2208)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "389",
                            CardHolderName = "Money Market Account",
                            CardNumber = "6011-9648-0896-3285",
                            ExpiryDate = new DateTime(2027, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(2511)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "636",
                            CardHolderName = "Personal Loan Account",
                            CardNumber = "6706506511959173",
                            ExpiryDate = new DateTime(2027, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(2771)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "593",
                            CardHolderName = "Checking Account",
                            CardNumber = "4472746450979",
                            ExpiryDate = new DateTime(2032, 6, 2, 20, 50, 44, 612, DateTimeKind.Local).AddTicks(3027)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 6, 2, 20, 50, 44, 607, DateTimeKind.Local).AddTicks(520),
                            ConcurrencyStamp = "dadbfaad-68b4-4638-80e4-fcd02d68756c",
                            Email = "demetris.hackett@terry.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ledner",
                            PhoneNumber = "979-320-2769",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a43f6ca-3e10-403e-907f-25f2492f1a73",
                            Surname = "Stroman",
                            TwoFactorEnabled = false,
                            UserName = "robbie"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2005, 6, 2, 20, 50, 44, 607, DateTimeKind.Local).AddTicks(4644),
                            ConcurrencyStamp = "2ae8d3b8-1c90-496e-9141-8ccf5b6bbbb0",
                            Email = "nels@beier.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hudson",
                            PhoneNumber = "200-470-7431",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc7f983c-5be9-4f1f-ad91-ce99c1441e5c",
                            Surname = "Rempel",
                            TwoFactorEnabled = false,
                            UserName = "stevie"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 6, 2, 20, 50, 44, 607, DateTimeKind.Local).AddTicks(7399),
                            ConcurrencyStamp = "441be1e7-e100-405f-81b3-fb345b1f0629",
                            Email = "jerrell@abbott.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Larson",
                            PhoneNumber = "322.424.7200",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7d526b8-7887-40ce-81e2-153e83489038",
                            Surname = "Vandervort",
                            TwoFactorEnabled = false,
                            UserName = "claudia"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1977, 6, 2, 20, 50, 44, 608, DateTimeKind.Local).AddTicks(420),
                            ConcurrencyStamp = "63695683-22b5-45b3-9083-68c0b642bae8",
                            Email = "luigi_lowe@gleason.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lemke",
                            PhoneNumber = "694.489.8196",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6da8d0b0-e519-4f6f-b149-d5bee0d9f2b8",
                            Surname = "Crist",
                            TwoFactorEnabled = false,
                            UserName = "paxton"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "762047f7-5309-45e8-8661-adb3dc7eaf86",
                            Email = "aapkhazava22@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "AAPKHAZAVA22@GMAIL.COM",
                            NormalizedUserName = "GUGAADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrsoSaYg3KvtX0awWxhPbe7m7nHG+IohW1gLT3ZtbUuip/e4BUepGUkIU5QH1wibA==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "226354a5-86f5-4fbb-82c4-4e1fb6765a32",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "gugaadmin"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 0.9769139255852110m,
                            ProductCategoryId = 1L,
                            ProductName = "Sleek Steel Fish"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 0.2423756411080440m,
                            ProductCategoryId = 2L,
                            ProductName = "Small Fresh Soap"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 0.1095439796749350m,
                            ProductCategoryId = 3L,
                            ProductName = "Licensed Plastic Pants"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 0.1169930684884530m,
                            ProductCategoryId = 4L,
                            ProductName = "Rustic Soft Shoes"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 0.8513664257818320m,
                            ProductCategoryId = 5L,
                            ProductName = "Tasty Wooden Shoes"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 0.2769163344326630m,
                            ProductCategoryId = 6L,
                            ProductName = "Generic Cotton Sausages"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 0.8311701554633210m,
                            ProductCategoryId = 7L,
                            ProductName = "Handmade Rubber Shoes"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 0.8998930107807970m,
                            ProductCategoryId = 8L,
                            ProductName = "Intelligent Concrete Towels"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 0.3341109826597690m,
                            ProductCategoryId = 9L,
                            ProductName = "Generic Steel Chips"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 0.01023621663870960m,
                            ProductCategoryId = 1L,
                            ProductName = "Fantastic Fresh Car"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 0.137799080294620m,
                            ProductCategoryId = 3L,
                            ProductName = "Practical Wooden Pizza"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 0.8920679190394550m,
                            ProductCategoryId = 4L,
                            ProductName = "Sleek Plastic Mouse"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 0.3634897011449230m,
                            ProductCategoryId = 3L,
                            ProductName = "Refined Soft Table"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 0.7307625576318240m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Wooden Car"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 0.8240924372551390m,
                            ProductCategoryId = 1L,
                            ProductName = "Handcrafted Concrete Salad"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 0.4843404616576110m,
                            ProductCategoryId = 2L,
                            ProductName = "Refined Soft Bike"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 0.2468174403920780m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Steel Cheese"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 0.8707581461816520m,
                            ProductCategoryId = 4L,
                            ProductName = "Small Concrete Fish"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 0.4849513374842890m,
                            ProductCategoryId = 5L,
                            ProductName = "Incredible Cotton Hat"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 0.4152807967773790m,
                            ProductCategoryId = 6L,
                            ProductName = "Fantastic Rubber Chair"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 0.7115973332096360m,
                            ProductCategoryId = 7L,
                            ProductName = "Fantastic Cotton Keyboard"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 0.008043071655095550m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Steel Chair"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 0.9136845613360820m,
                            ProductCategoryId = 9L,
                            ProductName = "Licensed Concrete Tuna"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 0.7571008862779890m,
                            ProductCategoryId = 1L,
                            ProductName = "Handcrafted Cotton Hat"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 0.1580135870880490m,
                            ProductCategoryId = 3L,
                            ProductName = "Handmade Steel Keyboard"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 0.1249321068579620m,
                            ProductCategoryId = 4L,
                            ProductName = "Tasty Frozen Shirt"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 0.8880735782472570m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Wooden Computer"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 0.2581431965011270m,
                            ProductCategoryId = 6L,
                            ProductName = "Tasty Fresh Pizza"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Tools"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 240m,
                            Id = 1L,
                            Quantity = 57,
                            UnitPrice = 382.88m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 864m,
                            Id = 2L,
                            Quantity = 17,
                            UnitPrice = 95.94m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 268m,
                            Id = 3L,
                            Quantity = 19,
                            UnitPrice = 335.26m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 592m,
                            Id = 4L,
                            Quantity = 98,
                            UnitPrice = 291.09m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 644m,
                            Id = 5L,
                            Quantity = 96,
                            UnitPrice = 517.81m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 582m,
                            Id = 6L,
                            Quantity = 85,
                            UnitPrice = 329.27m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 683m,
                            Id = 7L,
                            Quantity = 12,
                            UnitPrice = 126.55m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 542m,
                            Id = 8L,
                            Quantity = 51,
                            UnitPrice = 818.98m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 460m,
                            Id = 9L,
                            Quantity = 14,
                            UnitPrice = 406.30m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 898m,
                            Id = 10L,
                            Quantity = 62,
                            UnitPrice = 909.43m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Minima doloremque alias laudantium ut doloribus et nemo doloribus qui. Ut sint ab et quos recusandae. Reprehenderit impedit et. Neque molestias fugiat odit. Tenetur magni iure maiores et. Ducimus consectetur qui et et voluptatem placeat exercitationem suscipit.",
                            RequestDate = new DateTime(2024, 5, 3, 20, 50, 44, 619, DateTimeKind.Local).AddTicks(2171),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Blanditiis quae architecto ut minus porro.",
                            RequestDate = new DateTime(2024, 2, 23, 20, 50, 44, 619, DateTimeKind.Local).AddTicks(2459),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Adipisci nostrum dolor sint rerum non nihil libero.\nVeritatis corporis qui ut qui dolor ducimus repudiandae ea.\nEos autem corporis quisquam sed dolore suscipit.\nIpsa maxime repellendus qui qui molestias vel autem occaecati.\nQuaerat voluptatum sed accusantium.\nLibero eveniet ab nemo illum error.",
                            RequestDate = new DateTime(2024, 5, 13, 20, 50, 44, 619, DateTimeKind.Local).AddTicks(2485),
                            Status = "Declined"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 18, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7505),
                            ReviewText = "Earum praesentium dolore adipisci quod voluptatibus aliquid perferendis.\nDolorum quos voluptate alias non."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 9, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7614),
                            ReviewText = "Et reprehenderit aperiam totam ullam tempora impedit iste non expedita.\nLaborum eos ullam.\nEos dolores sunt nobis."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 10, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7755),
                            ReviewText = "reprehenderit"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 31, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7760),
                            ReviewText = "Voluptates quia soluta."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 4, 29, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7775),
                            ReviewText = "sint"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 4, 28, 20, 50, 44, 620, DateTimeKind.Local).AddTicks(7780),
                            ReviewText = "amet"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "3w2pbxZi8SVrNKhqmXydPQ5FGauAgLW",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 5, 29, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(2742),
                            Status = "Sent from abroad",
                            TrackingNumber = "FQTOTJF1818"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "18kTWZSGzgypXsR3LjNvQif7D2rMn",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 5, 28, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(2873),
                            Status = "Recieved from abroad",
                            TrackingNumber = "LWZABSI1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "1R8i9ZaHyJrL4hoF6EtjKxQvpdDez5cSm1",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 18, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(2979),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "TZQECXZ1941"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "3WF4z9yCc8o6knbwDQKAjRatMLY2",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 18, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(3115),
                            Status = "delivered",
                            TrackingNumber = "CBPIINR1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "3nXFaJcfmqd58D2pzQWLY4w1UbuxHTiK",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 5, 30, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(3178),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "IDZUPRL1861"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1xiag3Pu2Fkv4JyndCGes8VKTz5ScmQ",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 22, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(3380),
                            Status = "recieved",
                            TrackingNumber = "ZDIOCSI1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1154Q3aVEedxCzFZAJtyL98snUY",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 7, 20, 50, 44, 622, DateTimeKind.Local).AddTicks(3422),
                            Status = "boxing",
                            TrackingNumber = "XNBOMDY1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
