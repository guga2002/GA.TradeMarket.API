// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240606115432_migrateV")]
    partial class migrateV
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2003, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2425),
                            Points = 317
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2441),
                            Points = 306
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2004, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2444),
                            Points = 541
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2015, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2449),
                            Points = 534
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2012, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2453),
                            Points = 762
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2020, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2458),
                            Points = 863
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2011, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2462),
                            Points = 498
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2001, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2466),
                            Points = 861
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2023, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2470),
                            Points = 136
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2001, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2474),
                            Points = 570
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2011, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2479),
                            Points = 204
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2018, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2483),
                            Points = 888
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2009, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2488),
                            Points = 825
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2012, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2492),
                            Points = 561
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2011, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2497),
                            Points = 512
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2003, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2501),
                            Points = 393
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2005, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2505),
                            Points = 408
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2006, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2510),
                            Points = 560
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(1996, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2514),
                            Points = 808
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2002, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2518),
                            Points = 518
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1996, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2523),
                            Points = 866
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2006, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2527),
                            Points = 647
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2002, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2546),
                            Points = 419
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2011, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2550),
                            Points = 554
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2000, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2554),
                            Points = 141
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2015, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2558),
                            Points = 821
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1998, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2562),
                            Points = 418
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2016, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2566),
                            Points = 368
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2012, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2570),
                            Points = 787
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2006, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2574),
                            Points = 634
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2578),
                            Points = 651
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2015, 6, 6, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(2582),
                            Points = 310
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1awjizZJvKEeCtypR6HkdbqXgfP8B42D78212",
                            DiscountValue = 389m,
                            ExpiryDate = new DateTime(2025, 2, 7, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(3943)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "1MWTepNfjoHBwyi1mt8angCFduqLc759Q59676",
                            DiscountValue = 213m,
                            ExpiryDate = new DateTime(2025, 2, 28, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4241)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3tdrZyqoCLX3s95mYU4nzi2EA6HMb55255",
                            DiscountValue = 206m,
                            ExpiryDate = new DateTime(2024, 12, 14, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4386)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1sQmPwAGXcx6ikBMdtL7FK8NoayW27107",
                            DiscountValue = 232m,
                            ExpiryDate = new DateTime(2025, 6, 14, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4504)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1qEuBMdKCSw86nQWZADmb17N5JicjRfHx3t74769",
                            DiscountValue = 160m,
                            ExpiryDate = new DateTime(2025, 8, 15, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4629)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "1d6wxioXMcrq2GFVpgfS3by7knWZ78006",
                            DiscountValue = 172m,
                            ExpiryDate = new DateTime(2025, 2, 2, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4760)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "3U3NmvaobH1BVetjJQnPLsM4E7hxSp52962",
                            DiscountValue = 343m,
                            ExpiryDate = new DateTime(2024, 7, 29, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(4909)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "34soyVAXtF271np9M6kvimeJjBhzW8GL56774",
                            DiscountValue = 264m,
                            ExpiryDate = new DateTime(2025, 7, 13, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5036)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "1JsrQGdYU4RcfTegk3hSFvzDM8EPt80579",
                            DiscountValue = 160m,
                            ExpiryDate = new DateTime(2025, 1, 10, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5165)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "3L5qJ1xoMr6RKpDkEwunvdPsQfXt69857",
                            DiscountValue = 131m,
                            ExpiryDate = new DateTime(2025, 3, 15, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5275)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "1vVM1o5KGwXU9QdiNn4rmyLBzfxEgDJ6T32782",
                            DiscountValue = 377m,
                            ExpiryDate = new DateTime(2025, 3, 17, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5414)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "3PkBVbDztXjn8C6u1maicLxvyUr3R55035",
                            DiscountValue = 231m,
                            ExpiryDate = new DateTime(2024, 8, 13, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5534)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "3fm4MBKudWNHjewGLqc2CZoFsV130980",
                            DiscountValue = 164m,
                            ExpiryDate = new DateTime(2024, 7, 12, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5657)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "3dm3XMzEi2P6BjL5g7Wns48yaC16848",
                            DiscountValue = 221m,
                            ExpiryDate = new DateTime(2025, 7, 31, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5763)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "1SZn8NLgXbUG7CQmJD3KTo6p1jsq4dcBVP26552",
                            DiscountValue = 193m,
                            ExpiryDate = new DateTime(2025, 3, 16, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(5876)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "127UrGowyWNFvMgVjsn5bmTQY8e1i6ht80048",
                            DiscountValue = 127m,
                            ExpiryDate = new DateTime(2024, 11, 19, 15, 54, 30, 948, DateTimeKind.Local).AddTicks(6018)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 553m,
                            OperationDate = new DateTime(2023, 12, 30, 5, 54, 30, 956, DateTimeKind.Local).AddTicks(1738),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 285m,
                            OperationDate = new DateTime(2023, 10, 10, 17, 54, 30, 956, DateTimeKind.Local).AddTicks(1781),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 661m,
                            OperationDate = new DateTime(2023, 6, 21, 3, 54, 30, 956, DateTimeKind.Local).AddTicks(1786),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 117m,
                            OperationDate = new DateTime(2024, 4, 29, 15, 54, 30, 956, DateTimeKind.Local).AddTicks(1791),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 877m,
                            OperationDate = new DateTime(2023, 7, 9, 1, 54, 30, 956, DateTimeKind.Local).AddTicks(1804),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 307m,
                            OperationDate = new DateTime(2023, 6, 20, 22, 54, 30, 956, DateTimeKind.Local).AddTicks(1822),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 664m,
                            OperationDate = new DateTime(2024, 1, 17, 19, 54, 30, 956, DateTimeKind.Local).AddTicks(1827),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 555m,
                            OperationDate = new DateTime(2024, 4, 8, 20, 54, 30, 956, DateTimeKind.Local).AddTicks(1831),
                            PersonId = "8"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 6, 15, 54, 30, 939, DateTimeKind.Local).AddTicks(6985),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Message = "Et voluptas eos doloremque repellendus minus temporibus libero fugit et.\nNobis dolorem quis illo recusandae quia enim quas et.\nAut necessitatibus animi ex quasi quis dolores suscipit quo.\nEum voluptatem neque sequi qui atque.\nEst voluptas rerum.",
                            NotificationDate = new DateTime(2024, 5, 5, 3, 54, 30, 963, DateTimeKind.Local).AddTicks(9759),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Message = "Deleniti dicta earum.",
                            NotificationDate = new DateTime(2024, 5, 19, 19, 54, 30, 964, DateTimeKind.Local).AddTicks(388),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Message = "Nulla tenetur illum eos deserunt aut occaecati ullam earum dolores.",
                            NotificationDate = new DateTime(2024, 4, 27, 6, 54, 30, 964, DateTimeKind.Local).AddTicks(431),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Message = "quia",
                            NotificationDate = new DateTime(2024, 5, 1, 19, 54, 30, 964, DateTimeKind.Local).AddTicks(502),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Message = "Omnis voluptates ad eius nam quia nemo modi. Consequatur consequatur magni illo est saepe qui delectus nihil. Sed vero suscipit distinctio quidem perferendis quibusdam minima beatae labore.",
                            NotificationDate = new DateTime(2024, 5, 12, 23, 54, 30, 964, DateTimeKind.Local).AddTicks(515),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Message = "neque",
                            NotificationDate = new DateTime(2024, 5, 16, 18, 54, 30, 964, DateTimeKind.Local).AddTicks(705),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Message = "dolore",
                            NotificationDate = new DateTime(2024, 6, 3, 7, 54, 30, 964, DateTimeKind.Local).AddTicks(728),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Message = "Doloribus natus autem voluptate optio et.\nTotam possimus tempore.\nVoluptas iste deleniti adipisci in temporibus ut ut cumque nesciunt.",
                            NotificationDate = new DateTime(2024, 6, 4, 2, 54, 30, 964, DateTimeKind.Local).AddTicks(738),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Message = "Officiis amet beatae molestias.",
                            NotificationDate = new DateTime(2024, 5, 20, 1, 54, 30, 964, DateTimeKind.Local).AddTicks(899),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            Message = "Hic dolor quia eos mollitia.",
                            NotificationDate = new DateTime(2024, 6, 4, 19, 54, 30, 964, DateTimeKind.Local).AddTicks(938),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            Message = "Doloribus fugiat quo labore deserunt accusantium. Quia nulla ullam nostrum. Et autem sit odit. Ut quidem in at consectetur illum est eaque. Alias nemo temporibus corrupti repudiandae quae rerum quam iure qui. Aut nesciunt quam.",
                            NotificationDate = new DateTime(2024, 6, 5, 3, 54, 30, 964, DateTimeKind.Local).AddTicks(979),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            Message = "et",
                            NotificationDate = new DateTime(2024, 5, 29, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(1562),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            Message = "Ut explicabo fugit.",
                            NotificationDate = new DateTime(2024, 5, 19, 17, 54, 30, 964, DateTimeKind.Local).AddTicks(1576),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            Message = "Nemo quisquam atque impedit. Aperiam ullam earum delectus sapiente molestiae. Aut aliquid ducimus et quasi in quia iste quaerat blanditiis. Omnis quas eaque necessitatibus deserunt praesentium accusamus omnis dolores voluptas. In aut molestias dolorum quidem quidem repellendus officia non.",
                            NotificationDate = new DateTime(2024, 5, 3, 5, 54, 30, 964, DateTimeKind.Local).AddTicks(1608),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Message = "qui",
                            NotificationDate = new DateTime(2024, 5, 12, 4, 54, 30, 964, DateTimeKind.Local).AddTicks(2011),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Message = "Nobis sequi eveniet.\nUt eius consectetur.\nItaque consequatur ratione inventore autem.\nFugiat consequatur exercitationem iste dolor explicabo est sit itaque.\nPlaceat impedit aspernatur et aut hic.\nAut sed qui.",
                            NotificationDate = new DateTime(2024, 5, 15, 3, 54, 30, 964, DateTimeKind.Local).AddTicks(2028),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            Message = "Voluptatum est quia amet architecto illo maiores porro.\nQuos iste et est mollitia nihil odit ex ratione.\nCum rerum recusandae reprehenderit est.\nUt et autem atque ipsum laborum amet corrupti expedita perferendis.\nDebitis exercitationem totam quam autem.",
                            NotificationDate = new DateTime(2024, 5, 3, 14, 54, 30, 964, DateTimeKind.Local).AddTicks(2318),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            Message = "in",
                            NotificationDate = new DateTime(2024, 5, 7, 21, 54, 30, 964, DateTimeKind.Local).AddTicks(2616),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 11, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3640),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 30, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3651),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 13, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3654),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 1, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3655),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 10, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3657),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 5, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3659),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 10, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3661),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 17, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3662),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 25, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3664),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 29, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3732),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 4, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3734),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 9, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3736),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 22, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3738),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 29, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3739),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 11, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3748),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 25, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3751),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 31, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3753),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 24, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3755),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 8, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3757),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 20, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3758),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 9, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3760),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 8, 15, 54, 30, 964, DateTimeKind.Local).AddTicks(3761),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 839m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 27, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(268),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 972m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 27, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(289),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 115m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 30, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(294),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 460m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 27, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(299),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 210m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 22, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(303),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 262m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 29, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(308),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 889m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 26, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(326),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 151m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 28, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(331),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 684m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 25, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(337),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 82m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 28, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(344),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 371m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 22, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(349),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 521m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 24, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(354),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 875m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 18, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(358),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 689m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 29, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(363),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 612m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 8, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(368),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 210m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 30, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(372),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 854m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 15, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(376),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 451m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 9, 15, 54, 30, 977, DateTimeKind.Local).AddTicks(381),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "800",
                            CardHolderName = "Gennaro Stokes",
                            CardNumber = "4048-6497-6752-4317",
                            ExpiryDate = new DateTime(2028, 6, 6, 15, 54, 30, 973, DateTimeKind.Local).AddTicks(9964)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "744",
                            CardHolderName = "Donnell Rosenbaum",
                            CardNumber = "6771846782137103",
                            ExpiryDate = new DateTime(2029, 6, 6, 15, 54, 30, 974, DateTimeKind.Local).AddTicks(1519)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "114",
                            CardHolderName = "Brandon Wilderman",
                            CardNumber = "6771-8904-5125-0649",
                            ExpiryDate = new DateTime(2026, 6, 6, 15, 54, 30, 974, DateTimeKind.Local).AddTicks(5265)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "512",
                            CardHolderName = "Kole Smith",
                            CardNumber = "6771-8987-8885-1062",
                            ExpiryDate = new DateTime(2030, 6, 6, 15, 54, 30, 974, DateTimeKind.Local).AddTicks(6552)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "409",
                            CardHolderName = "Haylee Nicolas",
                            CardNumber = "6372-3280-6897-8719",
                            ExpiryDate = new DateTime(2031, 6, 6, 15, 54, 30, 974, DateTimeKind.Local).AddTicks(7814)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "377",
                            CardHolderName = "Kaela Homenick",
                            CardNumber = "6395-7383-3381-4577",
                            ExpiryDate = new DateTime(2032, 6, 6, 15, 54, 30, 974, DateTimeKind.Local).AddTicks(8935)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "664",
                            CardHolderName = "Christina Nicolas",
                            CardNumber = "676236078550174964",
                            ExpiryDate = new DateTime(2027, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(76)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "113",
                            CardHolderName = "Ahmed Kassulke",
                            CardNumber = "5138-3197-0224-9994",
                            ExpiryDate = new DateTime(2026, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(1317)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "040",
                            CardHolderName = "Scottie Heathcote",
                            CardNumber = "3731-181935-19211",
                            ExpiryDate = new DateTime(2033, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(2351)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "976",
                            CardHolderName = "Domingo Deckow",
                            CardNumber = "4680011011579",
                            ExpiryDate = new DateTime(2027, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(3469)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "923",
                            CardHolderName = "Janessa Schinner",
                            CardNumber = "4249954317656",
                            ExpiryDate = new DateTime(2031, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(4430)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "470",
                            CardHolderName = "Alek Abernathy",
                            CardNumber = "3447-643690-88493",
                            ExpiryDate = new DateTime(2031, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(5411)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "794",
                            CardHolderName = "Gideon Botsford",
                            CardNumber = "6472-2304-2540-9009",
                            ExpiryDate = new DateTime(2026, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(6543)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "225",
                            CardHolderName = "Jarrett Funk",
                            CardNumber = "5170-9364-0192-9441",
                            ExpiryDate = new DateTime(2031, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(7639)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "866",
                            CardHolderName = "Lafayette Waelchi",
                            CardNumber = "676338900553648909",
                            ExpiryDate = new DateTime(2026, 6, 6, 15, 54, 30, 975, DateTimeKind.Local).AddTicks(8879)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "205",
                            CardHolderName = "Shanelle Barton",
                            CardNumber = "5020-1161-3820-6312",
                            ExpiryDate = new DateTime(2030, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(139)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "640",
                            CardHolderName = "Nat Barton",
                            CardNumber = "6381-0120-0328-4123",
                            ExpiryDate = new DateTime(2032, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(1278)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "722",
                            CardHolderName = "Bailey Huel",
                            CardNumber = "3792-232800-21222",
                            ExpiryDate = new DateTime(2026, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(2332)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "264",
                            CardHolderName = "Danika Macejkovic",
                            CardNumber = "5020-1154-0720-1947",
                            ExpiryDate = new DateTime(2029, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(5779)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "577",
                            CardHolderName = "Christiana Auer",
                            CardNumber = "6771-8969-9119-6143",
                            ExpiryDate = new DateTime(2032, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(6864)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "165",
                            CardHolderName = "Ophelia Lehner",
                            CardNumber = "3678-616973-5547",
                            ExpiryDate = new DateTime(2029, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(7800)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "672",
                            CardHolderName = "Elsa Casper",
                            CardNumber = "6011-6255-9956-4572-3804",
                            ExpiryDate = new DateTime(2029, 6, 6, 15, 54, 30, 976, DateTimeKind.Local).AddTicks(8860)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 6, 6, 15, 54, 30, 949, DateTimeKind.Local).AddTicks(1276),
                            ConcurrencyStamp = "2e3e7878-d0ba-4495-82f2-6f9592625c32",
                            Email = "leola@tillmankassulke.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lang",
                            PhoneNumber = "(852)455-5897 x568",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09cc16fa-efc7-46db-a288-f7188aa2988b",
                            Surname = "McGlynn",
                            TwoFactorEnabled = false,
                            UserName = "rhoda.paucek"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 6, 6, 15, 54, 30, 950, DateTimeKind.Local).AddTicks(2924),
                            ConcurrencyStamp = "caaba42a-e683-4d02-a8b4-628c106c9c38",
                            Email = "gustave.braun@whitespinka.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lehner",
                            PhoneNumber = "(390)251-8791",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11b58e7d-49de-4835-942e-c3cbc763e8e1",
                            Surname = "Predovic",
                            TwoFactorEnabled = false,
                            UserName = "teagan_homenick"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 6, 6, 15, 54, 30, 950, DateTimeKind.Local).AddTicks(8569),
                            ConcurrencyStamp = "c2f78733-1165-4e0a-a897-ca2c900c3699",
                            Email = "joaquin_metz@hilpert.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rutherford",
                            PhoneNumber = "452.465.2306",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35f37133-623d-488e-a64c-82cc3ae23d0e",
                            Surname = "Cartwright",
                            TwoFactorEnabled = false,
                            UserName = "mara_gleason"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2013, 6, 6, 15, 54, 30, 953, DateTimeKind.Local).AddTicks(1172),
                            ConcurrencyStamp = "91945edc-e793-4ca3-8f63-1624ebf939a0",
                            Email = "felicia@oberbrunnercrona.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Kunze",
                            PhoneNumber = "1-237-401-8152",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f59ca2ee-f882-42fb-a08e-980f18bbaff5",
                            Surname = "Corkery",
                            TwoFactorEnabled = false,
                            UserName = "hardy_okuneva"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 6, 6, 15, 54, 30, 953, DateTimeKind.Local).AddTicks(8471),
                            ConcurrencyStamp = "6c851b8e-ad88-4bf8-8332-58d9c825ce80",
                            Email = "vincent@sawaynbechtelar.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Funk",
                            PhoneNumber = "1-933-502-8313 x1990",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6484ef31-8fa4-4b69-95f0-cfa46af3a458",
                            Surname = "Dach",
                            TwoFactorEnabled = false,
                            UserName = "noah"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1967, 6, 6, 15, 54, 30, 954, DateTimeKind.Local).AddTicks(4625),
                            ConcurrencyStamp = "a8b4f503-2833-4906-aae6-07ee056b8a21",
                            Email = "sigmund@cummerata.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Skiles",
                            PhoneNumber = "281-839-7278 x156",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59ca6a9d-1ddd-4fff-a754-6f6987a8acf9",
                            Surname = "Crooks",
                            TwoFactorEnabled = false,
                            UserName = "kira"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 6, 6, 15, 54, 30, 955, DateTimeKind.Local).AddTicks(1641),
                            ConcurrencyStamp = "599fc16c-fb9c-4224-9cd8-f829de02320f",
                            Email = "carley.windler@marvin.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ruecker",
                            PhoneNumber = "473.456.7216 x048",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9631bcf4-a3fb-4b24-8699-42578ba83608",
                            Surname = "Stark",
                            TwoFactorEnabled = false,
                            UserName = "jadon"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2013, 6, 6, 15, 54, 30, 955, DateTimeKind.Local).AddTicks(7606),
                            ConcurrencyStamp = "1ab79499-61bc-4bd0-b418-ee5e65e06534",
                            Email = "norwood.quigley@wintheiser.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "O'Hara",
                            PhoneNumber = "556-424-9392 x062",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3404a20c-aaad-47d2-ac81-21d3bcf95413",
                            Surname = "Weissnat",
                            TwoFactorEnabled = false,
                            UserName = "pat.wiza"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "25e446cc-9bce-4f9e-aee8-7c8490387ed7",
                            Email = "aapkhazava22@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "AAPKHAZAVA22@GMAIL.COM",
                            NormalizedUserName = "GUGAADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAED5lnFFF5WWGq2kbmym5ronT+NE/6sUikqB9tfaflECIZkhIaAGrknT+QTRZFKr0pw==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "64dbfd49-08b1-4c53-9d2d-1c73a796a0d8",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "gugaadmin"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 799.12m,
                            ProductCategoryId = 1L,
                            ProductName = "Tasty Steel Chair"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 751.34m,
                            ProductCategoryId = 2L,
                            ProductName = "Unbranded Soft Hat"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 574.49m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Frozen Shoes"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 820.90m,
                            ProductCategoryId = 4L,
                            ProductName = "Awesome Steel Gloves"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 409.09m,
                            ProductCategoryId = 5L,
                            ProductName = "Licensed Rubber Soap"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 546.32m,
                            ProductCategoryId = 6L,
                            ProductName = "Fantastic Granite Tuna"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 750.99m,
                            ProductCategoryId = 7L,
                            ProductName = "Fantastic Concrete Table"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 881.69m,
                            ProductCategoryId = 8L,
                            ProductName = "Unbranded Steel Bacon"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 450.10m,
                            ProductCategoryId = 9L,
                            ProductName = "Unbranded Steel Car"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 536.17m,
                            ProductCategoryId = 1L,
                            ProductName = "Tasty Concrete Gloves"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 201.58m,
                            ProductCategoryId = 3L,
                            ProductName = "Handcrafted Wooden Table"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 506.86m,
                            ProductCategoryId = 4L,
                            ProductName = "Generic Steel Bacon"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 343.29m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Wooden Keyboard"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 410.76m,
                            ProductCategoryId = 6L,
                            ProductName = "Ergonomic Concrete Ball"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 138.29m,
                            ProductCategoryId = 11L,
                            ProductName = "Tasty Fresh Tuna"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 372.87m,
                            ProductCategoryId = 12L,
                            ProductName = "Awesome Rubber Pants"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 337.88m,
                            ProductCategoryId = 13L,
                            ProductName = "Gorgeous Granite Pants"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 782.89m,
                            ProductCategoryId = 14L,
                            ProductName = "Refined Wooden Mouse"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 475.34m,
                            ProductCategoryId = 15L,
                            ProductName = "Sleek Metal Chips"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 648.62m,
                            ProductCategoryId = 16L,
                            ProductName = "Practical Cotton Soap"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 664.69m,
                            ProductCategoryId = 17L,
                            ProductName = "Tasty Plastic Ball"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 684.06m,
                            ProductCategoryId = 8L,
                            ProductName = "Ergonomic Metal Chips"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 43.90m,
                            ProductCategoryId = 9L,
                            ProductName = "Tasty Concrete Pants"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 803.72m,
                            ProductCategoryId = 14L,
                            ProductName = "Awesome Granite Keyboard"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 500.50m,
                            ProductCategoryId = 13L,
                            ProductName = "Tasty Frozen Gloves"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 463.13m,
                            ProductCategoryId = 4L,
                            ProductName = "Refined Concrete Tuna"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 124.15m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Wooden Soap"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 222.17m,
                            ProductCategoryId = 6L,
                            ProductName = "Practical Metal Keyboard"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 741.55m,
                            ProductCategoryId = 1L,
                            ProductName = "Incredible Granite Tuna"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 865.98m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Cotton Shirt"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 186.62m,
                            ProductCategoryId = 3L,
                            ProductName = "Small Steel Sausages"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 914.31m,
                            ProductCategoryId = 4L,
                            ProductName = "Handmade Steel Chips"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 738.71m,
                            ProductCategoryId = 5L,
                            ProductName = "Intelligent Plastic Bacon"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 798.92m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Metal Fish"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 418.25m,
                            ProductCategoryId = 7L,
                            ProductName = "Awesome Steel Bike"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 136.52m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Plastic Tuna"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 824.86m,
                            ProductCategoryId = 9L,
                            ProductName = "Practical Cotton Shirt"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 5.57m,
                            ProductCategoryId = 1L,
                            ProductName = "Intelligent Metal Pants"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 904.02m,
                            ProductCategoryId = 11L,
                            ProductName = "Tasty Wooden Cheese"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 408.21m,
                            ProductCategoryId = 14L,
                            ProductName = "Fantastic Cotton Keyboard"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 367.81m,
                            ProductCategoryId = 3L,
                            ProductName = "Tasty Soft Table"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 456.96m,
                            ProductCategoryId = 6L,
                            ProductName = "Small Granite Hat"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 648.02m,
                            ProductCategoryId = 15L,
                            ProductName = "Practical Granite Pants"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 552.57m,
                            ProductCategoryId = 2L,
                            ProductName = "Handcrafted Metal Pizza"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 740.82m,
                            ProductCategoryId = 18L,
                            ProductName = "Tasty Wooden Shoes"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 199.80m,
                            ProductCategoryId = 4L,
                            ProductName = "Ergonomic Fresh Mouse"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 256.42m,
                            ProductCategoryId = 15L,
                            ProductName = "Intelligent Metal Car"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 181.74m,
                            ProductCategoryId = 19L,
                            ProductName = "Handcrafted Concrete Towels"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 790.51m,
                            ProductCategoryId = 20L,
                            ProductName = "Small Frozen Soap"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 195.21m,
                            ProductCategoryId = 8L,
                            ProductName = "Unbranded Granite Pants"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 957.09m,
                            ProductCategoryId = 14L,
                            ProductName = "Handcrafted Metal Chips"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 565.99m,
                            ProductCategoryId = 13L,
                            ProductName = "Awesome Rubber Shirt"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 119.90m,
                            ProductCategoryId = 19L,
                            ProductName = "Tasty Plastic Pizza"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 941.64m,
                            ProductCategoryId = 16L,
                            ProductName = "Ergonomic Granite Soap"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 23.70m,
                            ProductCategoryId = 11L,
                            ProductName = "Handcrafted Plastic Sausages"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 327.95m,
                            ProductCategoryId = 13L,
                            ProductName = "Handmade Concrete Gloves"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Garden"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 639m,
                            Id = 1L,
                            Quantity = 25,
                            UnitPrice = 208.73m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 966m,
                            Id = 2L,
                            Quantity = 37,
                            UnitPrice = 856.40m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 409m,
                            Id = 3L,
                            Quantity = 63,
                            UnitPrice = 522.99m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 684m,
                            Id = 4L,
                            Quantity = 88,
                            UnitPrice = 874.20m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 522m,
                            Id = 5L,
                            Quantity = 27,
                            UnitPrice = 924.90m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 799m,
                            Id = 6L,
                            Quantity = 80,
                            UnitPrice = 85.77m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 110m,
                            Id = 7L,
                            Quantity = 56,
                            UnitPrice = 816.48m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 539m,
                            Id = 8L,
                            Quantity = 41,
                            UnitPrice = 987.68m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 243m,
                            Id = 9L,
                            Quantity = 46,
                            UnitPrice = 981.64m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 218m,
                            Id = 10L,
                            Quantity = 18,
                            UnitPrice = 626.70m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 549m,
                            Id = 11L,
                            Quantity = 33,
                            UnitPrice = 673.90m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 53m,
                            Id = 12L,
                            Quantity = 18,
                            UnitPrice = 467.60m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 733m,
                            Id = 13L,
                            Quantity = 94,
                            UnitPrice = 448.80m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 821m,
                            Id = 14L,
                            Quantity = 14,
                            UnitPrice = 393.83m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 993m,
                            Id = 15L,
                            Quantity = 39,
                            UnitPrice = 508.52m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 371m,
                            Id = 16L,
                            Quantity = 17,
                            UnitPrice = 288.31m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 388m,
                            Id = 17L,
                            Quantity = 40,
                            UnitPrice = 723.03m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 958m,
                            Id = 18L,
                            Quantity = 74,
                            UnitPrice = 169.20m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 648m,
                            Id = 19L,
                            Quantity = 47,
                            UnitPrice = 820.74m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 534m,
                            Id = 20L,
                            Quantity = 94,
                            UnitPrice = 491.33m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Voluptas hic magni praesentium. Quos id enim beatae deleniti perspiciatis aut aut. Laboriosam at laudantium cupiditate.",
                            RequestDate = new DateTime(2024, 5, 7, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(6366),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "veniam",
                            RequestDate = new DateTime(2024, 2, 27, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(7035),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Consectetur illum reiciendis est iure accusamus aut adipisci. Sint officia fugit praesentium voluptatem quidem iste veritatis doloribus sint. Velit voluptates dolorem et quasi eos. Aut est nobis est nisi. Et velit nemo omnis illum quia eos deleniti accusantium. Atque cumque vel provident voluptatibus atque facilis enim et.",
                            RequestDate = new DateTime(2024, 5, 17, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(7067),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Dolor dolorem sed molestiae dignissimos dolores voluptas repudiandae dolorum cumque.",
                            RequestDate = new DateTime(2024, 5, 7, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(7954),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Aut possimus non accusamus aut.\nQuaerat voluptatum quos.\nVoluptatibus consectetur iste.",
                            RequestDate = new DateTime(2024, 2, 27, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(8140),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Molestiae qui minima at pariatur qui.",
                            RequestDate = new DateTime(2024, 5, 17, 15, 54, 31, 15, DateTimeKind.Local).AddTicks(8408),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 22, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(8284),
                            ReviewText = "Voluptate et non aut sit vero corrupti suscipit. Necessitatibus quia neque sed autem magni laborum accusamus. Et odit inventore expedita. Iusto omnis fuga ut doloribus consequuntur quae qui."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 13, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(8874),
                            ReviewText = "Est maiores quae dolores."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 14, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(8923),
                            ReviewText = "Maxime mollitia facere quo sed unde repellat sint libero a.\nIure et quisquam voluptas facilis in ad.\nMaxime qui quidem.\nDebitis repudiandae beatae non deleniti."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 4, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9121),
                            ReviewText = "Ipsum est quod."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 3, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9158),
                            ReviewText = "Nulla repellat non reprehenderit tenetur sequi excepturi tempora.\nEa quas ad aperiam.\nRerum deleniti explicabo nostrum."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 2, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9349),
                            ReviewText = "rerum"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 22, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9388),
                            ReviewText = "voluptatem"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 13, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9400),
                            ReviewText = "Eum et enim qui inventore sequi assumenda voluptate quia."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 14, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9467),
                            ReviewText = "Aliquid aut itaque non ratione eligendi iusto omnis asperiores. Voluptatibus sint natus. Optio quidem ipsa. Sed rem deserunt enim asperiores ut. Impedit libero pariatur laborum earum nam suscipit necessitatibus qui. Dolor a exercitationem odio rerum ut molestiae officia."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 4, 15, 54, 31, 23, DateTimeKind.Local).AddTicks(9811),
                            ReviewText = "Numquam qui animi quibusdam sequi tempora. Voluptatibus id eligendi est velit neque fugit. Quis dolores necessitatibus. Temporibus et enim rem autem molestias repudiandae."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "1GAjgcrL1J9DtqEYoURZ83dQabz",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 2, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(5960),
                            Status = "Sent from abroad",
                            TrackingNumber = "VYCUPFF1VET"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "3cZMorCEignGT6UWKuRYB7qJ3XDd9tHmsh",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 1, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(6351),
                            Status = "Recieved from abroad",
                            TrackingNumber = "PPOUCUR1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "1qct6FBUSxQnhGEPaX5zvYRdZLru8b",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 22, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(6482),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "EZSOINH1155"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1G5SkimRLavTMendNobZ3jw6hCV2usUD7Px",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 22, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(6647),
                            Status = "delivered",
                            TrackingNumber = "ETZUPWB1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "34RpC8jmigoYSZKTvJdEW1FcGL57Vr",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 3, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(6771),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "LRHUSNY1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1ygtDcaYSKzu8PA2nj3FxbqkNMmRUB9d4",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 26, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(6888),
                            Status = "recieved",
                            TrackingNumber = "KZQOVCR1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "3CHideTrS4WGtj1E7Y6Ug5RxyQkZFPzXcq",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 11, 15, 54, 31, 30, DateTimeKind.Local).AddTicks(7034),
                            Status = "boxing",
                            TrackingNumber = "HHQIKEW1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
