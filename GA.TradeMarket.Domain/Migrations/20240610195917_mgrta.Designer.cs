// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240610195917_mgrta")]
    partial class mgrta
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoggMesagge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2000, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(3987),
                            Points = 754
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(3992),
                            Points = 604
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2016, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(3994),
                            Points = 839
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2022, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(3996),
                            Points = 992
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1997, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(3998),
                            Points = 643
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1995, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4000),
                            Points = 518
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4002),
                            Points = 404
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2004, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4004),
                            Points = 438
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4006),
                            Points = 897
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1995, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4007),
                            Points = 647
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1999, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4009),
                            Points = 118
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4011),
                            Points = 328
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2010, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4013),
                            Points = 232
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4014),
                            Points = 365
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4016),
                            Points = 854
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2000, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4018),
                            Points = 503
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1999, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4020),
                            Points = 239
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2015, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4022),
                            Points = 110
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4024),
                            Points = 942
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4026),
                            Points = 944
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4028),
                            Points = 548
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2015, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4030),
                            Points = 721
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2006, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4039),
                            Points = 334
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2000, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4041),
                            Points = 617
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4043),
                            Points = 916
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2010, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4045),
                            Points = 653
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2010, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4047),
                            Points = 144
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4048),
                            Points = 575
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4051),
                            Points = 498
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2016, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4052),
                            Points = 257
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4054),
                            Points = 127
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(4056),
                            Points = 579
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1mN9sAwiFyauvMqTPVZW2bXCr4Y8fopkxE59767",
                            DiscountValue = 167m,
                            ExpiryDate = new DateTime(2025, 4, 22, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1097)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "1bGkFYnB2iscwZjXR5u9dPVLNWHA127789",
                            DiscountValue = 301m,
                            ExpiryDate = new DateTime(2024, 9, 5, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1300)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3vyXEhxwMtFSkRgLW4aqGsTHe7Pm1U222537",
                            DiscountValue = 107m,
                            ExpiryDate = new DateTime(2025, 2, 3, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1358)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1qBrJpR7jHbkfmNZGuoXCD1L5W38510",
                            DiscountValue = 375m,
                            ExpiryDate = new DateTime(2025, 6, 18, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1408)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1hmjv7W1xsEyk836PCtJduTf2bR36320",
                            DiscountValue = 145m,
                            ExpiryDate = new DateTime(2025, 1, 19, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1485)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3Nc6aubPRe5pioLYGWJhjdXBtD2g781849",
                            DiscountValue = 224m,
                            ExpiryDate = new DateTime(2025, 6, 26, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1530)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "3R8Nn2EjkZGUJ5ufPwgWmxKYco3Hh643242",
                            DiscountValue = 105m,
                            ExpiryDate = new DateTime(2024, 7, 5, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1576)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1ya9cpE1MKFsJG6qRVgu8Dt7z4YjXeP75235",
                            DiscountValue = 391m,
                            ExpiryDate = new DateTime(2025, 8, 16, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1638)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "3tAZdcr1uPqa7bBMQyRiv5VCJUo3T28007",
                            DiscountValue = 338m,
                            ExpiryDate = new DateTime(2025, 4, 29, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1690)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "3FM6miAWHRjaLyE9TK1rVewnPg385339",
                            DiscountValue = 271m,
                            ExpiryDate = new DateTime(2024, 11, 30, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1737)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3K7MRdbCeQWYPghr1vfZi5V62o83139",
                            DiscountValue = 171m,
                            ExpiryDate = new DateTime(2025, 3, 13, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1785)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "38rzSCg7ToLqeNc1x4QFhBHstZw28228",
                            DiscountValue = 118m,
                            ExpiryDate = new DateTime(2024, 10, 28, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1830)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "17zpqnNf2L5Z4S8iPdjG91wXFc88019",
                            DiscountValue = 286m,
                            ExpiryDate = new DateTime(2025, 4, 17, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(1873)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "1QFz9EdXwT7s5h2J6fyBLAcDgMqKjut35661",
                            DiscountValue = 295m,
                            ExpiryDate = new DateTime(2025, 3, 31, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(2000)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "1QnUC16PeRL8sqc3XYMizGpaDTvuK57819",
                            DiscountValue = 379m,
                            ExpiryDate = new DateTime(2024, 7, 12, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(2053)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1yTLX5BvUENaM6KRdWp8P9uGYz87197",
                            DiscountValue = 353m,
                            ExpiryDate = new DateTime(2024, 8, 8, 23, 59, 16, 801, DateTimeKind.Local).AddTicks(2111)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 149m,
                            OperationDate = new DateTime(2023, 11, 13, 12, 59, 16, 806, DateTimeKind.Local).AddTicks(3704),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 738m,
                            OperationDate = new DateTime(2023, 4, 24, 3, 59, 16, 806, DateTimeKind.Local).AddTicks(3711),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 240m,
                            OperationDate = new DateTime(2023, 12, 2, 0, 59, 16, 806, DateTimeKind.Local).AddTicks(3713),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 368m,
                            OperationDate = new DateTime(2023, 5, 1, 7, 59, 16, 806, DateTimeKind.Local).AddTicks(3715),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 916m,
                            OperationDate = new DateTime(2023, 8, 10, 13, 59, 16, 806, DateTimeKind.Local).AddTicks(3730),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 647m,
                            OperationDate = new DateTime(2024, 2, 4, 19, 59, 16, 806, DateTimeKind.Local).AddTicks(3745),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 905m,
                            OperationDate = new DateTime(2023, 10, 7, 4, 59, 16, 806, DateTimeKind.Local).AddTicks(3747),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 237m,
                            OperationDate = new DateTime(2024, 5, 10, 14, 59, 16, 806, DateTimeKind.Local).AddTicks(3749),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 10, 23, 59, 16, 797, DateTimeKind.Local).AddTicks(2881),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "repellendus",
                            NotificationDate = new DateTime(2024, 5, 4, 18, 59, 16, 811, DateTimeKind.Local).AddTicks(9979),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "Nobis repellendus debitis occaecati.",
                            NotificationDate = new DateTime(2024, 5, 23, 19, 59, 16, 812, DateTimeKind.Local).AddTicks(218),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "Laboriosam voluptatum autem non ut illo.\nNon commodi odit.\nUt eaque exercitationem qui.",
                            NotificationDate = new DateTime(2024, 5, 8, 21, 59, 16, 812, DateTimeKind.Local).AddTicks(352),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "Porro eveniet nisi minus distinctio incidunt nihil illum ut.",
                            NotificationDate = new DateTime(2024, 5, 27, 6, 59, 16, 812, DateTimeKind.Local).AddTicks(488),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "ut",
                            NotificationDate = new DateTime(2024, 5, 15, 11, 59, 16, 812, DateTimeKind.Local).AddTicks(553),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Rem et quia dolore aut excepturi sed.\nNesciunt qui at quam.\nEa ducimus vel repellat porro qui voluptas.",
                            NotificationDate = new DateTime(2024, 6, 6, 1, 59, 16, 812, DateTimeKind.Local).AddTicks(570),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "Quam aut ut vel.",
                            NotificationDate = new DateTime(2024, 5, 21, 2, 59, 16, 812, DateTimeKind.Local).AddTicks(806),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "enim",
                            NotificationDate = new DateTime(2024, 6, 2, 11, 59, 16, 812, DateTimeKind.Local).AddTicks(841),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Suscipit voluptatibus in aut et deserunt et. Officia exercitationem eos earum. Recusandae quia aut delectus. Est aspernatur cum officiis illo enim repellendus vitae.",
                            NotificationDate = new DateTime(2024, 5, 1, 3, 59, 16, 812, DateTimeKind.Local).AddTicks(850),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "Dolore rerum voluptas ut. Sint iure et recusandae voluptatem. In quisquam voluptatem et eligendi vero cupiditate repellendus reprehenderit.",
                            NotificationDate = new DateTime(2024, 6, 7, 12, 59, 16, 812, DateTimeKind.Local).AddTicks(1021),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "saepe",
                            NotificationDate = new DateTime(2024, 5, 15, 4, 59, 16, 812, DateTimeKind.Local).AddTicks(1192),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Ratione distinctio facilis deleniti officia consequatur et similique qui qui. Eaque temporibus accusamus culpa culpa ut quos ea. Aut consequuntur aut dicta rerum accusamus qui ipsum repellendus neque. Placeat corrupti sit nam quae commodi nisi. Molestias ratione ad earum suscipit quo.",
                            NotificationDate = new DateTime(2024, 5, 14, 0, 59, 16, 812, DateTimeKind.Local).AddTicks(1204),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "magni",
                            NotificationDate = new DateTime(2024, 5, 9, 20, 59, 16, 812, DateTimeKind.Local).AddTicks(1488),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Ut incidunt quod minus est. Pariatur nemo neque incidunt molestiae nobis. Dolores labore qui est odit excepturi voluptas qui. Quae aut deleniti nulla ipsum enim quia officia repudiandae. Nemo aspernatur quo vitae provident.",
                            NotificationDate = new DateTime(2024, 5, 13, 22, 59, 16, 812, DateTimeKind.Local).AddTicks(1498),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Aut sequi et repellat.",
                            NotificationDate = new DateTime(2024, 6, 2, 21, 59, 16, 812, DateTimeKind.Local).AddTicks(1879),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Aut a iure nulla corrupti corrupti.\nReprehenderit voluptate ea quae eius delectus natus.\nDolorem explicabo libero soluta non nobis voluptas.\nQuis velit et illo magni rem quidem.\nDelectus adipisci cumque id doloribus dolorem corrupti natus sed.",
                            NotificationDate = new DateTime(2024, 5, 10, 13, 59, 16, 812, DateTimeKind.Local).AddTicks(1915),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Voluptatem iure delectus saepe incidunt enim ut nihil iste amet.\nExpedita eos dolor temporibus dolorum.\nSunt facilis eaque rem nobis aut sint voluptates.",
                            NotificationDate = new DateTime(2024, 5, 18, 6, 59, 16, 812, DateTimeKind.Local).AddTicks(2255),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Asperiores totam officiis quibusdam. Culpa aspernatur inventore facere voluptas blanditiis. Qui est nemo ut commodi odio sint odio doloribus sit. Tempore enim alias cupiditate veniam. Enim et minima voluptatem adipisci inventore ad qui assumenda.",
                            NotificationDate = new DateTime(2024, 5, 25, 16, 59, 16, 812, DateTimeKind.Local).AddTicks(2441),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 9, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3478),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 1, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3484),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 12, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3486),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 17, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3488),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 27, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3490),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 28, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3492),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 2, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3494),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 15, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3495),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 26, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3497),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 25, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3499),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 28, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3501),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 8, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3503),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 13, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3504),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 3, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3506),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 29, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3513),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 4, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3515),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 19, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3517),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 7, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3519),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 6, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3521),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 19, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3523),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 1, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3525),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 27, 23, 59, 16, 812, DateTimeKind.Local).AddTicks(3527),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 262m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 28, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5234),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 806m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 22, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5244),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 151m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 22, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5246),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 543m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 26, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5248),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 192m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 23, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5250),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 897m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 6, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5252),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 102m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 21, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5259),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 106m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 12, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5261),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 883m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 31, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5263),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 684m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 5, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5265),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 802m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 17, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5267),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 382m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 18, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5268),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 114m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 22, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5270),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 161m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 27, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5272),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 889m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 6, 2, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5274),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 309m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 6, 6, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5276),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 438m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 18, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5278),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 511m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 1, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(5280),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "531",
                            CardHolderName = "Heather Friesen",
                            CardNumber = "6388-6748-5587-3924",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(4493)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "137",
                            CardHolderName = "Leif Ebert",
                            CardNumber = "6386-6095-4209-3058",
                            ExpiryDate = new DateTime(2031, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(5210)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "337",
                            CardHolderName = "Frida Jaskolski",
                            CardNumber = "4014777131712",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(5778)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "380",
                            CardHolderName = "Donato McKenzie",
                            CardNumber = "6759-8796-8223-1595-974",
                            ExpiryDate = new DateTime(2028, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(6291)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "759",
                            CardHolderName = "Kaylin Barrows",
                            CardNumber = "3714-926308-50394",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(6839)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "352",
                            CardHolderName = "Brycen Pollich",
                            CardNumber = "3528-4406-0456-7821",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(7287)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "453",
                            CardHolderName = "Holly Schultz",
                            CardNumber = "6371-5156-6445-2419",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(7770)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "084",
                            CardHolderName = "Crawford Rath",
                            CardNumber = "6759-4372-3550-1875-439",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(8259)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "293",
                            CardHolderName = "Domenic Ruecker",
                            CardNumber = "63044850847363094",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(8772)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "023",
                            CardHolderName = "Spencer McLaughlin",
                            CardNumber = "6526-5568-5012-6072",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(9351)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "728",
                            CardHolderName = "Johnson Witting",
                            CardNumber = "6391-2155-4141-3348",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 816, DateTimeKind.Local).AddTicks(9922)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "577",
                            CardHolderName = "Ashlee Lang",
                            CardNumber = "6767-4750-0634-1760-842",
                            ExpiryDate = new DateTime(2029, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(355)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "877",
                            CardHolderName = "Rusty Lesch",
                            CardNumber = "6767-3224-4826-4023-433",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(810)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "991",
                            CardHolderName = "Kavon Pfeffer",
                            CardNumber = "5258-1092-3346-6579",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(1301)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "055",
                            CardHolderName = "Camylle Weimann",
                            CardNumber = "3653-473253-1245",
                            ExpiryDate = new DateTime(2028, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(1704)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "527",
                            CardHolderName = "Larissa Walker",
                            CardNumber = "3607-492718-1605",
                            ExpiryDate = new DateTime(2028, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(2177)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "868",
                            CardHolderName = "Adrian Okuneva",
                            CardNumber = "5543-8469-1239-7725",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(2645)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "146",
                            CardHolderName = "Rudy Gulgowski",
                            CardNumber = "6767-0251-6616-4288-662",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(3058)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "434",
                            CardHolderName = "Lydia Oberbrunner",
                            CardNumber = "3773-136426-65337",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(3545)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "613",
                            CardHolderName = "Monica Considine",
                            CardNumber = "3028-503744-5609",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(3966)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "361",
                            CardHolderName = "Mona Kuhic",
                            CardNumber = "5491-2560-8771-2520",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(4451)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "332",
                            CardHolderName = "Nicklaus Wilkinson",
                            CardNumber = "6011-6212-2282-0340-1403",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 59, 16, 817, DateTimeKind.Local).AddTicks(4904)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "92fc87c3-907d-4818-b0fc-e8b653ad2aa1",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "GURAM.APKHAZAVA908@ENS.TSU.GE",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAECCiaClFOF4tSfBsetMaJUSvdtcbmGnpwgB4Luj7Gq0b+WHE/YuHu/0bAZODfxwkGg==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3e9cb122-fe0a-4f44-8a94-1478b66d8d7e",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1965, 6, 10, 23, 59, 16, 802, DateTimeKind.Local).AddTicks(335),
                            ConcurrencyStamp = "25ee6e29-f918-499e-a9dd-0b71ecb9d188",
                            Email = "esmeralda_adams@kassulkejakubowski.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hodkiewicz",
                            PhoneNumber = "385-608-7208 x58905",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ad6bb5f-b39f-4fc1-86c2-42ce9dcfb1d7",
                            Surname = "Eichmann",
                            TwoFactorEnabled = false,
                            UserName = "rosemarie"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2003, 6, 10, 23, 59, 16, 802, DateTimeKind.Local).AddTicks(6049),
                            ConcurrencyStamp = "9e17d17f-ab10-459a-9441-c15ed6cacae7",
                            Email = "alexander.crona@cristwolf.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Torphy",
                            PhoneNumber = "(410)975-5016 x77688",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a74fdd1e-850e-4e07-bfcd-f816f959a97f",
                            Surname = "Jones",
                            TwoFactorEnabled = false,
                            UserName = "meagan"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1984, 6, 10, 23, 59, 16, 803, DateTimeKind.Local).AddTicks(1617),
                            ConcurrencyStamp = "b5e03833-d48d-4168-83ba-4bb3318fba69",
                            Email = "taya_lind@leuschkejones.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Paucek",
                            PhoneNumber = "903-626-7286",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad1072c-f762-40a8-ac72-187e762f7571",
                            Surname = "Kautzer",
                            TwoFactorEnabled = false,
                            UserName = "cedrick_sanford"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 6, 10, 23, 59, 16, 803, DateTimeKind.Local).AddTicks(6703),
                            ConcurrencyStamp = "6a83c20d-7a89-41b3-9b4c-99179e150942",
                            Email = "emery@wilkinson.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Kshlerin",
                            PhoneNumber = "916-243-6702 x80429",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b9b120a-0747-4e9e-be36-0d44c726eb83",
                            Surname = "Gutkowski",
                            TwoFactorEnabled = false,
                            UserName = "freida_goodwin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1967, 6, 10, 23, 59, 16, 804, DateTimeKind.Local).AddTicks(2635),
                            ConcurrencyStamp = "6ceb64bd-661c-4ec0-858a-f11514aa6928",
                            Email = "hope.predovic@ankunding.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Kuhic",
                            PhoneNumber = "(819)094-6013 x129",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff84bb6d-d33b-471e-8b20-8195762b6a3d",
                            Surname = "Altenwerth",
                            TwoFactorEnabled = false,
                            UserName = "kimberly.kozey"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 6, 10, 23, 59, 16, 804, DateTimeKind.Local).AddTicks(9079),
                            ConcurrencyStamp = "5ac7df95-d138-48da-be45-ae40cda81a2c",
                            Email = "marvin_weimann@moore.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Abbott",
                            PhoneNumber = "1-354-390-4150 x6692",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d8bb1ce-0fdc-4467-a358-4cc8bc645722",
                            Surname = "Torphy",
                            TwoFactorEnabled = false,
                            UserName = "everardo"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1973, 6, 10, 23, 59, 16, 805, DateTimeKind.Local).AddTicks(5635),
                            ConcurrencyStamp = "84332523-d207-486f-96e6-f7e9c403c9d7",
                            Email = "cordelia@grimesreilly.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wolf",
                            PhoneNumber = "1-480-386-6428 x55018",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbf59578-9534-4de2-9b41-6a8934cf795a",
                            Surname = "West",
                            TwoFactorEnabled = false,
                            UserName = "aaron"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 6, 10, 23, 59, 16, 806, DateTimeKind.Local).AddTicks(1317),
                            ConcurrencyStamp = "6debfd68-a5f4-4a1c-9467-5a5b6fe5b101",
                            Email = "jermain.lynch@breitenberg.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Prohaska",
                            PhoneNumber = "370.830.2034",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be123cb7-4bf4-4439-91a4-7aa18d4782f0",
                            Surname = "Marquardt",
                            TwoFactorEnabled = false,
                            UserName = "boris"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 130.26m,
                            ProductCategoryId = 1L,
                            ProductName = "Handmade Cotton Hat"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 639.93m,
                            ProductCategoryId = 2L,
                            ProductName = "Tasty Granite Soap"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 581.70m,
                            ProductCategoryId = 3L,
                            ProductName = "Generic Plastic Table"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 608.21m,
                            ProductCategoryId = 4L,
                            ProductName = "Practical Plastic Shoes"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 714.66m,
                            ProductCategoryId = 5L,
                            ProductName = "Generic Metal Pizza"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 961.90m,
                            ProductCategoryId = 6L,
                            ProductName = "Fantastic Fresh Computer"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 21.71m,
                            ProductCategoryId = 7L,
                            ProductName = "Unbranded Fresh Chips"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 190.03m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Wooden Pants"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 480.12m,
                            ProductCategoryId = 9L,
                            ProductName = "Practical Cotton Car"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 906.44m,
                            ProductCategoryId = 1L,
                            ProductName = "Gorgeous Rubber Tuna"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 264.56m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Plastic Bacon"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 857.16m,
                            ProductCategoryId = 4L,
                            ProductName = "Generic Cotton Bacon"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 685.34m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Steel Shoes"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 816.63m,
                            ProductCategoryId = 6L,
                            ProductName = "Gorgeous Soft Chips"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 641.28m,
                            ProductCategoryId = 11L,
                            ProductName = "Handcrafted Fresh Table"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 265.72m,
                            ProductCategoryId = 12L,
                            ProductName = "Handcrafted Wooden Cheese"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 112.05m,
                            ProductCategoryId = 13L,
                            ProductName = "Unbranded Plastic Chair"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 602.59m,
                            ProductCategoryId = 14L,
                            ProductName = "Generic Granite Sausages"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 220.56m,
                            ProductCategoryId = 15L,
                            ProductName = "Awesome Soft Bike"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 800.95m,
                            ProductCategoryId = 16L,
                            ProductName = "Intelligent Steel Salad"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 174.55m,
                            ProductCategoryId = 17L,
                            ProductName = "Intelligent Soft Pants"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 850.60m,
                            ProductCategoryId = 8L,
                            ProductName = "Small Plastic Soap"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 197.43m,
                            ProductCategoryId = 9L,
                            ProductName = "Handmade Rubber Table"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 917.11m,
                            ProductCategoryId = 14L,
                            ProductName = "Unbranded Wooden Sausages"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 736.39m,
                            ProductCategoryId = 13L,
                            ProductName = "Rustic Frozen Pizza"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 560.29m,
                            ProductCategoryId = 4L,
                            ProductName = "Intelligent Metal Shoes"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 745.17m,
                            ProductCategoryId = 3L,
                            ProductName = "Fantastic Rubber Chips"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 86.08m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Granite Fish"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 181.60m,
                            ProductCategoryId = 1L,
                            ProductName = "Tasty Wooden Ball"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 588.06m,
                            ProductCategoryId = 2L,
                            ProductName = "Awesome Steel Sausages"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 218.89m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Fresh Tuna"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 359.97m,
                            ProductCategoryId = 4L,
                            ProductName = "Intelligent Concrete Pants"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 827.43m,
                            ProductCategoryId = 5L,
                            ProductName = "Handmade Frozen Chicken"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 865.48m,
                            ProductCategoryId = 6L,
                            ProductName = "Generic Concrete Salad"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 450.60m,
                            ProductCategoryId = 7L,
                            ProductName = "Intelligent Wooden Computer"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 914.69m,
                            ProductCategoryId = 8L,
                            ProductName = "Intelligent Cotton Bacon"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 74.96m,
                            ProductCategoryId = 9L,
                            ProductName = "Generic Fresh Cheese"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 222.00m,
                            ProductCategoryId = 1L,
                            ProductName = "Incredible Wooden Keyboard"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 115.41m,
                            ProductCategoryId = 11L,
                            ProductName = "Intelligent Rubber Mouse"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 349.98m,
                            ProductCategoryId = 14L,
                            ProductName = "Tasty Soft Cheese"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 907.69m,
                            ProductCategoryId = 3L,
                            ProductName = "Gorgeous Concrete Pants"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 690.31m,
                            ProductCategoryId = 6L,
                            ProductName = "Small Fresh Shirt"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 100.44m,
                            ProductCategoryId = 15L,
                            ProductName = "Licensed Steel Chips"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 875.07m,
                            ProductCategoryId = 2L,
                            ProductName = "Small Fresh Table"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 785.19m,
                            ProductCategoryId = 18L,
                            ProductName = "Refined Wooden Cheese"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 501.94m,
                            ProductCategoryId = 4L,
                            ProductName = "Sleek Fresh Car"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 962.30m,
                            ProductCategoryId = 15L,
                            ProductName = "Small Soft Pizza"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 302.49m,
                            ProductCategoryId = 19L,
                            ProductName = "Fantastic Rubber Chips"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 961.44m,
                            ProductCategoryId = 20L,
                            ProductName = "Handmade Steel Chicken"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 840.73m,
                            ProductCategoryId = 8L,
                            ProductName = "Refined Concrete Car"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 672.03m,
                            ProductCategoryId = 14L,
                            ProductName = "Licensed Frozen Gloves"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 621.27m,
                            ProductCategoryId = 13L,
                            ProductName = "Licensed Steel Shirt"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 897.83m,
                            ProductCategoryId = 19L,
                            ProductName = "Small Wooden Computer"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 66.35m,
                            ProductCategoryId = 16L,
                            ProductName = "Handmade Rubber Mouse"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 937.33m,
                            ProductCategoryId = 11L,
                            ProductName = "Gorgeous Wooden Chips"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 719.26m,
                            ProductCategoryId = 13L,
                            ProductName = "Ergonomic Granite Table"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Automotive"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 116m,
                            Id = 1L,
                            Quantity = 65,
                            UnitPrice = 82.57m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 648m,
                            Id = 2L,
                            Quantity = 71,
                            UnitPrice = 415.02m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 259m,
                            Id = 3L,
                            Quantity = 97,
                            UnitPrice = 386.84m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 756m,
                            Id = 4L,
                            Quantity = 42,
                            UnitPrice = 963.80m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 324m,
                            Id = 5L,
                            Quantity = 22,
                            UnitPrice = 90.26m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 836m,
                            Id = 6L,
                            Quantity = 62,
                            UnitPrice = 398.61m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 720m,
                            Id = 7L,
                            Quantity = 27,
                            UnitPrice = 996.70m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 520m,
                            Id = 8L,
                            Quantity = 33,
                            UnitPrice = 530.48m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 140m,
                            Id = 9L,
                            Quantity = 43,
                            UnitPrice = 342.51m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 961m,
                            Id = 10L,
                            Quantity = 64,
                            UnitPrice = 945.74m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 685m,
                            Id = 11L,
                            Quantity = 16,
                            UnitPrice = 225.16m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 516m,
                            Id = 12L,
                            Quantity = 62,
                            UnitPrice = 940.66m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 192m,
                            Id = 13L,
                            Quantity = 34,
                            UnitPrice = 364.44m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 562m,
                            Id = 14L,
                            Quantity = 75,
                            UnitPrice = 837.12m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 518m,
                            Id = 15L,
                            Quantity = 38,
                            UnitPrice = 141.09m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 217m,
                            Id = 16L,
                            Quantity = 50,
                            UnitPrice = 124.66m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 877m,
                            Id = 17L,
                            Quantity = 30,
                            UnitPrice = 364.56m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 514m,
                            Id = 18L,
                            Quantity = 32,
                            UnitPrice = 498.35m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 484m,
                            Id = 19L,
                            Quantity = 81,
                            UnitPrice = 219.73m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 809m,
                            Id = 20L,
                            Quantity = 44,
                            UnitPrice = 104.45m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "fugiat",
                            RequestDate = new DateTime(2024, 5, 11, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9458),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Cumque sequi suscipit enim similique consequatur voluptas. Minima mollitia eligendi est. Error sunt doloremque incidunt et fugiat.",
                            RequestDate = new DateTime(2024, 3, 2, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9546),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Sunt qui excepturi minima.",
                            RequestDate = new DateTime(2024, 5, 21, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9745),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "nam",
                            RequestDate = new DateTime(2024, 5, 11, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9774),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "dolorum",
                            RequestDate = new DateTime(2024, 3, 2, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9817),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Quam quos nemo earum maiores id enim qui.",
                            RequestDate = new DateTime(2024, 5, 21, 23, 59, 16, 831, DateTimeKind.Local).AddTicks(9825),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(848),
                            ReviewText = "eum"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(902),
                            ReviewText = "ad"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(912),
                            ReviewText = "Dolor velit magnam hic.\nIn praesentium sint veniam quasi neque commodi doloribus similique.\nAb autem ab quisquam fugit est nam animi."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1136),
                            ReviewText = "Culpa fugit fugit excepturi velit voluptate molestias ut. Aut non quod tempore cupiditate ipsa sit sit veniam adipisci. Et enim deserunt illum sit ullam aut aut odit. Libero nemo ea sapiente non aliquam sint velit vitae rem. Non sint aut quas unde."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 7, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1407),
                            ReviewText = "Quam exercitationem quaerat doloribus. Repellendus et corporis impedit ut nisi et reprehenderit reiciendis dolor. Hic molestiae molestiae minima nihil. Et doloremque magnam unde beatae omnis officia. Quis voluptatem et."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 6, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1571),
                            ReviewText = "Ratione consectetur ut consequuntur aut. Mollitia aut temporibus impedit sint. Non qui corporis ipsam cumque pariatur recusandae ut eius. Ea rerum rem commodi et."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1756),
                            ReviewText = "dolor"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1766),
                            ReviewText = "Labore quidem aliquam repellat esse.\nAtque autem voluptatem culpa magnam expedita quod quos.\nPorro eos dolores fugiat impedit voluptatem natus molestiae inventore.\nSapiente et et corrupti voluptatem labore nobis aliquam."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(1918),
                            ReviewText = "Sit iure nam nulla id sapiente excepturi laborum.\nPerferendis esse ut asperiores aliquam et ad enim."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 23, 59, 16, 835, DateTimeKind.Local).AddTicks(2034),
                            ReviewText = "Quibusdam perspiciatis quo est excepturi omnis saepe at."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "3EYgXcZKoDL3yUxe4A5wRBr8sFtdWGp",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 6, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1364),
                            Status = "Sent from abroad",
                            TrackingNumber = "OBZICUL1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "34uLdNnH8XS3YKr9EFZhVpkfCjzGQbqy",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 5, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1504),
                            Status = "Recieved from abroad",
                            TrackingNumber = "YYREERZ1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "3e5cXBnmLEyj2FHxUoviVub7dJMztwDKgPS",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 26, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1590),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "CLQIERG1"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1HGz4auAL8fYKtgXdpUnvwoMWEeB",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 26, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1643),
                            Status = "delivered",
                            TrackingNumber = "AVVATMH1083"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "3JRgKdx9nUXuSDcmYsBptky7ZrN",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 7, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1701),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "UFRIGNR1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "3895Aw4htjLrQYZGpzdnmMk72NV",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 30, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1742),
                            Status = "recieved",
                            TrackingNumber = "JHSAAWW1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1mNCS4sY2hdiXKPBnftwpa7qW5H",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 15, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(1783),
                            Status = "boxing",
                            TrackingNumber = "IEPUSTI1814"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfLastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("productId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2236),
                            productId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2239),
                            productId = 21L
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2241),
                            productId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 4L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2242),
                            productId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 5L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2243),
                            productId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 6L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 59, 16, 838, DateTimeKind.Local).AddTicks(2244),
                            productId = 6L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "product")
                        .WithMany("WishLists")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
