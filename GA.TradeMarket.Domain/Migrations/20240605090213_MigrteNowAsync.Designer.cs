// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240605090213_MigrteNowAsync")]
    partial class MigrteNowAsync
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2007, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8822),
                            Points = 778
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2005, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8825),
                            Points = 608
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2009, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8826),
                            Points = 857
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2017, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8828),
                            Points = 629
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2003, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8829),
                            Points = 571
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2019, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8831),
                            Points = 102
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2023, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8833),
                            Points = 804
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2022, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8834),
                            Points = 802
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2018, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8836),
                            Points = 211
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2021, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8837),
                            Points = 676
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1999, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8874),
                            Points = 249
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2023, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8876),
                            Points = 113
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2003, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8878),
                            Points = 653
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1998, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8879),
                            Points = 650
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2013, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8881),
                            Points = 132
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(8882),
                            Points = 977
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1ahQcnbyVzLGoTZt4NDPmdeWKYp78072",
                            DiscountValue = 310m,
                            ExpiryDate = new DateTime(2024, 10, 26, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(871)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "3JBNgc7vrt4LwUxV5qbPDMdmCok28448",
                            DiscountValue = 234m,
                            ExpiryDate = new DateTime(2025, 6, 26, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(966)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3imbQhUEdDgRYeZsCxGr3Vy9wpTao52026",
                            DiscountValue = 180m,
                            ExpiryDate = new DateTime(2025, 2, 5, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(998)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1hKNVMiesH1atTrZ9ypzjGJ3BCb54489",
                            DiscountValue = 191m,
                            ExpiryDate = new DateTime(2024, 10, 11, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(1030)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "3FsKRcSUBHyZ9WrutNfdj3xazqi1JVYop37247",
                            DiscountValue = 109m,
                            ExpiryDate = new DateTime(2024, 11, 30, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(1061)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "1WTH7rYRFws8EeJG4fUjVLkihgZn392759",
                            DiscountValue = 307m,
                            ExpiryDate = new DateTime(2024, 7, 13, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(1130)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1Bnh1fUvE4Xw2DHx8uLidayRc388609",
                            DiscountValue = 196m,
                            ExpiryDate = new DateTime(2025, 8, 13, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(1161)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "167wZi5hC8rRUFAPo1YfkvN9XLjm27760",
                            DiscountValue = 163m,
                            ExpiryDate = new DateTime(2025, 5, 2, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(1228)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 984m,
                            OperationDate = new DateTime(2023, 10, 20, 18, 2, 12, 785, DateTimeKind.Local).AddTicks(8692),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 898m,
                            OperationDate = new DateTime(2023, 6, 3, 5, 2, 12, 785, DateTimeKind.Local).AddTicks(8697),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 953m,
                            OperationDate = new DateTime(2023, 7, 18, 21, 2, 12, 785, DateTimeKind.Local).AddTicks(8698),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 259m,
                            OperationDate = new DateTime(2023, 10, 8, 14, 2, 12, 785, DateTimeKind.Local).AddTicks(8700),
                            PersonId = "4"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 5, 13, 2, 12, 781, DateTimeKind.Local).AddTicks(7120),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Message = "Nemo dolores sunt id voluptatum et accusantium ex consequuntur.\nIpsam sed vitae aliquam pariatur.\nTempore voluptas laborum recusandae nesciunt et accusantium enim magni sit.",
                            NotificationDate = new DateTime(2024, 5, 21, 17, 2, 12, 787, DateTimeKind.Local).AddTicks(8374),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Message = "eveniet",
                            NotificationDate = new DateTime(2024, 5, 27, 17, 2, 12, 787, DateTimeKind.Local).AddTicks(8607),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Message = "Labore officia qui fugit voluptatibus.\nDolores in in.\nQuia dicta voluptate maiores.\nQuidem vitae distinctio est minima dolor eum est.\nModi aliquid tenetur rerum aperiam aut id exercitationem explicabo.",
                            NotificationDate = new DateTime(2024, 5, 7, 16, 2, 12, 787, DateTimeKind.Local).AddTicks(8615),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Message = "Cum id ut qui ratione officiis iusto adipisci magnam facere. Sed qui mollitia omnis aperiam quibusdam. Sit beatae totam qui eaque qui sed explicabo amet nesciunt. Et sit expedita omnis enim voluptatem voluptas velit aliquam provident.",
                            NotificationDate = new DateTime(2024, 5, 27, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(8728),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Message = "quasi",
                            NotificationDate = new DateTime(2024, 5, 15, 14, 2, 12, 787, DateTimeKind.Local).AddTicks(8899),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Message = "Est tempora ipsum illum aperiam.\nFugiat earum laudantium.\nRerum id explicabo dolor enim.\nVoluptatem ut voluptatem et.\nIure perspiciatis velit et.\nNon exercitationem eaque.",
                            NotificationDate = new DateTime(2024, 5, 18, 14, 2, 12, 787, DateTimeKind.Local).AddTicks(8905),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Message = "Ducimus fugit sint ut esse. Ex ullam dignissimos vitae esse minus laudantium nesciunt. Numquam ullam numquam. Doloribus impedit omnis ipsam quaerat illum.",
                            NotificationDate = new DateTime(2024, 5, 27, 5, 2, 12, 787, DateTimeKind.Local).AddTicks(8995),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Message = "Inventore et ullam a.\nDolor est vitae qui aut.\nNesciunt cumque velit velit commodi distinctio.\nUt necessitatibus sit quis debitis occaecati quo voluptatem et.\nOmnis officiis est.\nDoloremque nesciunt velit.",
                            NotificationDate = new DateTime(2024, 5, 23, 0, 2, 12, 787, DateTimeKind.Local).AddTicks(9094),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Message = "perspiciatis",
                            NotificationDate = new DateTime(2024, 5, 21, 16, 2, 12, 787, DateTimeKind.Local).AddTicks(9254),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 19, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9490),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 4, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9493),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 30, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9494),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 24, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9496),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 31, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9497),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 25, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9498),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 1, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9500),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 7, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9502),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 16, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9503),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 3, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9505),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 25, 13, 2, 12, 787, DateTimeKind.Local).AddTicks(9507),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 850m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 25, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9921),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 726m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 13, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9927),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 781m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 26, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9929),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 368m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 20, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9931),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 364m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 8, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9932),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 161m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 8, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9935),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 509m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 18, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9936),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 718m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 29, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9938),
                            PaymentMethod = "ATM",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 907m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 24, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9940),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 110m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 26, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9941),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 120m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 27, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9943),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 260m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 1, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9945),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 729m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 17, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9947),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 222m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 2, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9948),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 405m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 23, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9950),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 951m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 22, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9952),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 887m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 13, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9953),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 128m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 19, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9955),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "200",
                            CardHolderName = "Auto Loan Account",
                            CardNumber = "6759-8289-8382-0295",
                            ExpiryDate = new DateTime(2027, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(6661)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "017",
                            CardHolderName = "Savings Account",
                            CardNumber = "6382-1182-8145-2040",
                            ExpiryDate = new DateTime(2026, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(7004)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "188",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "3463-132936-70824",
                            ExpiryDate = new DateTime(2026, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(7284)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "027",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6759-7622-1131-0839",
                            ExpiryDate = new DateTime(2026, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(7601)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "821",
                            CardHolderName = "Investment Account",
                            CardNumber = "4980-2504-3086-7157",
                            ExpiryDate = new DateTime(2029, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(7873)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "609",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6771-8973-9421-3741",
                            ExpiryDate = new DateTime(2031, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(8151)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "609",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "4344343116941",
                            ExpiryDate = new DateTime(2031, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(8425)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "335",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6304-6660-4952-2269",
                            ExpiryDate = new DateTime(2028, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(8734)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "035",
                            CardHolderName = "Money Market Account",
                            CardNumber = "6767-2769-8084-6030",
                            ExpiryDate = new DateTime(2033, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9004)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "833",
                            CardHolderName = "Savings Account",
                            CardNumber = "6011-9750-0585-9381",
                            ExpiryDate = new DateTime(2027, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9315)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "497",
                            CardHolderName = "Money Market Account",
                            CardNumber = "6374-1818-6919-7692",
                            ExpiryDate = new DateTime(2026, 6, 5, 13, 2, 12, 789, DateTimeKind.Local).AddTicks(9698)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2006, 6, 5, 13, 2, 12, 784, DateTimeKind.Local).AddTicks(6357),
                            ConcurrencyStamp = "9941a747-e105-4a16-aea5-8f041c3867b7",
                            Email = "mark.gerhold@marks.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Muller",
                            PhoneNumber = "615.751.2358 x981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab4847a4-4321-4adf-a318-2397518530e9",
                            Surname = "Kihn",
                            TwoFactorEnabled = false,
                            UserName = "raul"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1981, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(37),
                            ConcurrencyStamp = "aa95c0d2-9526-4e01-96d2-2cf5cd57d3f4",
                            Email = "nedra.nicolas@ledner.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Prosacco",
                            PhoneNumber = "711.795.2556",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdaa253e-7990-401f-a203-906d59d642c3",
                            Surname = "Ward",
                            TwoFactorEnabled = false,
                            UserName = "francis.lowe"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1982, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(3212),
                            ConcurrencyStamp = "4e30d035-8b16-439b-b4fd-1e184b91d2fc",
                            Email = "jerrold@haley.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bartell",
                            PhoneNumber = "602.671.9085 x08623",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35479a62-757d-4ea0-b453-09663be0290e",
                            Surname = "Daniel",
                            TwoFactorEnabled = false,
                            UserName = "helga.emard"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2009, 6, 5, 13, 2, 12, 785, DateTimeKind.Local).AddTicks(6864),
                            ConcurrencyStamp = "fb0e8c28-88a3-4e0a-8ac3-3bc9bab5ceec",
                            Email = "mona@quitzonhamill.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Willms",
                            PhoneNumber = "1-111-016-6555 x2384",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff4451a1-c209-4534-9274-a5fbdf94a6d9",
                            Surname = "Weimann",
                            TwoFactorEnabled = false,
                            UserName = "tobin_labadie"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "24f664a5-3a42-4db8-9056-63cc1da7dfc0",
                            Email = "aapkhazava22@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "AAPKHAZAVA22@GMAIL.COM",
                            NormalizedUserName = "GUGAADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZDStoXq0ZxycNE5cAeiJZMK6l4aXACySn2cJDMHEB/l0Zy4JmpHOgCcU/ZYDO+oQ==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6fb652f7-52f1-4ebe-b383-f758073788b6",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "gugaadmin"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 0.8164920944736270m,
                            ProductCategoryId = 1L,
                            ProductName = "Fantastic Frozen Tuna"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 0.4745294625341650m,
                            ProductCategoryId = 2L,
                            ProductName = "Ergonomic Fresh Pizza"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 0.3547785860310060m,
                            ProductCategoryId = 3L,
                            ProductName = "Licensed Cotton Bacon"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 0.323273976620580m,
                            ProductCategoryId = 4L,
                            ProductName = "Ergonomic Frozen Shirt"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 0.4136593781818210m,
                            ProductCategoryId = 5L,
                            ProductName = "Unbranded Steel Keyboard"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 0.9404254053004010m,
                            ProductCategoryId = 6L,
                            ProductName = "Licensed Cotton Car"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 0.7975494582947220m,
                            ProductCategoryId = 7L,
                            ProductName = "Sleek Concrete Shoes"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 0.846650189488530m,
                            ProductCategoryId = 8L,
                            ProductName = "Practical Steel Hat"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 0.5828959696387110m,
                            ProductCategoryId = 9L,
                            ProductName = "Handmade Metal Cheese"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 0.06441295128996470m,
                            ProductCategoryId = 1L,
                            ProductName = "Handcrafted Rubber Pants"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 0.6411156872607920m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Plastic Chips"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 0.2775189352990840m,
                            ProductCategoryId = 4L,
                            ProductName = "Practical Rubber Salad"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 0.747751974480780m,
                            ProductCategoryId = 3L,
                            ProductName = "Generic Cotton Shoes"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 0.2054134566135920m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Soft Table"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 0.7402187862608580m,
                            ProductCategoryId = 1L,
                            ProductName = "Small Fresh Sausages"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 0.1048828220778560m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Frozen Hat"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 0.4109531898647780m,
                            ProductCategoryId = 3L,
                            ProductName = "Generic Soft Computer"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 0.3531259180277670m,
                            ProductCategoryId = 4L,
                            ProductName = "Gorgeous Rubber Table"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 0.003456056357279410m,
                            ProductCategoryId = 5L,
                            ProductName = "Ergonomic Granite Bacon"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 0.6045230943276710m,
                            ProductCategoryId = 6L,
                            ProductName = "Practical Cotton Computer"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 0.8240646160437410m,
                            ProductCategoryId = 7L,
                            ProductName = "Rustic Frozen Computer"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 0.5463314398516970m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Steel Mouse"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 0.207519672871070m,
                            ProductCategoryId = 9L,
                            ProductName = "Awesome Plastic Chair"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 0.9660654709243910m,
                            ProductCategoryId = 1L,
                            ProductName = "Intelligent Plastic Table"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 0.7228763685711060m,
                            ProductCategoryId = 3L,
                            ProductName = "Practical Fresh Shirt"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 0.2283647078157070m,
                            ProductCategoryId = 4L,
                            ProductName = "Intelligent Rubber Keyboard"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 0.2783786042087410m,
                            ProductCategoryId = 3L,
                            ProductName = "Licensed Fresh Pizza"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 0.2321499734706250m,
                            ProductCategoryId = 6L,
                            ProductName = "Awesome Fresh Computer"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Outdoors"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 549m,
                            Id = 1L,
                            Quantity = 84,
                            UnitPrice = 819.16m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 146m,
                            Id = 2L,
                            Quantity = 45,
                            UnitPrice = 352.35m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 351m,
                            Id = 3L,
                            Quantity = 76,
                            UnitPrice = 262.95m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 847m,
                            Id = 4L,
                            Quantity = 86,
                            UnitPrice = 540.43m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 537m,
                            Id = 5L,
                            Quantity = 47,
                            UnitPrice = 687.00m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 954m,
                            Id = 6L,
                            Quantity = 41,
                            UnitPrice = 736.90m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 613m,
                            Id = 7L,
                            Quantity = 71,
                            UnitPrice = 784.52m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 947m,
                            Id = 8L,
                            Quantity = 68,
                            UnitPrice = 416.34m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 198m,
                            Id = 9L,
                            Quantity = 14,
                            UnitPrice = 318.74m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 870m,
                            Id = 10L,
                            Quantity = 95,
                            UnitPrice = 913.32m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Dolor earum eaque odit ut.\nVoluptatem aspernatur esse omnis ut quaerat et.\nOfficia et aut ut accusamus cupiditate dolor omnis.\nDoloribus officia velit sed ea nihil culpa corporis sunt ipsam.",
                            RequestDate = new DateTime(2024, 5, 6, 13, 2, 12, 796, DateTimeKind.Local).AddTicks(4469),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Aut enim nobis ipsum.",
                            RequestDate = new DateTime(2024, 2, 26, 13, 2, 12, 796, DateTimeKind.Local).AddTicks(4757),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Consequatur molestiae autem expedita dolorem ad.\nCorporis non totam blanditiis cum minima nobis ea natus tempore.\nQuae architecto tenetur hic laudantium cum iste aut animi officia.",
                            RequestDate = new DateTime(2024, 5, 16, 13, 2, 12, 796, DateTimeKind.Local).AddTicks(4777),
                            Status = "Declined"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 21, 13, 2, 12, 797, DateTimeKind.Local).AddTicks(9845),
                            ReviewText = "Quidem assumenda praesentium. Quia pariatur id nulla enim et aut. Quam qui facilis."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 12, 13, 2, 12, 797, DateTimeKind.Local).AddTicks(9987),
                            ReviewText = "dolores"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 13, 13, 2, 12, 797, DateTimeKind.Local).AddTicks(9994),
                            ReviewText = "excepturi"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 3, 13, 2, 12, 798, DateTimeKind.Local).AddTicks(1),
                            ReviewText = "blanditiis"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 2, 13, 2, 12, 798, DateTimeKind.Local).AddTicks(40),
                            ReviewText = "possimus"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 1, 13, 2, 12, 798, DateTimeKind.Local).AddTicks(45),
                            ReviewText = "Error laborum aliquam."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "1M7rByLoW3h9qQZmTjxwcF4NKguEp",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 1, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5147),
                            Status = "Sent from abroad",
                            TrackingNumber = "YBUESZC1619"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "1pSANa1KGPYFcmyHjX5MeUL8Rn2CkwqrT9",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 5, 31, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5291),
                            Status = "Recieved from abroad",
                            TrackingNumber = "KQZOFXT1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "3yzQrRaZTCJSeVMgDnjB6Ahs5wu293q",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 21, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5336),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "NIBEMTZ1"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1VXf6LbTANFPo2GeDUdu4w5Wzv7sqc9R8t",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 21, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5376),
                            Status = "delivered",
                            TrackingNumber = "WIVEKWG1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "11fgKCvW3R4DNYptzA6o9uZHQrqEiFhLas",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 2, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5416),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "HGBOIEF1646"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1Dq7ez5UQR9ESfu8BYT2cawHshoG",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 25, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5526),
                            Status = "recieved",
                            TrackingNumber = "BBJOTAV1VOR"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1istGncoWxzruZK7BReQ5aVm91vTMPN",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 10, 13, 2, 12, 799, DateTimeKind.Local).AddTicks(5597),
                            Status = "boxing",
                            TrackingNumber = "XYVETZE1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
