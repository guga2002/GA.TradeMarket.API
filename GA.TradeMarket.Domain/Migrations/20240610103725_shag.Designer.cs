// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240610103725_shag")]
    partial class shag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6963),
                            Points = 238
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6972),
                            Points = 751
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2006, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6975),
                            Points = 519
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6977),
                            Points = 687
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2011, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6980),
                            Points = 142
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6983),
                            Points = 291
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1997, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6986),
                            Points = 778
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2018, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6988),
                            Points = 766
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2019, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6991),
                            Points = 354
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6994),
                            Points = 186
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2016, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6996),
                            Points = 533
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2022, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7000),
                            Points = 697
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2000, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7003),
                            Points = 160
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1996, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7006),
                            Points = 914
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7009),
                            Points = 623
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7011),
                            Points = 980
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7014),
                            Points = 626
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2021, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7017),
                            Points = 560
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(1999, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7019),
                            Points = 705
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7022),
                            Points = 851
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2011, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7025),
                            Points = 843
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7027),
                            Points = 534
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2015, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7043),
                            Points = 117
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7046),
                            Points = 367
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2003, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7049),
                            Points = 299
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2014, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7051),
                            Points = 530
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1997, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7054),
                            Points = 486
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2000, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7056),
                            Points = 791
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2012, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7060),
                            Points = 934
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7062),
                            Points = 605
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7065),
                            Points = 687
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(7068),
                            Points = 927
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "19BTixFEprXULWoqGyjgR8aJk316569",
                            DiscountValue = 230m,
                            ExpiryDate = new DateTime(2025, 7, 26, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(3302)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "3uqVfks96JDTMjbepAE7d2owvSWt5HgNPQ47189",
                            DiscountValue = 228m,
                            ExpiryDate = new DateTime(2024, 7, 30, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(3625)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "1YoHvQTUwnGD28uZNFXpmS6MWfC742636",
                            DiscountValue = 372m,
                            ExpiryDate = new DateTime(2024, 12, 13, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(3727)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "3jMod7KJavf8ZzwEy5SHUbDQRuBqYXhinL288186",
                            DiscountValue = 302m,
                            ExpiryDate = new DateTime(2024, 11, 4, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(3891)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "3FYa9QvVn5BCujWmi1cgPJe4XzU14311",
                            DiscountValue = 146m,
                            ExpiryDate = new DateTime(2025, 5, 20, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(3970)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3SQc95tvaVYHTNkLCgx26hqdmPUiubKGpj60058",
                            DiscountValue = 218m,
                            ExpiryDate = new DateTime(2024, 10, 3, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4030)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1j6287dARSVKroZQtuHbhBJ5qvCgxkTyF87253",
                            DiscountValue = 167m,
                            ExpiryDate = new DateTime(2024, 8, 9, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4109)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "3aJVxMr2ZgzWHoPkBEYnvRX86Q555590",
                            DiscountValue = 333m,
                            ExpiryDate = new DateTime(2025, 6, 8, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4195)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "3dXcUhCYvqgBHuyiMV9xWbmQ3E4FT6PRr83868",
                            DiscountValue = 310m,
                            ExpiryDate = new DateTime(2024, 12, 18, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4252)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "1H1vhWMB6riXEaZqwzdptVNum3Dfek85673",
                            DiscountValue = 164m,
                            ExpiryDate = new DateTime(2024, 8, 19, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4317)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3voYwdxuZt6a9VChDsW5qiT2BySN1550",
                            DiscountValue = 315m,
                            ExpiryDate = new DateTime(2025, 2, 24, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4386)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "3sZ19Eg75Mi6TnVaJQoc3DHqKGWvfj4778",
                            DiscountValue = 336m,
                            ExpiryDate = new DateTime(2024, 12, 7, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4524)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "3HiB9wQWcqAxt8GUJeNauDYX3kP26sy7vV86483",
                            DiscountValue = 370m,
                            ExpiryDate = new DateTime(2025, 5, 22, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4588)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "1PvqKaL4WGDjks9VM87FEimQz6bc2g34529",
                            DiscountValue = 126m,
                            ExpiryDate = new DateTime(2024, 11, 17, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4660)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "1hGfetg2xpzXoyiL4Y56NuA1D9a88445",
                            DiscountValue = 159m,
                            ExpiryDate = new DateTime(2024, 8, 11, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4729)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1sqSD6ijGExKXQyrWRCVPZh2cJ35aHM54156",
                            DiscountValue = 111m,
                            ExpiryDate = new DateTime(2025, 2, 20, 14, 37, 23, 706, DateTimeKind.Local).AddTicks(4809)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 860m,
                            OperationDate = new DateTime(2023, 11, 16, 19, 37, 23, 714, DateTimeKind.Local).AddTicks(6523),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 485m,
                            OperationDate = new DateTime(2024, 2, 24, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(6541),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 650m,
                            OperationDate = new DateTime(2024, 3, 5, 2, 37, 23, 714, DateTimeKind.Local).AddTicks(6544),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 616m,
                            OperationDate = new DateTime(2023, 11, 13, 12, 37, 23, 714, DateTimeKind.Local).AddTicks(6547),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 229m,
                            OperationDate = new DateTime(2024, 3, 29, 16, 37, 23, 714, DateTimeKind.Local).AddTicks(6568),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 291m,
                            OperationDate = new DateTime(2023, 11, 19, 5, 37, 23, 714, DateTimeKind.Local).AddTicks(6589),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 508m,
                            OperationDate = new DateTime(2023, 11, 26, 12, 37, 23, 714, DateTimeKind.Local).AddTicks(6592),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 306m,
                            OperationDate = new DateTime(2023, 11, 7, 10, 37, 23, 714, DateTimeKind.Local).AddTicks(6595),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 10, 14, 37, 23, 701, DateTimeKind.Local).AddTicks(1842),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "Quia nulla ullam nam fugiat.",
                            NotificationDate = new DateTime(2024, 6, 10, 0, 37, 23, 721, DateTimeKind.Local).AddTicks(1546),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "Voluptatum eos excepturi.\nEligendi veniam laborum rerum sit aut consequatur eius nihil.\nAmet et qui nihil iste quia aliquid.\nArchitecto dignissimos aspernatur molestiae quo.",
                            NotificationDate = new DateTime(2024, 5, 15, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(1880),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "sit",
                            NotificationDate = new DateTime(2024, 5, 28, 8, 37, 23, 721, DateTimeKind.Local).AddTicks(2166),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "Aut molestias quia asperiores.",
                            NotificationDate = new DateTime(2024, 5, 10, 22, 37, 23, 721, DateTimeKind.Local).AddTicks(2282),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "architecto",
                            NotificationDate = new DateTime(2024, 5, 13, 20, 37, 23, 721, DateTimeKind.Local).AddTicks(2339),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Quam et quos saepe odit inventore est omnis repellat et.",
                            NotificationDate = new DateTime(2024, 6, 1, 22, 37, 23, 721, DateTimeKind.Local).AddTicks(2479),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "Vel magnam sint. Sit quis inventore exercitationem tenetur. Dolorum porro labore eveniet. Et maiores dignissimos. Tempora sit aperiam assumenda fuga porro nobis eos voluptas. Sed culpa nemo natus atque.",
                            NotificationDate = new DateTime(2024, 6, 9, 4, 37, 23, 721, DateTimeKind.Local).AddTicks(2589),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "sed",
                            NotificationDate = new DateTime(2024, 5, 29, 2, 37, 23, 721, DateTimeKind.Local).AddTicks(3186),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Et fuga maxime neque.\nSoluta id qui atque vero in eum quam dolores.\nAut asperiores corporis fugit laborum qui error qui nihil.\nSint consequatur dolore soluta praesentium omnis aut in dolorum eos.\nRerum labore laudantium pariatur labore voluptate.",
                            NotificationDate = new DateTime(2024, 5, 27, 8, 37, 23, 721, DateTimeKind.Local).AddTicks(3201),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "Ea temporibus non quia omnis asperiores neque quis. Unde qui iure voluptatem voluptatem. Doloribus qui est vero necessitatibus doloribus quis. Sequi mollitia dolorem est vel tempore veritatis. Et sit tenetur sed nostrum.",
                            NotificationDate = new DateTime(2024, 5, 15, 13, 37, 23, 721, DateTimeKind.Local).AddTicks(3616),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "quis",
                            NotificationDate = new DateTime(2024, 5, 9, 9, 37, 23, 721, DateTimeKind.Local).AddTicks(3956),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Deserunt molestias vitae accusantium et facilis aliquid.",
                            NotificationDate = new DateTime(2024, 6, 5, 16, 37, 23, 721, DateTimeKind.Local).AddTicks(3970),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "Est consectetur eum.\nUt et repellendus consequatur consequatur ut cupiditate cumque ut aut.",
                            NotificationDate = new DateTime(2024, 5, 10, 22, 37, 23, 721, DateTimeKind.Local).AddTicks(4041),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Fuga aut ea non consequatur in iusto et ipsum perspiciatis.",
                            NotificationDate = new DateTime(2024, 5, 10, 21, 37, 23, 721, DateTimeKind.Local).AddTicks(4179),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Et dolorum corporis.\nDolores quisquam ea veritatis sunt velit excepturi saepe sint illo.",
                            NotificationDate = new DateTime(2024, 5, 28, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(4258),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Consequuntur sunt quis dolor sit laboriosam quis voluptatem magni.\nMolestias rem cumque dolores dignissimos eius.",
                            NotificationDate = new DateTime(2024, 5, 14, 2, 37, 23, 721, DateTimeKind.Local).AddTicks(4424),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Ut iure sit ea.\nIpsam ut et dolores enim voluptas omnis adipisci est.\nIllum ea quia omnis sed.\nDolores et ipsum praesentium ratione.",
                            NotificationDate = new DateTime(2024, 6, 2, 23, 37, 23, 721, DateTimeKind.Local).AddTicks(4658),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Ab dicta a sapiente aut rerum et at.\nBeatae ad rerum sed est nemo quis est cum perspiciatis.\nAutem nihil quisquam est facilis nulla atque accusantium.",
                            NotificationDate = new DateTime(2024, 5, 5, 2, 37, 23, 721, DateTimeKind.Local).AddTicks(4982),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 3, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6143),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 20, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6151),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 25, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6153),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 14, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6155),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 30, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6158),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 24, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6160),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 17, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6162),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 12, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6168),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 12, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6171),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 4, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6173),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 21, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6175),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 13, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6177),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 16, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6179),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 1, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6182),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 16, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6189),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 18, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6192),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 28, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6194),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 28, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6196),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 31, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6198),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 16, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6201),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 28, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6203),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 27, 14, 37, 23, 721, DateTimeKind.Local).AddTicks(6205),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 833m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 4, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3179),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 178m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 4, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3195),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 523m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 29, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3198),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 346m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 28, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3202),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 103m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 4, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3205),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 724m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 29, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3208),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 257m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 25, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3222),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 441m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 17, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3225),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 764m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 21, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3228),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 113m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 23, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3230),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 173m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 29, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3234),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 504m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 25, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3236),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 712m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 21, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3239),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 965m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 22, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3242),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 648m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 25, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3245),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 869m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 6, 7, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3248),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 847m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 19, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3252),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 127m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 23, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(3255),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "460",
                            CardHolderName = "Triston Mitchell",
                            CardNumber = "58939283607581585130",
                            ExpiryDate = new DateTime(2030, 6, 10, 14, 37, 23, 728, DateTimeKind.Local).AddTicks(6153)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "035",
                            CardHolderName = "Lera Jaskolski",
                            CardNumber = "3472-487266-30640",
                            ExpiryDate = new DateTime(2028, 6, 10, 14, 37, 23, 728, DateTimeKind.Local).AddTicks(7056)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "904",
                            CardHolderName = "Justus Dach",
                            CardNumber = "6759-9905-4695-0339-19",
                            ExpiryDate = new DateTime(2026, 6, 10, 14, 37, 23, 728, DateTimeKind.Local).AddTicks(7927)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "253",
                            CardHolderName = "Aida Kertzmann",
                            CardNumber = "5429-4071-5705-3173",
                            ExpiryDate = new DateTime(2032, 6, 10, 14, 37, 23, 728, DateTimeKind.Local).AddTicks(8855)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "953",
                            CardHolderName = "Rodrigo Nicolas",
                            CardNumber = "670965877021644996",
                            ExpiryDate = new DateTime(2030, 6, 10, 14, 37, 23, 728, DateTimeKind.Local).AddTicks(9762)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "741",
                            CardHolderName = "Gail Moore",
                            CardNumber = "6011-9485-8804-0679",
                            ExpiryDate = new DateTime(2030, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(503)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "049",
                            CardHolderName = "Elisha Hirthe",
                            CardNumber = "3487-490594-23106",
                            ExpiryDate = new DateTime(2029, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(1199)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "218",
                            CardHolderName = "Theron Ward",
                            CardNumber = "6759-5738-5567-4710-958",
                            ExpiryDate = new DateTime(2029, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(1928)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "888",
                            CardHolderName = "Marjolaine Ritchie",
                            CardNumber = "5020180367529823435",
                            ExpiryDate = new DateTime(2026, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(2708)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "141",
                            CardHolderName = "Ola Turner",
                            CardNumber = "6011-2875-4807-4886",
                            ExpiryDate = new DateTime(2027, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(3539)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "023",
                            CardHolderName = "Mariane MacGyver",
                            CardNumber = "6706583015698929303",
                            ExpiryDate = new DateTime(2027, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(4399)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "997",
                            CardHolderName = "Izaiah Hintz",
                            CardNumber = "3528-7449-4020-0520",
                            ExpiryDate = new DateTime(2027, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(5087)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "302",
                            CardHolderName = "Kenton Pfannerstill",
                            CardNumber = "6444-0516-0722-2365",
                            ExpiryDate = new DateTime(2028, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(5863)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "183",
                            CardHolderName = "Beryl Feest",
                            CardNumber = "6771-8946-9137-7675",
                            ExpiryDate = new DateTime(2033, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(6526)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "804",
                            CardHolderName = "Major Reynolds",
                            CardNumber = "6771-8957-6561-5130",
                            ExpiryDate = new DateTime(2030, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(7205)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "619",
                            CardHolderName = "Nicolette Hermann",
                            CardNumber = "3642-054507-1316",
                            ExpiryDate = new DateTime(2026, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(7939)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "165",
                            CardHolderName = "Evie Simonis",
                            CardNumber = "6392-3756-2705-4405",
                            ExpiryDate = new DateTime(2027, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(8620)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "714",
                            CardHolderName = "Charles Weber",
                            CardNumber = "6378-3010-6783-6299",
                            ExpiryDate = new DateTime(2026, 6, 10, 14, 37, 23, 729, DateTimeKind.Local).AddTicks(9340)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "356",
                            CardHolderName = "Elenora McClure",
                            CardNumber = "6759-7878-1701-2839-31",
                            ExpiryDate = new DateTime(2027, 6, 10, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(106)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "246",
                            CardHolderName = "Jazmyne Aufderhar",
                            CardNumber = "3577-0103-1474-9025",
                            ExpiryDate = new DateTime(2029, 6, 10, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(899)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "390",
                            CardHolderName = "Bonnie Armstrong",
                            CardNumber = "3641-007096-7368",
                            ExpiryDate = new DateTime(2026, 6, 10, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(1568)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "603",
                            CardHolderName = "Shane Lubowitz",
                            CardNumber = "3724-226963-00900",
                            ExpiryDate = new DateTime(2033, 6, 10, 14, 37, 23, 730, DateTimeKind.Local).AddTicks(2255)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5a65e80f-e02f-436d-8e5d-1d4b5d6638ef",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "guram.apkhazava908@ens.tsu.ge",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAEHIbWqBPVtlCVWUESKZ3iCG8QXX/qme+jnRbTKaU8lLLSpB3vyt/HQUzY8iE3tY9KQ==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8f541e6f-362a-4515-a4d3-b61cad734428",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1965, 6, 10, 14, 37, 23, 707, DateTimeKind.Local).AddTicks(4683),
                            ConcurrencyStamp = "4e189c68-52a4-4589-8b22-0b0d9456b023",
                            Email = "felton_windler@vonrueden.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Schaden",
                            PhoneNumber = "(114)501-0869",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "446bf247-0df9-4e46-b94d-f82bb405078c",
                            Surname = "Auer",
                            TwoFactorEnabled = false,
                            UserName = "larue"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 6, 10, 14, 37, 23, 708, DateTimeKind.Local).AddTicks(1535),
                            ConcurrencyStamp = "87c6bf55-1902-4991-ab40-ba0731c3ff2b",
                            Email = "flo@morissette.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Spencer",
                            PhoneNumber = "(372)701-6533",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc649ab-1693-42f4-874a-924b14db8c6d",
                            Surname = "Price",
                            TwoFactorEnabled = false,
                            UserName = "sabryna.schroeder"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1973, 6, 10, 14, 37, 23, 708, DateTimeKind.Local).AddTicks(9369),
                            ConcurrencyStamp = "44323c4b-76a3-4ff3-9db2-33fbe95f528b",
                            Email = "shanelle_kunze@dare.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wiza",
                            PhoneNumber = "1-695-699-2762 x38672",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dea64662-5c02-405c-a4ea-e72bb976dd8d",
                            Surname = "Reynolds",
                            TwoFactorEnabled = false,
                            UserName = "arely_hickle"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1969, 6, 10, 14, 37, 23, 709, DateTimeKind.Local).AddTicks(5815),
                            ConcurrencyStamp = "ecb03f86-8baf-4d34-a807-f137ec20af59",
                            Email = "bella_boyle@hintz.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Mante",
                            PhoneNumber = "(008)860-0390",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "456b123e-4e09-47c7-a3b6-31dbb40fb9c3",
                            Surname = "Satterfield",
                            TwoFactorEnabled = false,
                            UserName = "elta"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1983, 6, 10, 14, 37, 23, 711, DateTimeKind.Local).AddTicks(6141),
                            ConcurrencyStamp = "15db4185-c520-4479-b1ab-401331a97428",
                            Email = "gordon@medhurst.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Champlin",
                            PhoneNumber = "551.615.8940 x09707",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1406e37b-0717-4071-aa52-5a080b677c00",
                            Surname = "Marquardt",
                            TwoFactorEnabled = false,
                            UserName = "raegan"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2008, 6, 10, 14, 37, 23, 712, DateTimeKind.Local).AddTicks(3791),
                            ConcurrencyStamp = "d1ce3ed7-92f0-4921-be4a-49efda504cb5",
                            Email = "vernice.gutmann@auer.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Prohaska",
                            PhoneNumber = "1-097-649-0556 x3125",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06a0eedf-daf2-4887-af01-c759ae88bacc",
                            Surname = "Beer",
                            TwoFactorEnabled = false,
                            UserName = "rodolfo"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1983, 6, 10, 14, 37, 23, 713, DateTimeKind.Local).AddTicks(5090),
                            ConcurrencyStamp = "c15f8554-52e2-4e53-9319-f0dc22a4ce53",
                            Email = "mossie_klein@halvorson.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Herzog",
                            PhoneNumber = "(161)114-6086",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "420992b3-3c3b-490e-aa16-34dad5d6be87",
                            Surname = "Schneider",
                            TwoFactorEnabled = false,
                            UserName = "randy"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2009, 6, 10, 14, 37, 23, 714, DateTimeKind.Local).AddTicks(1822),
                            ConcurrencyStamp = "107b5a03-0aa9-4675-93e2-5ec02da84351",
                            Email = "octavia_jacobi@murphycollins.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pouros",
                            PhoneNumber = "462-563-4394 x142",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1eeb15d5-bc00-4592-a562-afa4c3d00272",
                            Surname = "Collins",
                            TwoFactorEnabled = false,
                            UserName = "camryn"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 499.36m,
                            ProductCategoryId = 1L,
                            ProductName = "Licensed Frozen Pizza"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 178.52m,
                            ProductCategoryId = 2L,
                            ProductName = "Licensed Soft Towels"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 759.13m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Steel Gloves"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 310.80m,
                            ProductCategoryId = 4L,
                            ProductName = "Ergonomic Wooden Shoes"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 616.64m,
                            ProductCategoryId = 5L,
                            ProductName = "Refined Soft Hat"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 72.35m,
                            ProductCategoryId = 6L,
                            ProductName = "Rustic Granite Tuna"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 843.63m,
                            ProductCategoryId = 7L,
                            ProductName = "Ergonomic Plastic Tuna"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 116.33m,
                            ProductCategoryId = 8L,
                            ProductName = "Fantastic Plastic Chicken"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 385.22m,
                            ProductCategoryId = 9L,
                            ProductName = "Refined Granite Shirt"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 727.47m,
                            ProductCategoryId = 1L,
                            ProductName = "Rustic Fresh Ball"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 778.67m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Granite Shirt"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 792.49m,
                            ProductCategoryId = 4L,
                            ProductName = "Refined Frozen Salad"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 832.47m,
                            ProductCategoryId = 3L,
                            ProductName = "Small Metal Bike"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 467.40m,
                            ProductCategoryId = 6L,
                            ProductName = "Ergonomic Soft Chair"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 397.28m,
                            ProductCategoryId = 11L,
                            ProductName = "Intelligent Cotton Salad"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 507.48m,
                            ProductCategoryId = 12L,
                            ProductName = "Awesome Frozen Chips"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 482.95m,
                            ProductCategoryId = 13L,
                            ProductName = "Handcrafted Cotton Table"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 374.28m,
                            ProductCategoryId = 14L,
                            ProductName = "Sleek Steel Hat"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 189.55m,
                            ProductCategoryId = 15L,
                            ProductName = "Fantastic Wooden Towels"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 472.34m,
                            ProductCategoryId = 16L,
                            ProductName = "Handcrafted Wooden Cheese"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 136.18m,
                            ProductCategoryId = 17L,
                            ProductName = "Refined Frozen Mouse"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 763.03m,
                            ProductCategoryId = 8L,
                            ProductName = "Practical Fresh Pizza"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 674.08m,
                            ProductCategoryId = 9L,
                            ProductName = "Fantastic Cotton Cheese"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 493.39m,
                            ProductCategoryId = 14L,
                            ProductName = "Handcrafted Rubber Computer"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 683.57m,
                            ProductCategoryId = 13L,
                            ProductName = "Tasty Fresh Towels"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 221.03m,
                            ProductCategoryId = 4L,
                            ProductName = "Handcrafted Fresh Towels"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 873.74m,
                            ProductCategoryId = 3L,
                            ProductName = "Incredible Granite Sausages"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 35.90m,
                            ProductCategoryId = 6L,
                            ProductName = "Practical Metal Cheese"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 558.86m,
                            ProductCategoryId = 1L,
                            ProductName = "Refined Metal Gloves"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 567.22m,
                            ProductCategoryId = 2L,
                            ProductName = "Sleek Granite Salad"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 808.77m,
                            ProductCategoryId = 3L,
                            ProductName = "Refined Frozen Mouse"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 26.20m,
                            ProductCategoryId = 4L,
                            ProductName = "Incredible Plastic Keyboard"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 314.47m,
                            ProductCategoryId = 5L,
                            ProductName = "Gorgeous Metal Car"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 858.03m,
                            ProductCategoryId = 6L,
                            ProductName = "Handmade Metal Hat"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 759.41m,
                            ProductCategoryId = 7L,
                            ProductName = "Tasty Plastic Cheese"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 289.02m,
                            ProductCategoryId = 8L,
                            ProductName = "Handcrafted Cotton Table"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 252.83m,
                            ProductCategoryId = 9L,
                            ProductName = "Licensed Metal Hat"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 259.46m,
                            ProductCategoryId = 1L,
                            ProductName = "Sleek Cotton Chicken"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 727.13m,
                            ProductCategoryId = 11L,
                            ProductName = "Licensed Concrete Sausages"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 736.70m,
                            ProductCategoryId = 14L,
                            ProductName = "Unbranded Rubber Computer"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 782.78m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Soft Car"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 903.75m,
                            ProductCategoryId = 6L,
                            ProductName = "Handcrafted Wooden Mouse"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 680.47m,
                            ProductCategoryId = 15L,
                            ProductName = "Refined Plastic Shirt"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 429.27m,
                            ProductCategoryId = 2L,
                            ProductName = "Ergonomic Cotton Table"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 908.78m,
                            ProductCategoryId = 18L,
                            ProductName = "Sleek Metal Cheese"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 568.25m,
                            ProductCategoryId = 4L,
                            ProductName = "Unbranded Metal Soap"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 278.71m,
                            ProductCategoryId = 15L,
                            ProductName = "Sleek Metal Car"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 510.16m,
                            ProductCategoryId = 19L,
                            ProductName = "Gorgeous Soft Fish"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 483.41m,
                            ProductCategoryId = 20L,
                            ProductName = "Ergonomic Metal Chair"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 896.56m,
                            ProductCategoryId = 8L,
                            ProductName = "Practical Fresh Table"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 158.52m,
                            ProductCategoryId = 14L,
                            ProductName = "Practical Frozen Pizza"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 168.24m,
                            ProductCategoryId = 13L,
                            ProductName = "Incredible Metal Tuna"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 269.31m,
                            ProductCategoryId = 19L,
                            ProductName = "Fantastic Cotton Bacon"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 174.90m,
                            ProductCategoryId = 16L,
                            ProductName = "Practical Wooden Tuna"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 964.83m,
                            ProductCategoryId = 11L,
                            ProductName = "Gorgeous Metal Soap"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 521.33m,
                            ProductCategoryId = 13L,
                            ProductName = "Small Fresh Mouse"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Industrial"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 941m,
                            Id = 1L,
                            Quantity = 25,
                            UnitPrice = 329.83m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 294m,
                            Id = 2L,
                            Quantity = 17,
                            UnitPrice = 573.19m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 613m,
                            Id = 3L,
                            Quantity = 97,
                            UnitPrice = 439.23m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 900m,
                            Id = 4L,
                            Quantity = 43,
                            UnitPrice = 530.09m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 203m,
                            Id = 5L,
                            Quantity = 63,
                            UnitPrice = 557.62m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 564m,
                            Id = 6L,
                            Quantity = 88,
                            UnitPrice = 174.68m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 43m,
                            Id = 7L,
                            Quantity = 58,
                            UnitPrice = 333.39m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 468m,
                            Id = 8L,
                            Quantity = 25,
                            UnitPrice = 984.98m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 102m,
                            Id = 9L,
                            Quantity = 37,
                            UnitPrice = 359.44m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 401m,
                            Id = 10L,
                            Quantity = 15,
                            UnitPrice = 215.61m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 306m,
                            Id = 11L,
                            Quantity = 46,
                            UnitPrice = 467.00m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 295m,
                            Id = 12L,
                            Quantity = 21,
                            UnitPrice = 755.01m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 771m,
                            Id = 13L,
                            Quantity = 92,
                            UnitPrice = 734.03m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 606m,
                            Id = 14L,
                            Quantity = 12,
                            UnitPrice = 811.77m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 478m,
                            Id = 15L,
                            Quantity = 70,
                            UnitPrice = 878.86m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 127m,
                            Id = 16L,
                            Quantity = 24,
                            UnitPrice = 95.68m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 962m,
                            Id = 17L,
                            Quantity = 20,
                            UnitPrice = 119.48m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 768m,
                            Id = 18L,
                            Quantity = 64,
                            UnitPrice = 381.17m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 866m,
                            Id = 19L,
                            Quantity = 87,
                            UnitPrice = 787.27m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 863m,
                            Id = 20L,
                            Quantity = 86,
                            UnitPrice = 185.41m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "In laudantium sed at tempora sed rerum et temporibus cumque.",
                            RequestDate = new DateTime(2024, 5, 11, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(5310),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Esse harum maxime veritatis quia.",
                            RequestDate = new DateTime(2024, 3, 2, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(5626),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Consequatur est ad rem tempore.\nQuis voluptate quidem incidunt eos.\nAnimi dolorem est enim quia qui tenetur voluptatum aliquid magni.\nDolore eum eaque.\nEos ratione consequatur quibusdam qui eum inventore.",
                            RequestDate = new DateTime(2024, 5, 21, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(5746),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Unde incidunt sapiente neque accusamus culpa. Voluptatum dolorem adipisci saepe nemo et corrupti. Atque natus non inventore. Omnis quasi nostrum doloribus sed iste sit dolorem. Consequatur quasi eos voluptas iste. Corporis laborum non hic sit est tempore odio exercitationem.",
                            RequestDate = new DateTime(2024, 5, 11, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(6100),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Sit eos harum accusamus quas dolores doloribus ut.",
                            RequestDate = new DateTime(2024, 3, 2, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(6443),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Non officia rem ipsa et labore. Harum eius rerum at distinctio tenetur voluptatem culpa magni aspernatur. Reprehenderit ea qui illum aut velit. Cum ut aliquid. Assumenda eveniet ipsam sed rerum quis qui voluptas aut. Rem quasi quaerat aut enim hic aut ea earum.",
                            RequestDate = new DateTime(2024, 5, 21, 14, 37, 23, 755, DateTimeKind.Local).AddTicks(6562),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(6086),
                            ReviewText = "omnis"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(6211),
                            ReviewText = "In nobis repellat consequatur est voluptates aspernatur corrupti quam."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(6434),
                            ReviewText = "Ea eum in et animi omnis ut.\nVoluptatem nemo sapiente necessitatibus qui.\nQuae qui ut quia quia ut rerum impedit iste.\nPossimus voluptatem beatae officiis quis quo distinctio."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(6761),
                            ReviewText = "Laudantium dolor ab sequi explicabo incidunt eum."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 7, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(6821),
                            ReviewText = "Quia provident ipsum consequatur consequatur nisi neque exercitationem consequatur quae.\nRepudiandae eveniet voluptas quaerat doloribus.\nOmnis inventore culpa et.\nUt velit veniam cum aut molestiae."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 6, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(7072),
                            ReviewText = "Fugiat nulla deleniti sit.\nCulpa et qui non omnis voluptas distinctio voluptates aut consequatur.\nFugit voluptates corporis id totam at."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(7263),
                            ReviewText = "velit"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(7277),
                            ReviewText = "Modi nam ut nisi enim mollitia.\nUnde sed eum id.\nExpedita sed omnis accusamus incidunt at.\nDelectus aut enim eius cumque quae.\nAccusantium beatae corporis delectus.\nNesciunt accusamus accusantium voluptatibus recusandae aliquam dolorum sed."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(7637),
                            ReviewText = "Veritatis et rerum officiis numquam neque qui dignissimos voluptatum. Tempora praesentium aut molestiae. Voluptates ut qui velit dicta maxime vel et ducimus. Necessitatibus delectus sit ut possimus asperiores. Iure ut non aut ea saepe sed aliquam."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 14, 37, 23, 761, DateTimeKind.Local).AddTicks(7989),
                            ReviewText = "Error corporis et culpa ut."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "1mVtr3jPyuK8nhG1eiW9cD72ZkpQ",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 6, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8360),
                            Status = "Sent from abroad",
                            TrackingNumber = "IHWAMSI1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "1Yjydn87CDTkUp9K5LRvQuVcH4a1Z",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 5, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8591),
                            Status = "Recieved from abroad",
                            TrackingNumber = "WYSEMPX1168"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "39sDBTC5zaXEopAj6uJUbdinqV7",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 26, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8672),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "DKBEMUL1"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1zcgfsu8xFjEtnPvkwmDiGWh6qoMZH",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 26, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8800),
                            Status = "delivered",
                            TrackingNumber = "VGOASJW1315"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "1au3KD9pP7qZMUBrNwey1s6jG4Tx",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 7, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8899),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "MFHAAFH1487"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1Wn7scy6TAuPbotLg1jqpJSF8QD9Ev2iwB",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 30, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(8970),
                            Status = "recieved",
                            TrackingNumber = "HQSOTTN1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "3xXZsKr8QJ6NCLtn3ARHPbTh9WSvc",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 15, 14, 37, 23, 766, DateTimeKind.Local).AddTicks(9045),
                            Status = "boxing",
                            TrackingNumber = "PXZABME1254"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
