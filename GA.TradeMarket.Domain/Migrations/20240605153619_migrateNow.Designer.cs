// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240605153619_migrateNow")]
    partial class migrateNow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2006, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5597),
                            Points = 958
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1999, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5600),
                            Points = 778
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2007, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5602),
                            Points = 356
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2016, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5604),
                            Points = 683
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1998, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5606),
                            Points = 876
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2015, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5607),
                            Points = 201
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2003, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5609),
                            Points = 983
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2013, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5610),
                            Points = 760
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2020, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5612),
                            Points = 661
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5614),
                            Points = 802
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1996, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5616),
                            Points = 179
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1995, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5617),
                            Points = 766
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2010, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5619),
                            Points = 950
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2005, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5621),
                            Points = 516
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2016, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5622),
                            Points = 908
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5624),
                            Points = 372
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1999, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5626),
                            Points = 104
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2013, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5627),
                            Points = 972
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(1997, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5629),
                            Points = 886
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(1999, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5630),
                            Points = 813
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2022, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5632),
                            Points = 370
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2004, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5634),
                            Points = 536
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2019, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5636),
                            Points = 387
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2004, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5638),
                            Points = 698
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2018, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5640),
                            Points = 411
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2013, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5642),
                            Points = 690
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2009, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5644),
                            Points = 591
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2011, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5645),
                            Points = 166
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2013, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5647),
                            Points = 261
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2001, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5648),
                            Points = 437
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2015, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5650),
                            Points = 766
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2014, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(5652),
                            Points = 557
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "3J2A5vK3awGmT8R9XZoPfkBVM7QH96788",
                            DiscountValue = 252m,
                            ExpiryDate = new DateTime(2025, 5, 6, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(6888)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "1seUNCBgQ1XYTDx48omy35hSbZ9q87952",
                            DiscountValue = 267m,
                            ExpiryDate = new DateTime(2025, 9, 19, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(6996)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3Zu4KW9AFmxhgedpbTLrSVktcfJEG18438",
                            DiscountValue = 102m,
                            ExpiryDate = new DateTime(2024, 6, 16, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7033)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "38vjEVoiw5KA4uPCb2kD1rWczQ6Z3qm9T25553",
                            DiscountValue = 233m,
                            ExpiryDate = new DateTime(2025, 4, 5, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7066)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1YfjGD4AECZo9zyXnuwriF2Lk7p3q91480",
                            DiscountValue = 152m,
                            ExpiryDate = new DateTime(2024, 11, 6, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7104)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "1Gcndskz5KrZ1BHEpPfChxuVJ97Si4e60016",
                            DiscountValue = 245m,
                            ExpiryDate = new DateTime(2024, 8, 29, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7138)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1rw5PT6aY4Uoyhgs1b8k27u9ptJqn64295",
                            DiscountValue = 167m,
                            ExpiryDate = new DateTime(2024, 6, 18, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7174)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "123g1fPtp7XDEH9UNwrR5YiuCn4yTmQbjSv42428",
                            DiscountValue = 126m,
                            ExpiryDate = new DateTime(2024, 7, 12, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7233)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "1kSBZD6zp3fdGcJaWYAs5gTUyxt38115",
                            DiscountValue = 369m,
                            ExpiryDate = new DateTime(2024, 8, 5, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7272)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "1BaDStqFLe9N5zEg6mKoUP3cdVrA8TnJ2415",
                            DiscountValue = 393m,
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7304)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3XKzGJUYVhkdgC9cZ6S1viHqmR5tNL2Tu79503",
                            DiscountValue = 112m,
                            ExpiryDate = new DateTime(2024, 8, 12, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7341)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "1nbWgmxJQyVcZDU2ELTseaGdPBp4rko96393",
                            DiscountValue = 110m,
                            ExpiryDate = new DateTime(2024, 8, 23, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7378)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "38gRY2Svfs7uWHEiGwZUqdzFQJm16917",
                            DiscountValue = 360m,
                            ExpiryDate = new DateTime(2025, 1, 26, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7414)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "3xrJ3fpzDsUthb5QqVWuXSNjaYL20624",
                            DiscountValue = 344m,
                            ExpiryDate = new DateTime(2025, 7, 28, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7446)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "3mFdMp9ohibQeJR7AVscktCUu175353",
                            DiscountValue = 341m,
                            ExpiryDate = new DateTime(2025, 2, 4, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7477)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1MH1TxKBaZQP3gcfkqGJsVpFR6bv9w2XD8j1289",
                            DiscountValue = 166m,
                            ExpiryDate = new DateTime(2024, 8, 8, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(7562)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 475m,
                            OperationDate = new DateTime(2023, 10, 28, 11, 36, 18, 407, DateTimeKind.Local).AddTicks(5450),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 819m,
                            OperationDate = new DateTime(2024, 3, 23, 14, 36, 18, 407, DateTimeKind.Local).AddTicks(5458),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 350m,
                            OperationDate = new DateTime(2023, 10, 10, 7, 36, 18, 407, DateTimeKind.Local).AddTicks(5460),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 148m,
                            OperationDate = new DateTime(2023, 8, 24, 2, 36, 18, 407, DateTimeKind.Local).AddTicks(5461),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 811m,
                            OperationDate = new DateTime(2023, 8, 2, 1, 36, 18, 407, DateTimeKind.Local).AddTicks(5463),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 431m,
                            OperationDate = new DateTime(2023, 9, 27, 23, 36, 18, 407, DateTimeKind.Local).AddTicks(5465),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 875m,
                            OperationDate = new DateTime(2023, 6, 15, 0, 36, 18, 407, DateTimeKind.Local).AddTicks(5466),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 852m,
                            OperationDate = new DateTime(2023, 10, 31, 20, 36, 18, 407, DateTimeKind.Local).AddTicks(5468),
                            PersonId = "8"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 5, 19, 36, 18, 401, DateTimeKind.Local).AddTicks(9139),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Message = "Est illo enim nobis deleniti magnam ut eum corrupti deleniti.",
                            NotificationDate = new DateTime(2024, 6, 2, 9, 36, 18, 409, DateTimeKind.Local).AddTicks(5486),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Message = "ut",
                            NotificationDate = new DateTime(2024, 5, 18, 7, 36, 18, 409, DateTimeKind.Local).AddTicks(5622),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Message = "numquam",
                            NotificationDate = new DateTime(2024, 6, 1, 7, 36, 18, 409, DateTimeKind.Local).AddTicks(5629),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Message = "animi",
                            NotificationDate = new DateTime(2024, 5, 3, 23, 36, 18, 409, DateTimeKind.Local).AddTicks(5636),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Message = "Minima laboriosam officiis est iure. Eius quo sequi est qui esse deleniti possimus enim. Minus voluptatem ab fugit id. Cum ullam temporibus et earum.",
                            NotificationDate = new DateTime(2024, 5, 21, 11, 36, 18, 409, DateTimeKind.Local).AddTicks(5642),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Message = "Ut sit praesentium ut dolores consectetur veniam numquam quia quia. Recusandae ducimus ad perspiciatis facere delectus doloribus aut voluptatibus ex. Recusandae eos possimus quia. Ut similique maxime aliquam quae laboriosam nobis itaque. Libero aut necessitatibus et excepturi quas iusto dolore atque expedita.",
                            NotificationDate = new DateTime(2024, 5, 6, 5, 36, 18, 409, DateTimeKind.Local).AddTicks(5817),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Message = "Ipsum sapiente iure facere architecto aspernatur voluptas nulla harum.",
                            NotificationDate = new DateTime(2024, 5, 23, 20, 36, 18, 409, DateTimeKind.Local).AddTicks(6027),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Message = "Enim pariatur qui animi.\nVelit commodi fugit rerum reiciendis ex.\nVitae ipsam non corrupti illum repudiandae doloremque.\nRerum iste repellat aspernatur ea.",
                            NotificationDate = new DateTime(2024, 6, 1, 1, 36, 18, 409, DateTimeKind.Local).AddTicks(6066),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Message = "Officiis dignissimos impedit cumque eius omnis repellendus cumque dolorem perspiciatis. Culpa neque doloribus. Nam aliquam soluta explicabo sed ut dignissimos animi tenetur quia. Omnis veritatis dolores quod. Incidunt nulla laudantium eum autem quod neque. Nulla placeat enim est quos corporis impedit saepe.",
                            NotificationDate = new DateTime(2024, 5, 7, 14, 36, 18, 409, DateTimeKind.Local).AddTicks(6155),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            Message = "perspiciatis",
                            NotificationDate = new DateTime(2024, 5, 18, 16, 36, 18, 409, DateTimeKind.Local).AddTicks(6404),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            Message = "Tempora id esse sunt molestiae necessitatibus delectus aut est.\nAut enim quis.\nDolorem incidunt minima quibusdam non dolorum totam.\nSequi eum et velit maxime mollitia nisi excepturi impedit.\nEt officiis et porro.\nSint et enim porro ut sed.",
                            NotificationDate = new DateTime(2024, 5, 2, 3, 36, 18, 409, DateTimeKind.Local).AddTicks(6410),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            Message = "Beatae et ipsa fuga est adipisci asperiores ipsa ullam. Voluptatem sit blanditiis sunt ea in doloremque consequatur aliquid. Consectetur doloribus illo nesciunt velit sed ipsam.",
                            NotificationDate = new DateTime(2024, 5, 14, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(6580),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            Message = "In atque est quae veniam aut unde nobis. Nemo quaerat qui harum aliquam error ipsum dolores. Officiis neque dolor incidunt enim amet unde perferendis eos. Animi ipsa est ipsam. Numquam possimus accusantium quis et cum. Et voluptas maiores earum assumenda et saepe corrupti.",
                            NotificationDate = new DateTime(2024, 4, 26, 13, 36, 18, 409, DateTimeKind.Local).AddTicks(6666),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            Message = "est",
                            NotificationDate = new DateTime(2024, 5, 14, 15, 36, 18, 409, DateTimeKind.Local).AddTicks(6869),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Message = "Velit delectus cum laboriosam accusamus magnam porro quis minus iure.",
                            NotificationDate = new DateTime(2024, 6, 3, 8, 36, 18, 409, DateTimeKind.Local).AddTicks(6876),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Message = "qui",
                            NotificationDate = new DateTime(2024, 5, 5, 14, 36, 18, 409, DateTimeKind.Local).AddTicks(6907),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            Message = "Numquam eos voluptatem voluptas dolorem.\nQuam fuga non velit sint blanditiis nulla blanditiis dolores dolor.\nOdio officia sapiente beatae cumque.",
                            NotificationDate = new DateTime(2024, 5, 4, 0, 36, 18, 409, DateTimeKind.Local).AddTicks(6913),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            Message = "Odit dolore ut perspiciatis atque. Et sit sed atque et harum molestiae expedita aperiam. Quo consequatur modi animi architecto exercitationem ut vel laborum ipsum. Rerum ratione ipsa commodi est non ut labore voluptatem et. Eos quisquam eveniet expedita quia pariatur repudiandae est qui omnis. Vel omnis minus natus nisi vero doloribus.",
                            NotificationDate = new DateTime(2024, 6, 1, 20, 36, 18, 409, DateTimeKind.Local).AddTicks(7017),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 26, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7503),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 25, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7507),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 16, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7509),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 24, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7511),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 29, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7512),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 27, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7514),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 13, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7515),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 25, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7516),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 30, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7518),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 19, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7519),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 4, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7520),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 31, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7522),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 24, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7523),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 20, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7525),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 30, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7526),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 1, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7527),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 14, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7529),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 17, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7530),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 8, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7531),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 14, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7533),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 7, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7534),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 22, 19, 36, 18, 409, DateTimeKind.Local).AddTicks(7535),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 228m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 31, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2032),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 207m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 12, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2038),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 334m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 10, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2040),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 137m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 13, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2042),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 423m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 10, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2044),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 117m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 13, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2046),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 667m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 21, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2048),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 156m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 26, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2050),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 173m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 27, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2052),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 150m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 9, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2054),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 73m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 14, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2056),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 309m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 21, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2057),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 386m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 11, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2059),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 552m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 26, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2061),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 266m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 24, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2063),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 931m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 24, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2065),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 141m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 7, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2066),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 479m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 2, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(2068),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "665",
                            CardHolderName = "Brett Bode",
                            CardNumber = "3631-769905-4587",
                            ExpiryDate = new DateTime(2030, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(4867)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "670",
                            CardHolderName = "Belle Zemlak",
                            CardNumber = "5020-0437-3547-0812",
                            ExpiryDate = new DateTime(2029, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(5393)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "140",
                            CardHolderName = "Fritz Harris",
                            CardNumber = "4576-8874-0702-0458",
                            ExpiryDate = new DateTime(2032, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(5720)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "601",
                            CardHolderName = "Fae Kris",
                            CardNumber = "4227-8399-0057-8303",
                            ExpiryDate = new DateTime(2026, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(6074)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "809",
                            CardHolderName = "Jacey Spencer",
                            CardNumber = "3499-828201-15227",
                            ExpiryDate = new DateTime(2030, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(6402)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "000",
                            CardHolderName = "Maggie Legros",
                            CardNumber = "6767-9477-3680-7203-651",
                            ExpiryDate = new DateTime(2027, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(6735)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "944",
                            CardHolderName = "Emmett Cronin",
                            CardNumber = "5461-8407-6035-8689",
                            ExpiryDate = new DateTime(2030, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(7080)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "334",
                            CardHolderName = "Flossie Fadel",
                            CardNumber = "4965042728600",
                            ExpiryDate = new DateTime(2032, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(7341)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "064",
                            CardHolderName = "Evert Towne",
                            CardNumber = "4141381175676",
                            ExpiryDate = new DateTime(2026, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(7727)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "870",
                            CardHolderName = "Justyn Gibson",
                            CardNumber = "677187964880118259",
                            ExpiryDate = new DateTime(2028, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(8076)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "974",
                            CardHolderName = "Sally Fadel",
                            CardNumber = "4014314333540",
                            ExpiryDate = new DateTime(2026, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(8350)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "188",
                            CardHolderName = "Dejah O'Connell",
                            CardNumber = "6304003837769789",
                            ExpiryDate = new DateTime(2031, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(8656)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "617",
                            CardHolderName = "Vicky Douglas",
                            CardNumber = "5412-2131-5042-5742",
                            ExpiryDate = new DateTime(2028, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(8920)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "418",
                            CardHolderName = "Bobbie Sanford",
                            CardNumber = "5018-4518-4788-4479",
                            ExpiryDate = new DateTime(2027, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(9316)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "061",
                            CardHolderName = "Ulises Bosco",
                            CardNumber = "6011-0909-7670-7021",
                            ExpiryDate = new DateTime(2030, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(9639)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "328",
                            CardHolderName = "Patsy Kassulke",
                            CardNumber = "6507-6291-7152-1186-3041",
                            ExpiryDate = new DateTime(2032, 6, 5, 19, 36, 18, 411, DateTimeKind.Local).AddTicks(9962)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "621",
                            CardHolderName = "Leon Reichert",
                            CardNumber = "6759-1520-6994-4344-92",
                            ExpiryDate = new DateTime(2029, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(240)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "655",
                            CardHolderName = "Aida Smith",
                            CardNumber = "3611-690160-8069",
                            ExpiryDate = new DateTime(2028, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(554)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "134",
                            CardHolderName = "Emmalee Parisian",
                            CardNumber = "3528-0381-3666-9741",
                            ExpiryDate = new DateTime(2032, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(851)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "434",
                            CardHolderName = "Felicia Anderson",
                            CardNumber = "6706751844482184",
                            ExpiryDate = new DateTime(2027, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(1159)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "030",
                            CardHolderName = "Claudie Lemke",
                            CardNumber = "3749-794247-02028",
                            ExpiryDate = new DateTime(2030, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(1469)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "832",
                            CardHolderName = "Josue Monahan",
                            CardNumber = "6304294382632056",
                            ExpiryDate = new DateTime(2029, 6, 5, 19, 36, 18, 412, DateTimeKind.Local).AddTicks(1779)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1991, 6, 5, 19, 36, 18, 404, DateTimeKind.Local).AddTicks(9788),
                            ConcurrencyStamp = "cacf77a9-b257-435b-8f91-9cfc4af15f61",
                            Email = "madonna@bradtke.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sipes",
                            PhoneNumber = "1-587-236-8262",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1374e85e-67b0-46a3-97be-da8e83e36fc0",
                            Surname = "Mitchell",
                            TwoFactorEnabled = false,
                            UserName = "lavada.maggio"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 6, 5, 19, 36, 18, 405, DateTimeKind.Local).AddTicks(3766),
                            ConcurrencyStamp = "a1c5816f-145b-4ce0-b619-99508a902ca8",
                            Email = "douglas_padberg@dooley.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jaskolski",
                            PhoneNumber = "(076)831-5995 x863",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b96cfa6d-c354-40e7-9c2b-a7311b7cc94c",
                            Surname = "Wisoky",
                            TwoFactorEnabled = false,
                            UserName = "julius.herzog"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 6, 5, 19, 36, 18, 405, DateTimeKind.Local).AddTicks(7343),
                            ConcurrencyStamp = "c3cbf39c-4840-46d5-847b-fbc364b3066b",
                            Email = "vern@walter.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hayes",
                            PhoneNumber = "(665)270-0299 x747",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24f60a45-2327-4d78-a8bc-262215316e55",
                            Surname = "Boehm",
                            TwoFactorEnabled = false,
                            UserName = "kitty_mayer"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2007, 6, 5, 19, 36, 18, 406, DateTimeKind.Local).AddTicks(883),
                            ConcurrencyStamp = "b4911625-62a9-4bfd-8e54-47f531bdf88c",
                            Email = "fletcher@grady.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Johnston",
                            PhoneNumber = "361.030.9912",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbf23632-952f-4c9b-9b91-131cb9b090b6",
                            Surname = "Schroeder",
                            TwoFactorEnabled = false,
                            UserName = "alek"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2010, 6, 5, 19, 36, 18, 406, DateTimeKind.Local).AddTicks(4030),
                            ConcurrencyStamp = "40db103e-d747-4e9a-a23c-1ae05c79119e",
                            Email = "kaycee.schaefer@altenwerth.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Spinka",
                            PhoneNumber = "1-110-974-6757 x261",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be8fc6d6-debe-4955-99ce-e0e9d9176d77",
                            Surname = "Swaniawski",
                            TwoFactorEnabled = false,
                            UserName = "reymundo"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1969, 6, 5, 19, 36, 18, 406, DateTimeKind.Local).AddTicks(7123),
                            ConcurrencyStamp = "0dc04606-8a43-4de1-9653-0716fc613fa2",
                            Email = "santos_maggio@mante.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Keebler",
                            PhoneNumber = "177-687-1861",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66af753c-d4ae-41a5-ac43-09a103c258dc",
                            Surname = "Bosco",
                            TwoFactorEnabled = false,
                            UserName = "nikolas.daniel"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1973, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(441),
                            ConcurrencyStamp = "6a143355-630c-449c-bd8c-ff64815b1588",
                            Email = "courtney@cummingshagenes.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Parisian",
                            PhoneNumber = "(478)329-4762",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da2424b4-d1a1-40e4-8fa8-f112c79505fc",
                            Surname = "McClure",
                            TwoFactorEnabled = false,
                            UserName = "audrey"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1989, 6, 5, 19, 36, 18, 407, DateTimeKind.Local).AddTicks(3814),
                            ConcurrencyStamp = "9606d08a-b5c6-4c19-85ca-37c9dbe20de5",
                            Email = "zoey.schamberger@flatleyskiles.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "DuBuque",
                            PhoneNumber = "126.590.7920 x336",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35b0a8a7-bf87-49d8-bff6-7e555e7452d5",
                            Surname = "Price",
                            TwoFactorEnabled = false,
                            UserName = "hulda"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3ae4cb48-efb1-44ba-8dc3-19f8cad7b417",
                            Email = "aapkhazava22@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "AAPKHAZAVA22@GMAIL.COM",
                            NormalizedUserName = "GUGAADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+ZrWAZ2Uf2gnK79tx8bWrI4W2vi7yRKCVxqrHQipG1ZaQVvb9jtGbNN38EaKF49Q==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b62596ec-53cd-4364-8b58-0c4a47a4fee3",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "gugaadmin"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 0.1199774952588060m,
                            ProductCategoryId = 1L,
                            ProductName = "Awesome Metal Fish"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 0.2191978140388510m,
                            ProductCategoryId = 2L,
                            ProductName = "Handmade Fresh Towels"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 0.2175163043149110m,
                            ProductCategoryId = 3L,
                            ProductName = "Sleek Steel Chair"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 0.4900740917535490m,
                            ProductCategoryId = 4L,
                            ProductName = "Licensed Soft Computer"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 0.02029484941155220m,
                            ProductCategoryId = 5L,
                            ProductName = "Awesome Rubber Sausages"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 0.7824387228240590m,
                            ProductCategoryId = 6L,
                            ProductName = "Sleek Fresh Cheese"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 0.9092841907787180m,
                            ProductCategoryId = 7L,
                            ProductName = "Intelligent Cotton Chicken"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 0.9279871432085480m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Plastic Soap"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 0.5996093060213140m,
                            ProductCategoryId = 9L,
                            ProductName = "Unbranded Plastic Ball"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 0.2618185061205110m,
                            ProductCategoryId = 1L,
                            ProductName = "Unbranded Plastic Bacon"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 0.6636549505905810m,
                            ProductCategoryId = 3L,
                            ProductName = "Handcrafted Plastic Table"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 0.8249837118902130m,
                            ProductCategoryId = 4L,
                            ProductName = "Ergonomic Fresh Chicken"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 0.1983739567730270m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Soft Sausages"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 0.9551086656633880m,
                            ProductCategoryId = 6L,
                            ProductName = "Sleek Fresh Pants"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 0.1668360118826410m,
                            ProductCategoryId = 11L,
                            ProductName = "Refined Soft Bike"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 0.7620677267789460m,
                            ProductCategoryId = 12L,
                            ProductName = "Sleek Concrete Chair"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 0.8215582841999580m,
                            ProductCategoryId = 13L,
                            ProductName = "Unbranded Soft Bacon"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 0.681178864683030m,
                            ProductCategoryId = 14L,
                            ProductName = "Ergonomic Concrete Chicken"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 0.3332634446116290m,
                            ProductCategoryId = 15L,
                            ProductName = "Handcrafted Steel Computer"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 0.6080077535239790m,
                            ProductCategoryId = 16L,
                            ProductName = "Handmade Metal Chicken"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 0.3943398993493410m,
                            ProductCategoryId = 17L,
                            ProductName = "Tasty Soft Shirt"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 0.8373996879794650m,
                            ProductCategoryId = 8L,
                            ProductName = "Sleek Soft Towels"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 0.445839449262230m,
                            ProductCategoryId = 9L,
                            ProductName = "Unbranded Plastic Hat"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 0.3246124196953260m,
                            ProductCategoryId = 14L,
                            ProductName = "Small Concrete Chair"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 0.8480842362281310m,
                            ProductCategoryId = 13L,
                            ProductName = "Rustic Fresh Mouse"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 0.06588603462917140m,
                            ProductCategoryId = 4L,
                            ProductName = "Awesome Metal Mouse"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 0.8598529866845530m,
                            ProductCategoryId = 3L,
                            ProductName = "Generic Soft Chicken"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 0.1250473407925970m,
                            ProductCategoryId = 6L,
                            ProductName = "Unbranded Concrete Computer"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 0.6867088389753370m,
                            ProductCategoryId = 1L,
                            ProductName = "Rustic Steel Sausages"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 0.4184936100237570m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Metal Ball"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 0.9966621110933180m,
                            ProductCategoryId = 3L,
                            ProductName = "Incredible Cotton Towels"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 0.3568352098309010m,
                            ProductCategoryId = 4L,
                            ProductName = "Gorgeous Rubber Salad"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 0.7716057433819570m,
                            ProductCategoryId = 5L,
                            ProductName = "Refined Granite Keyboard"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 0.3978252216978750m,
                            ProductCategoryId = 6L,
                            ProductName = "Fantastic Plastic Chips"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 0.6797630827033680m,
                            ProductCategoryId = 7L,
                            ProductName = "Handmade Metal Towels"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 0.903425375922360m,
                            ProductCategoryId = 8L,
                            ProductName = "Handmade Concrete Pizza"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 0.9865304442819550m,
                            ProductCategoryId = 9L,
                            ProductName = "Generic Concrete Computer"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 0.7392258065079110m,
                            ProductCategoryId = 1L,
                            ProductName = "Fantastic Plastic Chips"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 0.2204467709685270m,
                            ProductCategoryId = 11L,
                            ProductName = "Handmade Rubber Tuna"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 0.2035961374996030m,
                            ProductCategoryId = 14L,
                            ProductName = "Gorgeous Rubber Sausages"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 0.6063543994993340m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Rubber Chicken"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 0.2852602672695990m,
                            ProductCategoryId = 6L,
                            ProductName = "Intelligent Frozen Keyboard"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 0.3948335787748440m,
                            ProductCategoryId = 15L,
                            ProductName = "Fantastic Plastic Bike"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 0.4561094340000280m,
                            ProductCategoryId = 2L,
                            ProductName = "Fantastic Soft Salad"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 0.5278948956693140m,
                            ProductCategoryId = 18L,
                            ProductName = "Rustic Rubber Ball"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 0.3888452368755620m,
                            ProductCategoryId = 4L,
                            ProductName = "Small Steel Table"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 0.6713734610766130m,
                            ProductCategoryId = 15L,
                            ProductName = "Practical Steel Chair"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 0.1710872151696260m,
                            ProductCategoryId = 19L,
                            ProductName = "Unbranded Fresh Computer"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 0.1961798324200240m,
                            ProductCategoryId = 20L,
                            ProductName = "Handmade Frozen Salad"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 0.2893336375966960m,
                            ProductCategoryId = 8L,
                            ProductName = "Generic Concrete Bike"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 0.1497343575428170m,
                            ProductCategoryId = 14L,
                            ProductName = "Small Steel Ball"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 0.3842044437580190m,
                            ProductCategoryId = 13L,
                            ProductName = "Intelligent Metal Towels"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 0.8937054258897260m,
                            ProductCategoryId = 19L,
                            ProductName = "Awesome Fresh Bike"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 0.4142864648289580m,
                            ProductCategoryId = 16L,
                            ProductName = "Ergonomic Frozen Mouse"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 0.6891507955611480m,
                            ProductCategoryId = 11L,
                            ProductName = "Tasty Soft Gloves"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 0.7580327189391610m,
                            ProductCategoryId = 13L,
                            ProductName = "Fantastic Fresh Pants"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Sports"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 772m,
                            Id = 1L,
                            Quantity = 29,
                            UnitPrice = 161.55m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 360m,
                            Id = 2L,
                            Quantity = 73,
                            UnitPrice = 234.70m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 382m,
                            Id = 3L,
                            Quantity = 32,
                            UnitPrice = 712.66m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 547m,
                            Id = 4L,
                            Quantity = 46,
                            UnitPrice = 986.43m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 867m,
                            Id = 5L,
                            Quantity = 84,
                            UnitPrice = 851.67m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 471m,
                            Id = 6L,
                            Quantity = 88,
                            UnitPrice = 177.82m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 837m,
                            Id = 7L,
                            Quantity = 87,
                            UnitPrice = 444.66m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 570m,
                            Id = 8L,
                            Quantity = 28,
                            UnitPrice = 618.88m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 65m,
                            Id = 9L,
                            Quantity = 38,
                            UnitPrice = 207.81m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 941m,
                            Id = 10L,
                            Quantity = 99,
                            UnitPrice = 96.24m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 768m,
                            Id = 11L,
                            Quantity = 72,
                            UnitPrice = 611.09m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 70m,
                            Id = 12L,
                            Quantity = 96,
                            UnitPrice = 298.41m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 146m,
                            Id = 13L,
                            Quantity = 17,
                            UnitPrice = 741.00m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 562m,
                            Id = 14L,
                            Quantity = 54,
                            UnitPrice = 754.07m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 743m,
                            Id = 15L,
                            Quantity = 21,
                            UnitPrice = 183.94m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 457m,
                            Id = 16L,
                            Quantity = 83,
                            UnitPrice = 301.37m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 971m,
                            Id = 17L,
                            Quantity = 89,
                            UnitPrice = 7.30m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 193m,
                            Id = 18L,
                            Quantity = 25,
                            UnitPrice = 704.75m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 546m,
                            Id = 19L,
                            Quantity = 37,
                            UnitPrice = 258.06m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 331m,
                            Id = 20L,
                            Quantity = 98,
                            UnitPrice = 793.56m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Consequatur optio qui.\nQuia quia non iure quia expedita consequatur.\nEst velit suscipit similique quia quidem aut aut.\nAt expedita non nulla.\nQuo eos omnis.",
                            RequestDate = new DateTime(2024, 5, 6, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(4894),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Et ea nihil ad nemo aut qui quibusdam beatae sed.",
                            RequestDate = new DateTime(2024, 2, 26, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(5157),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Omnis explicabo debitis quia perspiciatis.",
                            RequestDate = new DateTime(2024, 5, 16, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(5202),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Eius laboriosam consequatur illum itaque repellendus id cupiditate aut quaerat.",
                            RequestDate = new DateTime(2024, 5, 6, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(5224),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Ab et praesentium.",
                            RequestDate = new DateTime(2024, 2, 26, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(5262),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Incidunt ea voluptatem molestiae nihil beatae tenetur odit porro. Pariatur deleniti est doloribus. Fugit dignissimos impedit culpa veritatis labore perspiciatis.",
                            RequestDate = new DateTime(2024, 5, 16, 19, 36, 18, 419, DateTimeKind.Local).AddTicks(5315),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 21, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2021),
                            ReviewText = "Velit dolor voluptate eaque repellat. Eos praesentium at officiis dolores quaerat minima. Aut iure consectetur et quis nesciunt non cumque nostrum. Et id sint similique molestiae aspernatur repellendus fugiat consequatur. Voluptatem tempora quo nihil cupiditate nostrum at voluptas distinctio reprehenderit. Quas nobis distinctio doloremque facere."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 12, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2301),
                            ReviewText = "Voluptatum quis rem doloribus quibusdam ut autem neque distinctio. Voluptatem tenetur asperiores perferendis expedita. Ut sed officiis enim aspernatur doloribus et nobis fugit. Maiores at quaerat reprehenderit blanditiis."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 13, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2410),
                            ReviewText = "Praesentium odio ut possimus assumenda. Quis iure commodi perspiciatis nesciunt repellendus. Eum delectus harum consequatur quaerat magnam. Ut praesentium temporibus eligendi delectus aut fugit. Veniam quidem temporibus. Magnam eaque aperiam commodi vel quis."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 3, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2559),
                            ReviewText = "perferendis"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 2, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2566),
                            ReviewText = "Debitis est ut consequatur ea incidunt inventore adipisci. Ratione accusantium quam ut harum delectus eos ratione ipsum cum. Voluptas rem assumenda numquam ut id. Laboriosam soluta aut tenetur sit."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 1, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2673),
                            ReviewText = "enim"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 21, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2733),
                            ReviewText = "Odio et corporis culpa tempora nesciunt aut voluptas cumque minima."
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 12, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2767),
                            ReviewText = "Et corporis modi. Rerum non ut. Fugiat et deserunt eius nihil eos nobis repellendus officiis quod. Sint accusamus qui."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 13, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2842),
                            ReviewText = "deserunt"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 3, 19, 36, 18, 421, DateTimeKind.Local).AddTicks(2847),
                            ReviewText = "Qui aut et ex et. Et doloribus perferendis aut reprehenderit eaque voluptatem eum. Enim velit ducimus quia ut non nisi deserunt incidunt ipsam. Nisi fuga dolorum maiores aut non numquam alias enim sequi."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "1zRkKahWmB3Q58Vd1NHc6qeP7MDTZw",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 1, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9334),
                            Status = "Sent from abroad",
                            TrackingNumber = "THDEMCU1590"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "1tZ7JiHhF2GQqxR6wYredSpX9PK8oD",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 5, 31, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9475),
                            Status = "Recieved from abroad",
                            TrackingNumber = "XVBUMFJ1533"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "39XaGyvroE8JxtNMjizeZH7wU6K1Qng5",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 21, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9523),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "OKDIARI1457"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "3RwpBdP1JhkWnexmYbD7qacy4LF69rXvTgV",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 21, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9569),
                            Status = "delivered",
                            TrackingNumber = "IIAUGUW1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "18ktvFbKUSrATeY1QduBfNqgHh",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 2, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9615),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "FDQOBSQ1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1hgfJFUwRXrcp6E71Tq92yQCunGameido",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 25, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9653),
                            Status = "recieved",
                            TrackingNumber = "XFPUETS1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "3yTsSCxfrWoQ6GP4NveabhY7mgUJZMcDu",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 10, 19, 36, 18, 422, DateTimeKind.Local).AddTicks(9747),
                            Status = "boxing",
                            TrackingNumber = "JKJOWFD1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
