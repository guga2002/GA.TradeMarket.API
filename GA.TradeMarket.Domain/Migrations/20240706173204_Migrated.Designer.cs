// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240706173204_Migrated")]
    partial class Migrated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoggMesagge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2009, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2573),
                            Points = 613
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2576),
                            Points = 221
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2021, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2578),
                            Points = 975
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2014, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2579),
                            Points = 874
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2018, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2581),
                            Points = 334
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1995, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2582),
                            Points = 712
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1995, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2585),
                            Points = 806
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2000, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2586),
                            Points = 878
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2012, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2588),
                            Points = 361
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2017, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2590),
                            Points = 944
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2008, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2592),
                            Points = 951
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2000, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2593),
                            Points = 813
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2022, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2595),
                            Points = 484
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2010, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2596),
                            Points = 376
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2021, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2598),
                            Points = 644
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2010, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2600),
                            Points = 947
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1999, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2601),
                            Points = 950
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2016, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2603),
                            Points = 632
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2017, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2605),
                            Points = 218
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(1996, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2607),
                            Points = 676
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2001, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2608),
                            Points = 774
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2008, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2610),
                            Points = 172
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2023, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2611),
                            Points = 707
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2022, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2613),
                            Points = 625
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2021, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2615),
                            Points = 965
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2022, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2616),
                            Points = 125
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2005, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2618),
                            Points = 307
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2003, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2619),
                            Points = 159
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2018, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2621),
                            Points = 636
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2000, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2622),
                            Points = 683
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2019, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2624),
                            Points = 544
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(1998, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(2625),
                            Points = 476
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "3cqdYN1ys6XFjhKau52wvRnJ3DHP83419",
                            DiscountValue = 131m,
                            ExpiryDate = new DateTime(2025, 1, 4, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3425)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "1oj1VP9q8gtsfAbvp6nizrhmJdwDQZ14258",
                            DiscountValue = 392m,
                            ExpiryDate = new DateTime(2025, 10, 27, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3531)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "39Dw7vZUydHWqQg8JKE42pzVo5YCiX15542",
                            DiscountValue = 108m,
                            ExpiryDate = new DateTime(2025, 1, 26, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3566)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "3PtbxVEqJmCAR2fezhGHTQZiFkynjdw93199",
                            DiscountValue = 141m,
                            ExpiryDate = new DateTime(2025, 6, 11, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3600)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1RQqa9biU1zCsXnxpcyLE7g8m5D55810",
                            DiscountValue = 385m,
                            ExpiryDate = new DateTime(2025, 1, 3, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3630)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "1sbXh3WQkMEc8gCxyrt2BHFTzRDpiJKqm37164",
                            DiscountValue = 329m,
                            ExpiryDate = new DateTime(2024, 10, 27, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3711)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "3ex3qzbhKSogiM2RZ8mBdfsGCuF1paDW653046",
                            DiscountValue = 388m,
                            ExpiryDate = new DateTime(2024, 7, 24, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3748)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1vKUsj3VBAeQhbuF1gJiMZkLxm2NT8aHc16514",
                            DiscountValue = 163m,
                            ExpiryDate = new DateTime(2025, 5, 31, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3783)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "1R8wfj9gQnvpaciNWX3meMBKkZG28732",
                            DiscountValue = 312m,
                            ExpiryDate = new DateTime(2024, 12, 29, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3816)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "1hYHQ18BR9y25xSutMq7VAiDGXJeFnwmvU76677",
                            DiscountValue = 211m,
                            ExpiryDate = new DateTime(2025, 1, 22, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3845)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3ocu42BnwQLrkgSfAmCtPDvMJ652566",
                            DiscountValue = 278m,
                            ExpiryDate = new DateTime(2025, 4, 2, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3882)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "3i5mWPksZ7oQaJ8AhN1UvuM3FE420160",
                            DiscountValue = 335m,
                            ExpiryDate = new DateTime(2025, 11, 7, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3911)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "3mTRDtPwU8r4Yih9pMGe16fHcJySFou5773308",
                            DiscountValue = 133m,
                            ExpiryDate = new DateTime(2024, 11, 6, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3940)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "3D4XYQ73APSyxisdtnJeTRU9cazCLrpHGK631423",
                            DiscountValue = 246m,
                            ExpiryDate = new DateTime(2025, 11, 17, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(3974)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "3NEKVX8drBHZR6tDy49jmb7FYUpCvWGn40479",
                            DiscountValue = 210m,
                            ExpiryDate = new DateTime(2025, 11, 7, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(4043)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1tTszgmihJYu82PHCf6bkWSM4r614",
                            DiscountValue = 167m,
                            ExpiryDate = new DateTime(2025, 6, 22, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(4077)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 557m,
                            OperationDate = new DateTime(2024, 6, 1, 16, 32, 3, 474, DateTimeKind.Local).AddTicks(2431),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 109m,
                            OperationDate = new DateTime(2023, 10, 17, 14, 32, 3, 474, DateTimeKind.Local).AddTicks(2438),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 323m,
                            OperationDate = new DateTime(2023, 8, 27, 10, 32, 3, 474, DateTimeKind.Local).AddTicks(2439),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 129m,
                            OperationDate = new DateTime(2024, 3, 19, 22, 32, 3, 474, DateTimeKind.Local).AddTicks(2441),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 480m,
                            OperationDate = new DateTime(2023, 11, 4, 17, 32, 3, 474, DateTimeKind.Local).AddTicks(2442),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 131m,
                            OperationDate = new DateTime(2023, 12, 7, 2, 32, 3, 474, DateTimeKind.Local).AddTicks(2444),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 673m,
                            OperationDate = new DateTime(2023, 10, 8, 18, 32, 3, 474, DateTimeKind.Local).AddTicks(2446),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 183m,
                            OperationDate = new DateTime(2023, 8, 24, 13, 32, 3, 474, DateTimeKind.Local).AddTicks(2448),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 7, 6, 21, 32, 3, 468, DateTimeKind.Local).AddTicks(9753),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "Excepturi est sapiente quia minus nam vel excepturi veniam reprehenderit.",
                            NotificationDate = new DateTime(2024, 6, 4, 15, 32, 3, 476, DateTimeKind.Local).AddTicks(1191),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "Consectetur possimus laboriosam facilis perspiciatis maiores incidunt earum assumenda. Nisi reiciendis minus ad qui eligendi error numquam et aut. Vitae sed fuga porro ut id. Optio dolorem rerum. Sit quis est. Tenetur iusto repudiandae quasi quas.",
                            NotificationDate = new DateTime(2024, 6, 1, 5, 32, 3, 476, DateTimeKind.Local).AddTicks(1321),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "Qui nemo ut excepturi modi doloremque.\nEt ullam blanditiis.\nDucimus sapiente dolores ipsum.\nMolestiae et occaecati expedita consectetur nam commodi.\nDeserunt corporis minus sed et a.",
                            NotificationDate = new DateTime(2024, 6, 7, 6, 32, 3, 476, DateTimeKind.Local).AddTicks(1575),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "In voluptatem quia magni dolores qui unde dolor facilis. Quod perspiciatis consequatur. Dolorem vero eum magni. Ipsa harum quis dolorum nam quas corporis quis necessitatibus et. Nostrum mollitia voluptatibus ea est quae aliquam voluptatibus expedita illo.",
                            NotificationDate = new DateTime(2024, 5, 27, 5, 32, 3, 476, DateTimeKind.Local).AddTicks(1674),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "Id quo enim fuga omnis dolores.\nAd est itaque sint voluptas.\nTempore et quae.",
                            NotificationDate = new DateTime(2024, 6, 3, 0, 32, 3, 476, DateTimeKind.Local).AddTicks(1817),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Delectus facere culpa.\nVeniam facilis nihil molestiae labore tempore.\nIure cum quibusdam doloribus natus rerum alias maiores.\nOccaecati porro ut facilis.",
                            NotificationDate = new DateTime(2024, 6, 26, 15, 32, 3, 476, DateTimeKind.Local).AddTicks(1870),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "iusto",
                            NotificationDate = new DateTime(2024, 5, 31, 8, 32, 3, 476, DateTimeKind.Local).AddTicks(1992),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "Veniam nam temporibus qui vitae quidem corporis non nobis corrupti.\nTotam consequatur voluptas atque voluptas voluptatem fugit unde.\nPlaceat rerum omnis repellat.\nAut voluptas voluptatem alias et.\nIn libero assumenda cum quod reprehenderit adipisci.\nId voluptatem fugit minima vitae nobis ut.",
                            NotificationDate = new DateTime(2024, 6, 25, 11, 32, 3, 476, DateTimeKind.Local).AddTicks(1997),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Quo necessitatibus itaque vel et vel.",
                            NotificationDate = new DateTime(2024, 6, 24, 13, 32, 3, 476, DateTimeKind.Local).AddTicks(2184),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "Quidem a corrupti facere.\nNisi illum aut repellat reprehenderit perferendis voluptatem.\nPerferendis voluptas veniam iusto sint est quis.",
                            NotificationDate = new DateTime(2024, 6, 30, 12, 32, 3, 476, DateTimeKind.Local).AddTicks(2207),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "Perferendis quos beatae nemo aliquam aliquid exercitationem officiis excepturi. Nihil modi ut enim error qui mollitia et. Dolores totam voluptatem nihil. Occaecati ipsum perspiciatis enim earum molestiae voluptatem. Voluptatem placeat impedit consequatur qui repellendus quasi possimus.",
                            NotificationDate = new DateTime(2024, 5, 27, 2, 32, 3, 476, DateTimeKind.Local).AddTicks(2264),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Non qui fugit nulla sed.\nDolores ab eum magni sunt dolor veniam enim cumque repudiandae.",
                            NotificationDate = new DateTime(2024, 6, 10, 8, 32, 3, 476, DateTimeKind.Local).AddTicks(2421),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "Libero error eos sequi reprehenderit dicta.",
                            NotificationDate = new DateTime(2024, 6, 30, 2, 32, 3, 476, DateTimeKind.Local).AddTicks(2470),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Assumenda totam deleniti dolores architecto. Aut labore dolor molestias nostrum provident quam aperiam culpa. Quidem ut quia ea sit velit quidem voluptas est. Occaecati nihil dolores in eligendi nihil rerum unde dolor. Laborum modi quasi et accusamus non earum et. Id vero quasi error est at.",
                            NotificationDate = new DateTime(2024, 6, 29, 12, 32, 3, 476, DateTimeKind.Local).AddTicks(2490),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Modi ipsa fugiat iste dolor.",
                            NotificationDate = new DateTime(2024, 6, 21, 3, 32, 3, 476, DateTimeKind.Local).AddTicks(2658),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Cumque sint amet suscipit recusandae ut. Accusantium ut laborum earum perspiciatis consequuntur. Cumque voluptatum adipisci animi. Deleniti recusandae repellat dicta. Et recusandae sapiente et et enim aut possimus dolorem molestiae.",
                            NotificationDate = new DateTime(2024, 6, 18, 9, 32, 3, 476, DateTimeKind.Local).AddTicks(2676),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Est quos ad sint incidunt error atque voluptas omnis. Ipsum voluptate autem. Itaque dolor quidem. Quis rem assumenda. Sed eos cum cum. Eos quis odit.",
                            NotificationDate = new DateTime(2024, 5, 31, 17, 32, 3, 476, DateTimeKind.Local).AddTicks(2817),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Dignissimos voluptas alias ipsum minus placeat omnis veniam quia omnis.\nNatus quo non dolorum nostrum facere et nesciunt.\nDolorem qui et sit inventore recusandae soluta.\nDoloribus autem et sint soluta non.",
                            NotificationDate = new DateTime(2024, 6, 10, 12, 32, 3, 476, DateTimeKind.Local).AddTicks(2901),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 30, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3261),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 7, 3, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3264),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 7, 2, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3266),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 7, 1, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3267),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 6, 23, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3268),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 30, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3269),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 28, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3271),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 25, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3272),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 27, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3273),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 7, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3274),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 29, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3276),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 9, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3277),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 27, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3278),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 17, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3279),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 12, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3281),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 22, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3282),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 25, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3283),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 21, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3285),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 16, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3286),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 23, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3287),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 24, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3288),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 21, 21, 32, 3, 476, DateTimeKind.Local).AddTicks(3290),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 55m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 15, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6945),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 101m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 27, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6951),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 324m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 13, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6953),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 855m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 23, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6954),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 384m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 16, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6957),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 528m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 19, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6958),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 96m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 26, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6960),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 992m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 15, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6962),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 871m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 25, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6964),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 195m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 24, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6966),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 315m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 25, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6968),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 831m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 7, 3, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6970),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 633m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 24, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6971),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 348m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 21, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6973),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 444m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 6, 27, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6975),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 249m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 6, 11, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6977),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 814m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 21, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6978),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 907m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 21, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6981),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "846",
                            CardHolderName = "Darrin Cummings",
                            CardNumber = "4668779362706",
                            ExpiryDate = new DateTime(2028, 7, 6, 21, 32, 3, 477, DateTimeKind.Local).AddTicks(9955)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "330",
                            CardHolderName = "Gust Berge",
                            CardNumber = "6767-7995-8803-8548-63",
                            ExpiryDate = new DateTime(2030, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(290)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "328",
                            CardHolderName = "Jamil Bartoletti",
                            CardNumber = "6759-4680-9777-7675",
                            ExpiryDate = new DateTime(2029, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(748)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "927",
                            CardHolderName = "Bertha Schaden",
                            CardNumber = "6507-6873-0062-8335",
                            ExpiryDate = new DateTime(2032, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(1068)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "065",
                            CardHolderName = "Manuela Bergstrom",
                            CardNumber = "6759-1413-0103-5061",
                            ExpiryDate = new DateTime(2026, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(1538)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "151",
                            CardHolderName = "Elfrieda Kris",
                            CardNumber = "6304172890463309092",
                            ExpiryDate = new DateTime(2031, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(1921)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "019",
                            CardHolderName = "Caesar Turcotte",
                            CardNumber = "5495-1698-2141-9748",
                            ExpiryDate = new DateTime(2032, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(2225)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "748",
                            CardHolderName = "Mollie Turner",
                            CardNumber = "4753471974337",
                            ExpiryDate = new DateTime(2033, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(2517)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "836",
                            CardHolderName = "Brendon Kuhlman",
                            CardNumber = "6767-1841-8182-5653-86",
                            ExpiryDate = new DateTime(2027, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(2802)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "246",
                            CardHolderName = "Wanda Reinger",
                            CardNumber = "6771-8991-6044-3171",
                            ExpiryDate = new DateTime(2031, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(3077)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "453",
                            CardHolderName = "Adah Hintz",
                            CardNumber = "501837868960544670",
                            ExpiryDate = new DateTime(2028, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(3409)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "987",
                            CardHolderName = "Margot Luettgen",
                            CardNumber = "4210598612282",
                            ExpiryDate = new DateTime(2027, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(3735)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "391",
                            CardHolderName = "Jena Zulauf",
                            CardNumber = "3006-776995-5389",
                            ExpiryDate = new DateTime(2032, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(4006)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "472",
                            CardHolderName = "Paul Flatley",
                            CardNumber = "503831425475890585",
                            ExpiryDate = new DateTime(2029, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(4308)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "180",
                            CardHolderName = "Myron Schaefer",
                            CardNumber = "6771-8938-9650-5536",
                            ExpiryDate = new DateTime(2033, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(4638)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "597",
                            CardHolderName = "Haskell Donnelly",
                            CardNumber = "5481-5352-3090-5954",
                            ExpiryDate = new DateTime(2031, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(4900)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "961",
                            CardHolderName = "Johann Torp",
                            CardNumber = "6304-9381-4230-9906",
                            ExpiryDate = new DateTime(2028, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(5232)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "094",
                            CardHolderName = "Corine Kovacek",
                            CardNumber = "4967389896594",
                            ExpiryDate = new DateTime(2029, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(5515)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "801",
                            CardHolderName = "Keyon Stoltenberg",
                            CardNumber = "6759-5342-4728-2157-780",
                            ExpiryDate = new DateTime(2027, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(5761)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "538",
                            CardHolderName = "Litzy Adams",
                            CardNumber = "6399-9039-1669-3964",
                            ExpiryDate = new DateTime(2029, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6094)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "599",
                            CardHolderName = "Magali Abernathy",
                            CardNumber = "6304-6018-5890-8366",
                            ExpiryDate = new DateTime(2032, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6424)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "066",
                            CardHolderName = "Helena Bayer",
                            CardNumber = "3703-477878-85356",
                            ExpiryDate = new DateTime(2026, 7, 6, 21, 32, 3, 478, DateTimeKind.Local).AddTicks(6717)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8ed49dbd-14ea-4f9b-bc8c-c644e32fbd2f",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "GURAM.APKHAZAVA908@ENS.TSU.GE",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUUVt8FaZXFaUv9UasSUddsadhBQpyyHzQXoxSCsZMXt8Ln8wR+x0ApUQqoR6zgkw==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dcf195c3-4770-4001-8047-6860b2aaace9",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1989, 7, 6, 21, 32, 3, 471, DateTimeKind.Local).AddTicks(6599),
                            ConcurrencyStamp = "c3c6fb2c-2124-43a5-aa9d-0a52e9440458",
                            Email = "arnulfo@hintz.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Jakubowski",
                            PhoneNumber = "(785)155-1607 x151",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc7c1978-8719-456d-b810-ebb0ef7d2fea",
                            Surname = "Auer",
                            TwoFactorEnabled = false,
                            UserName = "kaelyn_witting"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1966, 7, 6, 21, 32, 3, 472, DateTimeKind.Local).AddTicks(267),
                            ConcurrencyStamp = "2460dc95-b689-4308-b359-213db78f7f2f",
                            Email = "ezequiel.senger@ohara.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wintheiser",
                            PhoneNumber = "(388)361-9761 x820",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a02234e9-23f9-4a0f-8824-bca8e2c547a1",
                            Surname = "Nitzsche",
                            TwoFactorEnabled = false,
                            UserName = "serena"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1972, 7, 6, 21, 32, 3, 472, DateTimeKind.Local).AddTicks(3358),
                            ConcurrencyStamp = "c4472aac-2921-40f7-a583-a6682212cec0",
                            Email = "telly_bednar@bahringer.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Purdy",
                            PhoneNumber = "(627)441-6619",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "637a223d-59f1-45b2-8b50-810a69569024",
                            Surname = "Torphy",
                            TwoFactorEnabled = false,
                            UserName = "chanelle"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1966, 7, 6, 21, 32, 3, 472, DateTimeKind.Local).AddTicks(6508),
                            ConcurrencyStamp = "d98a6fcb-941a-411d-aa7c-1915da550a37",
                            Email = "fabiola@glover.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Prosacco",
                            PhoneNumber = "(480)924-9275",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fc73f1a-3a9e-43eb-8406-69e9ca5c0c05",
                            Surname = "Stanton",
                            TwoFactorEnabled = false,
                            UserName = "heloise_stehr"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1979, 7, 6, 21, 32, 3, 473, DateTimeKind.Local).AddTicks(509),
                            ConcurrencyStamp = "71d54a8b-ea57-4ca9-bafa-2c20e5c81935",
                            Email = "elisabeth_lowe@farrell.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Hermann",
                            PhoneNumber = "253-089-1563 x0554",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be55de48-23fd-498a-8bac-49e6d082c638",
                            Surname = "Graham",
                            TwoFactorEnabled = false,
                            UserName = "jena"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2003, 7, 6, 21, 32, 3, 473, DateTimeKind.Local).AddTicks(3883),
                            ConcurrencyStamp = "49d150b6-2667-4269-ab8d-b86151b91f55",
                            Email = "maida_weissnat@johnswunsch.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Koelpin",
                            PhoneNumber = "227-381-5102",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30117a26-127b-4c04-8a4c-ef61f10bf081",
                            Surname = "Muller",
                            TwoFactorEnabled = false,
                            UserName = "alec.price"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2011, 7, 6, 21, 32, 3, 473, DateTimeKind.Local).AddTicks(7085),
                            ConcurrencyStamp = "61f3e276-7e1d-4dd2-982d-2f49d63bc87f",
                            Email = "russell@gloverbogisich.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Spencer",
                            PhoneNumber = "784.172.6847 x5912",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12ab6030-5c7a-495a-b1d7-6a4a6ed6e6b2",
                            Surname = "Schowalter",
                            TwoFactorEnabled = false,
                            UserName = "emily"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1975, 7, 6, 21, 32, 3, 474, DateTimeKind.Local).AddTicks(617),
                            ConcurrencyStamp = "f9299378-a04f-46af-a8f5-3b0c299658d7",
                            Email = "karlie@white.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Steuber",
                            PhoneNumber = "(212)968-1823",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57559af4-6bf4-41df-82a4-df878609eb70",
                            Surname = "D'Amore",
                            TwoFactorEnabled = false,
                            UserName = "zachery_schultz"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 211.65m,
                            ProductCategoryId = 1L,
                            ProductName = "Refined Metal Hat"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 232.85m,
                            ProductCategoryId = 2L,
                            ProductName = "Rustic Soft Pants"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 382.67m,
                            ProductCategoryId = 3L,
                            ProductName = "Fantastic Wooden Tuna"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 236.71m,
                            ProductCategoryId = 4L,
                            ProductName = "Tasty Cotton Computer"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 613.26m,
                            ProductCategoryId = 5L,
                            ProductName = "Tasty Metal Shoes"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 37.84m,
                            ProductCategoryId = 6L,
                            ProductName = "Generic Frozen Pizza"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 49.08m,
                            ProductCategoryId = 7L,
                            ProductName = "Licensed Frozen Chicken"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 654.33m,
                            ProductCategoryId = 8L,
                            ProductName = "Small Granite Hat"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 754.66m,
                            ProductCategoryId = 9L,
                            ProductName = "Handmade Wooden Chicken"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 636.11m,
                            ProductCategoryId = 1L,
                            ProductName = "Gorgeous Granite Bacon"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 649.95m,
                            ProductCategoryId = 3L,
                            ProductName = "Ergonomic Wooden Chicken"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 290.54m,
                            ProductCategoryId = 4L,
                            ProductName = "Generic Fresh Cheese"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 281.76m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Rubber Chair"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 707.30m,
                            ProductCategoryId = 6L,
                            ProductName = "Handcrafted Metal Keyboard"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 988.65m,
                            ProductCategoryId = 11L,
                            ProductName = "Licensed Wooden Bike"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 918.61m,
                            ProductCategoryId = 12L,
                            ProductName = "Unbranded Wooden Computer"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 348.06m,
                            ProductCategoryId = 13L,
                            ProductName = "Ergonomic Steel Fish"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 937.32m,
                            ProductCategoryId = 14L,
                            ProductName = "Refined Wooden Gloves"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 90.55m,
                            ProductCategoryId = 15L,
                            ProductName = "Handcrafted Soft Keyboard"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 36.43m,
                            ProductCategoryId = 16L,
                            ProductName = "Tasty Metal Fish"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 780.04m,
                            ProductCategoryId = 17L,
                            ProductName = "Unbranded Plastic Fish"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 166.24m,
                            ProductCategoryId = 8L,
                            ProductName = "Generic Plastic Pants"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 951.69m,
                            ProductCategoryId = 9L,
                            ProductName = "Incredible Cotton Cheese"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 322.93m,
                            ProductCategoryId = 14L,
                            ProductName = "Fantastic Granite Shoes"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 524.50m,
                            ProductCategoryId = 13L,
                            ProductName = "Practical Wooden Table"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 943.39m,
                            ProductCategoryId = 4L,
                            ProductName = "Incredible Fresh Gloves"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 106.06m,
                            ProductCategoryId = 3L,
                            ProductName = "Generic Frozen Keyboard"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 602.42m,
                            ProductCategoryId = 6L,
                            ProductName = "Refined Wooden Gloves"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 808.99m,
                            ProductCategoryId = 1L,
                            ProductName = "Intelligent Granite Pizza"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 148.94m,
                            ProductCategoryId = 2L,
                            ProductName = "Gorgeous Rubber Chair"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 241.50m,
                            ProductCategoryId = 3L,
                            ProductName = "Licensed Rubber Tuna"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 686.87m,
                            ProductCategoryId = 4L,
                            ProductName = "Gorgeous Rubber Sausages"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 767.79m,
                            ProductCategoryId = 5L,
                            ProductName = "Ergonomic Plastic Keyboard"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 59.98m,
                            ProductCategoryId = 6L,
                            ProductName = "Licensed Wooden Pizza"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 777.26m,
                            ProductCategoryId = 7L,
                            ProductName = "Handmade Frozen Keyboard"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 815.92m,
                            ProductCategoryId = 8L,
                            ProductName = "Fantastic Steel Pizza"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 65.42m,
                            ProductCategoryId = 9L,
                            ProductName = "Ergonomic Cotton Cheese"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 752.50m,
                            ProductCategoryId = 1L,
                            ProductName = "Intelligent Cotton Keyboard"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 861.59m,
                            ProductCategoryId = 11L,
                            ProductName = "Unbranded Soft Tuna"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 526.41m,
                            ProductCategoryId = 14L,
                            ProductName = "Practical Cotton Shoes"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 299.81m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Wooden Shoes"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 360.27m,
                            ProductCategoryId = 6L,
                            ProductName = "Ergonomic Wooden Gloves"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 961.37m,
                            ProductCategoryId = 15L,
                            ProductName = "Practical Plastic Gloves"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 393.38m,
                            ProductCategoryId = 2L,
                            ProductName = "Handcrafted Cotton Bacon"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 835.30m,
                            ProductCategoryId = 18L,
                            ProductName = "Practical Soft Keyboard"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 846.67m,
                            ProductCategoryId = 4L,
                            ProductName = "Intelligent Frozen Towels"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 563.36m,
                            ProductCategoryId = 15L,
                            ProductName = "Generic Plastic Gloves"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 356.43m,
                            ProductCategoryId = 19L,
                            ProductName = "Sleek Frozen Chicken"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 792.64m,
                            ProductCategoryId = 20L,
                            ProductName = "Rustic Wooden Ball"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 315.56m,
                            ProductCategoryId = 8L,
                            ProductName = "Tasty Fresh Ball"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 139.22m,
                            ProductCategoryId = 14L,
                            ProductName = "Unbranded Plastic Computer"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 388.13m,
                            ProductCategoryId = 13L,
                            ProductName = "Practical Soft Pants"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 353.47m,
                            ProductCategoryId = 19L,
                            ProductName = "Sleek Granite Bacon"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 387.43m,
                            ProductCategoryId = 16L,
                            ProductName = "Handcrafted Rubber Chicken"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 785.21m,
                            ProductCategoryId = 11L,
                            ProductName = "Intelligent Rubber Soap"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 149.13m,
                            ProductCategoryId = 13L,
                            ProductName = "Refined Granite Hat"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Automotive"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Music"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 864m,
                            Id = 1L,
                            Quantity = 43,
                            UnitPrice = 523.29m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 349m,
                            Id = 2L,
                            Quantity = 73,
                            UnitPrice = 927.76m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 981m,
                            Id = 3L,
                            Quantity = 50,
                            UnitPrice = 577.64m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 155m,
                            Id = 4L,
                            Quantity = 13,
                            UnitPrice = 598.64m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 232m,
                            Id = 5L,
                            Quantity = 63,
                            UnitPrice = 910.24m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 227m,
                            Id = 6L,
                            Quantity = 15,
                            UnitPrice = 755.18m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 996m,
                            Id = 7L,
                            Quantity = 84,
                            UnitPrice = 67.98m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 743m,
                            Id = 8L,
                            Quantity = 57,
                            UnitPrice = 96.59m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 404m,
                            Id = 9L,
                            Quantity = 20,
                            UnitPrice = 240.66m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 954m,
                            Id = 10L,
                            Quantity = 74,
                            UnitPrice = 958.31m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 226m,
                            Id = 11L,
                            Quantity = 76,
                            UnitPrice = 356.00m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 443m,
                            Id = 12L,
                            Quantity = 54,
                            UnitPrice = 778.98m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 353m,
                            Id = 13L,
                            Quantity = 76,
                            UnitPrice = 517.11m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 754m,
                            Id = 14L,
                            Quantity = 37,
                            UnitPrice = 565.81m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 653m,
                            Id = 15L,
                            Quantity = 82,
                            UnitPrice = 629.58m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 466m,
                            Id = 16L,
                            Quantity = 26,
                            UnitPrice = 995.74m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 565m,
                            Id = 17L,
                            Quantity = 11,
                            UnitPrice = 94.95m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 578m,
                            Id = 18L,
                            Quantity = 37,
                            UnitPrice = 415.66m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 946m,
                            Id = 19L,
                            Quantity = 26,
                            UnitPrice = 975.49m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 951m,
                            Id = 20L,
                            Quantity = 53,
                            UnitPrice = 263.69m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Pariatur sunt voluptatem reiciendis totam dolor et aut iure.",
                            RequestDate = new DateTime(2024, 6, 6, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(7897),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Quia modi quia possimus ut totam et ut adipisci.\nNihil deleniti quos soluta labore ut saepe accusantium eum sed.\nAliquam vel quisquam ut deserunt aut.\nReprehenderit aliquam minima enim aspernatur est repellat distinctio quia rem.",
                            RequestDate = new DateTime(2024, 3, 28, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(8034),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Et sint aliquid eligendi quod libero eveniet.",
                            RequestDate = new DateTime(2024, 6, 16, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(8229),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Ut omnis earum quia qui earum ad.\nAt eum asperiores enim distinctio.",
                            RequestDate = new DateTime(2024, 6, 6, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(8258),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Qui omnis minus enim autem tempore illo voluptatem autem. Et et doloremque mollitia et ducimus qui aliquam nemo. Inventore porro nihil minima ut incidunt nulla.",
                            RequestDate = new DateTime(2024, 3, 28, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(8307),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Maiores sit aut odit velit vitae repudiandae possimus veniam quia.\nSapiente deserunt corrupti veniam numquam maiores quod.",
                            RequestDate = new DateTime(2024, 6, 16, 21, 32, 3, 485, DateTimeKind.Local).AddTicks(8390),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 21, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4294),
                            ReviewText = "Perspiciatis aut nesciunt rerum natus accusantium doloremque consequatur. Aut aperiam distinctio praesentium atque. Aut veritatis nesciunt nam sint facilis. Vel dignissimos totam omnis temporibus ut. Non doloribus consectetur vel."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 13, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4521),
                            ReviewText = "Aut dolore est vel et non dolor quidem aut."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 6, 13, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4555),
                            ReviewText = "Voluptas sapiente eos velit rem voluptatem ipsa laudantium.\nEst aut ipsam explicabo consequuntur ullam qui accusamus perferendis."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 7, 4, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4622),
                            ReviewText = "Vero atque commodi repudiandae libero quibusdam."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 6, 2, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4648),
                            ReviewText = "non"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 6, 1, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4687),
                            ReviewText = "Sapiente minima maxime minus dolor quas dolores. Et error eum autem repudiandae sequi sit. Beatae tempora consequatur sed tempore quisquam autem. Amet consequatur cupiditate ipsa."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 21, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4780),
                            ReviewText = "iure"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 13, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4784),
                            ReviewText = "Ea nisi est facilis nostrum qui dolores similique. Nulla temporibus velit ullam officia. Et optio vel facere repellat asperiores voluptatem vitae. Sed temporibus et a consequuntur. Et omnis modi est."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 6, 13, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4906),
                            ReviewText = "Vero delectus architecto ad molestiae nemo."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 7, 4, 21, 32, 3, 487, DateTimeKind.Local).AddTicks(4929),
                            ReviewText = "Cum velit voluptas nulla ut labore voluptatem sed sit."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "3AyfJYnjk7cwTMtQm8vFes5SL93z4Ca",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 7, 2, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(276),
                            Status = "Sent from abroad",
                            TrackingNumber = "XNWEWFE1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "1sJhBT1AndKcgCL8mWN57ftiQR492x3a",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 7, 1, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(393),
                            Status = "Recieved from abroad",
                            TrackingNumber = "QAEOBYZ1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "3uXpEzy29aHGjcQZm5KVkthArMs",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 5, 22, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(436),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "WJLIPMZ1470"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "3cJbgBFYQ5yvxs4HjD2oCM6TAz7NmUGetV",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 5, 22, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(504),
                            Status = "delivered",
                            TrackingNumber = "OZIUARE1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "3x8VMuQaqeP93gSRW1fZHz74c6rKkGFyLYj",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 7, 3, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(548),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "XHNIVUP1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "3QDjerktz2mq4K1TvVLPci7pwS",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 6, 25, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(589),
                            Status = "recieved",
                            TrackingNumber = "XQIEVAJ1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "37PF4b2vs1ayTYgzxBmujoQndJNiVcGRLkX",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 5, 11, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(624),
                            Status = "boxing",
                            TrackingNumber = "ZYXODOD1"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfLastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("productId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(884),
                            productId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(886),
                            productId = 21L
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(887),
                            productId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 4L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(888),
                            productId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 5L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(889),
                            productId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 6L,
                            DateOfLastModification = new DateTime(2024, 7, 6, 21, 32, 3, 489, DateTimeKind.Local).AddTicks(890),
                            productId = 6L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "product")
                        .WithMany("WishLists")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
