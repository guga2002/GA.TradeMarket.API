// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240610183520_migrateNowNEw")]
    partial class migrateNowNEw
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7910),
                            Points = 249
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1995, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7914),
                            Points = 475
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7915),
                            Points = 999
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(1996, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7917),
                            Points = 669
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7919),
                            Points = 802
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2019, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7920),
                            Points = 439
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7922),
                            Points = 769
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7923),
                            Points = 252
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2001, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7925),
                            Points = 426
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7926),
                            Points = 328
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2007, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7929),
                            Points = 586
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7931),
                            Points = 198
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7932),
                            Points = 768
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7934),
                            Points = 816
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1996, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7935),
                            Points = 633
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7937),
                            Points = 134
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2012, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7938),
                            Points = 929
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2020, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7940),
                            Points = 300
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2006, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7941),
                            Points = 581
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7943),
                            Points = 474
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2004, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7945),
                            Points = 453
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2014, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7946),
                            Points = 280
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2018, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7948),
                            Points = 264
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2015, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7949),
                            Points = 392
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7951),
                            Points = 363
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2014, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7952),
                            Points = 576
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2020, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7954),
                            Points = 369
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2010, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7955),
                            Points = 735
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7957),
                            Points = 313
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2003, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7959),
                            Points = 932
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7960),
                            Points = 324
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(7962),
                            Points = 834
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "34LvPWimcbgMf7ZUF2aBqJ65uzRDXTsox48828",
                            DiscountValue = 177m,
                            ExpiryDate = new DateTime(2024, 10, 18, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(1942)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "11Ew3zHr9koun2UmaWNTLhg5MjVpQscG97777",
                            DiscountValue = 241m,
                            ExpiryDate = new DateTime(2024, 11, 28, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2080)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "1MD8zGryWHcNVj6vPidSEAx3Q4gFuZXJsK25382",
                            DiscountValue = 304m,
                            ExpiryDate = new DateTime(2025, 1, 27, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2121)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1XPBUyaDRcLtQn5kAS62Gfmo4x1jpC9gJ12207",
                            DiscountValue = 363m,
                            ExpiryDate = new DateTime(2024, 7, 3, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2160)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1u2ksCxvaX4DNdqPBoH1KcwLgVAYzZe85038",
                            DiscountValue = 305m,
                            ExpiryDate = new DateTime(2024, 7, 27, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2197)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3ySFLA7cW1joRhbpvQmkDqwrT2N26443",
                            DiscountValue = 119m,
                            ExpiryDate = new DateTime(2025, 4, 14, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2231)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1Gsog8fDvdSJMuNQFwth3kKTre4zLA10804",
                            DiscountValue = 269m,
                            ExpiryDate = new DateTime(2024, 8, 28, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2262)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "3THeN967E1AZWwFMzBaryukcgjhU3581",
                            DiscountValue = 226m,
                            ExpiryDate = new DateTime(2025, 3, 4, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2294)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "31ULrApbnGYCkXjFSeyEBN7tWKh11393",
                            DiscountValue = 363m,
                            ExpiryDate = new DateTime(2025, 7, 19, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2325)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "3dZRjWC4D7LgQk2EnqKyAeBzhSxsfcFpt46312",
                            DiscountValue = 329m,
                            ExpiryDate = new DateTime(2025, 2, 24, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2355)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3MxrXWmjPRESQhJs8Cgf4audD5o976L2131",
                            DiscountValue = 105m,
                            ExpiryDate = new DateTime(2025, 1, 16, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2422)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "16w1skV3Y2FCLrSfUj7oBEKNxP64992",
                            DiscountValue = 361m,
                            ExpiryDate = new DateTime(2024, 12, 20, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2456)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "1eBVtwZnqRHu1av83jEgsPcd9MW44358",
                            DiscountValue = 333m,
                            ExpiryDate = new DateTime(2025, 3, 11, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2486)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "1f8BWZqbTkngejvKY5XVhJzMDrFUxpoyma79270",
                            DiscountValue = 171m,
                            ExpiryDate = new DateTime(2025, 4, 6, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2517)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "3pzZJqKD1a6r8yYt4gRikcLbmA58276",
                            DiscountValue = 326m,
                            ExpiryDate = new DateTime(2024, 8, 18, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2554)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1YHDfbU21vVXA4zdGPNw9CycomJn58155",
                            DiscountValue = 284m,
                            ExpiryDate = new DateTime(2025, 7, 31, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(2584)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 668m,
                            OperationDate = new DateTime(2024, 1, 9, 3, 35, 20, 153, DateTimeKind.Local).AddTicks(7764),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 844m,
                            OperationDate = new DateTime(2023, 11, 25, 20, 35, 20, 153, DateTimeKind.Local).AddTicks(7768),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 225m,
                            OperationDate = new DateTime(2024, 2, 12, 7, 35, 20, 153, DateTimeKind.Local).AddTicks(7770),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 445m,
                            OperationDate = new DateTime(2023, 7, 5, 1, 35, 20, 153, DateTimeKind.Local).AddTicks(7771),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 200m,
                            OperationDate = new DateTime(2023, 6, 9, 5, 35, 20, 153, DateTimeKind.Local).AddTicks(7773),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 756m,
                            OperationDate = new DateTime(2024, 4, 10, 10, 35, 20, 153, DateTimeKind.Local).AddTicks(7774),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 254m,
                            OperationDate = new DateTime(2023, 11, 1, 5, 35, 20, 153, DateTimeKind.Local).AddTicks(7776),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 463m,
                            OperationDate = new DateTime(2023, 6, 14, 10, 35, 20, 153, DateTimeKind.Local).AddTicks(7777),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 10, 22, 35, 20, 148, DateTimeKind.Local).AddTicks(8159),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "est",
                            NotificationDate = new DateTime(2024, 5, 7, 19, 35, 20, 155, DateTimeKind.Local).AddTicks(8632),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "Nihil amet nisi debitis dolorem.",
                            NotificationDate = new DateTime(2024, 5, 8, 21, 35, 20, 155, DateTimeKind.Local).AddTicks(8679),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "Et quis distinctio aliquam. Qui aut rem enim. Eos voluptatem pariatur sit dolores numquam iure in.",
                            NotificationDate = new DateTime(2024, 5, 9, 15, 35, 20, 155, DateTimeKind.Local).AddTicks(8750),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "quisquam",
                            NotificationDate = new DateTime(2024, 5, 26, 17, 35, 20, 155, DateTimeKind.Local).AddTicks(8833),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "Aspernatur explicabo nihil qui et blanditiis placeat laboriosam sed deleniti.",
                            NotificationDate = new DateTime(2024, 5, 25, 5, 35, 20, 155, DateTimeKind.Local).AddTicks(8875),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Corporis aut eius expedita qui cum quibusdam.",
                            NotificationDate = new DateTime(2024, 6, 9, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(8911),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "Est facilis quibusdam eum reprehenderit voluptatibus.",
                            NotificationDate = new DateTime(2024, 5, 18, 13, 35, 20, 155, DateTimeKind.Local).AddTicks(8939),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "Totam cupiditate modi pariatur veniam vel qui impedit optio cumque.\nRem numquam odio sed distinctio modi et rerum reiciendis non.\nNon et eveniet sunt optio quia ab.\nNon et saepe quis repudiandae ipsam aliquam expedita dolores quia.\nNam consequatur ut vero libero nulla similique.",
                            NotificationDate = new DateTime(2024, 5, 27, 6, 35, 20, 155, DateTimeKind.Local).AddTicks(8962),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Ex quos minima ullam laudantium non cum tenetur.",
                            NotificationDate = new DateTime(2024, 5, 15, 1, 35, 20, 155, DateTimeKind.Local).AddTicks(9146),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "et",
                            NotificationDate = new DateTime(2024, 6, 2, 16, 35, 20, 155, DateTimeKind.Local).AddTicks(9174),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "Quia hic molestias et autem.",
                            NotificationDate = new DateTime(2024, 6, 9, 5, 35, 20, 155, DateTimeKind.Local).AddTicks(9180),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Aut sit sint dolor perspiciatis saepe.\nPossimus exercitationem quis reiciendis.",
                            NotificationDate = new DateTime(2024, 5, 7, 5, 35, 20, 155, DateTimeKind.Local).AddTicks(9199),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "Laborum nobis id eaque commodi sunt rerum consequatur quos molestias.",
                            NotificationDate = new DateTime(2024, 5, 23, 16, 35, 20, 155, DateTimeKind.Local).AddTicks(9241),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Hic consequatur adipisci nostrum dolor. Eveniet cupiditate aut modi placeat labore quae distinctio. Quia dolores perspiciatis beatae expedita consequuntur. Sint nulla dolore modi voluptatum numquam odio. Libero consequuntur excepturi quasi nostrum aut aut est nostrum est.",
                            NotificationDate = new DateTime(2024, 5, 19, 14, 35, 20, 155, DateTimeKind.Local).AddTicks(9327),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Molestias consectetur quia.",
                            NotificationDate = new DateTime(2024, 5, 22, 4, 35, 20, 155, DateTimeKind.Local).AddTicks(9449),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "assumenda",
                            NotificationDate = new DateTime(2024, 5, 26, 8, 35, 20, 155, DateTimeKind.Local).AddTicks(9463),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Facere ut laboriosam libero.\nSed quia id.",
                            NotificationDate = new DateTime(2024, 5, 14, 3, 35, 20, 155, DateTimeKind.Local).AddTicks(9469),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "optio",
                            NotificationDate = new DateTime(2024, 5, 24, 1, 35, 20, 155, DateTimeKind.Local).AddTicks(9545),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 27, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9836),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 29, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9838),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 6, 5, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9839),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 13, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9841),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 25, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9842),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 16, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9843),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 28, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9845),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 9, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9846),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 6, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9847),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 12, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9849),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 8, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9850),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 24, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9851),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 14, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9852),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 25, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9854),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 15, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9855),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 29, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9856),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 28, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9857),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 8, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9859),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 1, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9860),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 18, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9861),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 4, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9862),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 19, 22, 35, 20, 155, DateTimeKind.Local).AddTicks(9864),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 78m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 12, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7935),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 351m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 5, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7945),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 465m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 15, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7946),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 593m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 26, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7948),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 758m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 26, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7950),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 263m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 16, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7951),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 815m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 7, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7953),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 838m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 30, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7955),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 584m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 27, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7956),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 537m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 21, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7958),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 897m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 28, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7960),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 730m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 17, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7961),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 503m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 22, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7963),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 507m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 17, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7965),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 729m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 6, 6, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7966),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 307m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 26, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7968),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 605m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 30, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7970),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 120m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 31, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7971),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "303",
                            CardHolderName = "Naomi Larkin",
                            CardNumber = "6759769434626727",
                            ExpiryDate = new DateTime(2031, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(7159)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "697",
                            CardHolderName = "Herbert Welch",
                            CardNumber = "4112-5196-7862-5431",
                            ExpiryDate = new DateTime(2030, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(7493)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "594",
                            CardHolderName = "Addie Koelpin",
                            CardNumber = "4082848182949",
                            ExpiryDate = new DateTime(2029, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(7790)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "220",
                            CardHolderName = "Lucy Blick",
                            CardNumber = "6759-5386-3725-2826-586",
                            ExpiryDate = new DateTime(2031, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(8144)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "611",
                            CardHolderName = "Marisol O'Kon",
                            CardNumber = "3682-089199-6737",
                            ExpiryDate = new DateTime(2030, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(8464)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "416",
                            CardHolderName = "Felipe Bashirian",
                            CardNumber = "6759-7793-5581-0492-98",
                            ExpiryDate = new DateTime(2027, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(8772)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "179",
                            CardHolderName = "Nigel Cronin",
                            CardNumber = "3788-768284-99860",
                            ExpiryDate = new DateTime(2032, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(9071)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "019",
                            CardHolderName = "Edmond Lemke",
                            CardNumber = "6771-8914-3205-3987",
                            ExpiryDate = new DateTime(2032, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(9322)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "518",
                            CardHolderName = "Ted Champlin",
                            CardNumber = "6445-6216-1341-5542-2540",
                            ExpiryDate = new DateTime(2026, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(9678)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "753",
                            CardHolderName = "Abraham Keebler",
                            CardNumber = "6759-0662-0957-7399-432",
                            ExpiryDate = new DateTime(2028, 6, 10, 22, 35, 20, 157, DateTimeKind.Local).AddTicks(9989)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "397",
                            CardHolderName = "Nelda Steuber",
                            CardNumber = "6767-5234-5590-1027-716",
                            ExpiryDate = new DateTime(2029, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(262)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "262",
                            CardHolderName = "Oran Ebert",
                            CardNumber = "6304-3264-7441-8216",
                            ExpiryDate = new DateTime(2031, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(705)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "987",
                            CardHolderName = "Scarlett Bechtelar",
                            CardNumber = "3529-5385-7467-1470",
                            ExpiryDate = new DateTime(2032, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(1067)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "634",
                            CardHolderName = "Cecil Wiegand",
                            CardNumber = "58932248878873534",
                            ExpiryDate = new DateTime(2027, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(1410)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "547",
                            CardHolderName = "Hattie Koepp",
                            CardNumber = "4327257604929",
                            ExpiryDate = new DateTime(2033, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(1705)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "807",
                            CardHolderName = "Michelle Prosacco",
                            CardNumber = "5365-8964-3816-0052",
                            ExpiryDate = new DateTime(2028, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(2066)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "696",
                            CardHolderName = "Louvenia Rosenbaum",
                            CardNumber = "6759-6826-0194-3155-122",
                            ExpiryDate = new DateTime(2026, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(2379)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "122",
                            CardHolderName = "Raina Cassin",
                            CardNumber = "4996692572402",
                            ExpiryDate = new DateTime(2033, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(2649)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "824",
                            CardHolderName = "Ashley Walter",
                            CardNumber = "5893-5565-6957-0419",
                            ExpiryDate = new DateTime(2027, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(2997)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "187",
                            CardHolderName = "Nicholaus Wolf",
                            CardNumber = "5478-7390-7731-2929",
                            ExpiryDate = new DateTime(2028, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7000)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "137",
                            CardHolderName = "River Berge",
                            CardNumber = "6759-8598-1018-3716-934",
                            ExpiryDate = new DateTime(2028, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7282)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "827",
                            CardHolderName = "Justina Walker",
                            CardNumber = "3485-789824-93716",
                            ExpiryDate = new DateTime(2030, 6, 10, 22, 35, 20, 158, DateTimeKind.Local).AddTicks(7602)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7a9cf213-628a-44d7-87e0-eb718ab2178a",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "GURAM.APKHAZAVA908@ENS.TSU.GE",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXLjVkK9Ll1DcAKNzIEM5TAU6hBXWplAITXs6lHeUCyECOeQf9yRB6fAO3J+KcYIQ==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b0dac53e-1440-4f89-8af1-fa8a93bd728a",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 6, 10, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(4663),
                            ConcurrencyStamp = "e25fe557-6528-4fd5-b57f-d3f62cd2ee1c",
                            Email = "maxime@jakubowski.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Carter",
                            PhoneNumber = "393-122-0536",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f554730e-c944-462a-99b2-7b6359b503f0",
                            Surname = "Okuneva",
                            TwoFactorEnabled = false,
                            UserName = "bert"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2013, 6, 10, 22, 35, 20, 151, DateTimeKind.Local).AddTicks(8016),
                            ConcurrencyStamp = "9b86a914-403d-41c3-89b2-73cb6f80038f",
                            Email = "claude_tillman@feil.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bauch",
                            PhoneNumber = "(845)561-2820",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbd692dc-ecec-4105-aba3-6f1337895ca4",
                            Surname = "Predovic",
                            TwoFactorEnabled = false,
                            UserName = "jocelyn.rosenbaum"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 6, 10, 22, 35, 20, 152, DateTimeKind.Local).AddTicks(1114),
                            ConcurrencyStamp = "8a7af1e1-25a2-4c0f-b137-e61a678e564c",
                            Email = "jaron@oreillygutkowski.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Legros",
                            PhoneNumber = "(395)067-4951 x9563",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce8b1e29-6947-4dd4-9631-0f6f7da3c2f1",
                            Surname = "Fay",
                            TwoFactorEnabled = false,
                            UserName = "malcolm_beatty"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 6, 10, 22, 35, 20, 152, DateTimeKind.Local).AddTicks(4452),
                            ConcurrencyStamp = "ab684e51-9e75-4deb-80c7-cf596b8aa09d",
                            Email = "alphonso.cormier@towne.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Howell",
                            PhoneNumber = "(482)308-2812",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34c96839-4b04-4d60-9b79-7d91e786ea0d",
                            Surname = "Hagenes",
                            TwoFactorEnabled = false,
                            UserName = "meagan"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 6, 10, 22, 35, 20, 152, DateTimeKind.Local).AddTicks(7085),
                            ConcurrencyStamp = "98351a75-cf7e-4237-9f56-edb5f0e93639",
                            Email = "daniella@roberts.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Mertz",
                            PhoneNumber = "1-111-102-8008 x5655",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2867f8fd-b7e4-49ae-ab6f-019a496c1c68",
                            Surname = "Hackett",
                            TwoFactorEnabled = false,
                            UserName = "albertha"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2009, 6, 10, 22, 35, 20, 152, DateTimeKind.Local).AddTicks(9960),
                            ConcurrencyStamp = "535cbe20-0c86-4a2c-ac9c-91d2ab2273e9",
                            Email = "geovanny_olson@ohara.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Goyette",
                            PhoneNumber = "(361)881-1510 x61303",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd183c48-6622-4f07-8e13-d3b93bf8596c",
                            Surname = "Dickens",
                            TwoFactorEnabled = false,
                            UserName = "orlando_hilpert"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1987, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(3004),
                            ConcurrencyStamp = "7078519c-3f71-43b8-b4c0-6eb86f9e87a3",
                            Email = "joelle@boylesimonis.us",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rohan",
                            PhoneNumber = "(282)442-9319",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bf1b6e1-cb6e-44c3-9ede-2afc1254b114",
                            Surname = "Waters",
                            TwoFactorEnabled = false,
                            UserName = "royal.hand"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1982, 6, 10, 22, 35, 20, 153, DateTimeKind.Local).AddTicks(6051),
                            ConcurrencyStamp = "d64f7cb0-4e08-425e-a428-61a09bd5b072",
                            Email = "shawn_pagac@larson.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Halvorson",
                            PhoneNumber = "1-624-510-5039 x1326",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc8cc81d-553e-42a9-bb58-340aad616735",
                            Surname = "Rowe",
                            TwoFactorEnabled = false,
                            UserName = "melody.hammes"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 315.33m,
                            ProductCategoryId = 1L,
                            ProductName = "Practical Concrete Chair"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 0.08m,
                            ProductCategoryId = 2L,
                            ProductName = "Generic Plastic Keyboard"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 631.66m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Granite Bike"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 364.85m,
                            ProductCategoryId = 4L,
                            ProductName = "Gorgeous Concrete Keyboard"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 634.34m,
                            ProductCategoryId = 5L,
                            ProductName = "Practical Fresh Hat"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 286.30m,
                            ProductCategoryId = 6L,
                            ProductName = "Licensed Soft Shoes"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 763.67m,
                            ProductCategoryId = 7L,
                            ProductName = "Fantastic Wooden Cheese"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 30.00m,
                            ProductCategoryId = 8L,
                            ProductName = "Fantastic Concrete Tuna"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 922.39m,
                            ProductCategoryId = 9L,
                            ProductName = "Refined Metal Mouse"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 944.53m,
                            ProductCategoryId = 1L,
                            ProductName = "Unbranded Granite Shirt"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 770.54m,
                            ProductCategoryId = 3L,
                            ProductName = "Gorgeous Plastic Car"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 128.46m,
                            ProductCategoryId = 4L,
                            ProductName = "Fantastic Cotton Chips"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 917.22m,
                            ProductCategoryId = 3L,
                            ProductName = "Handcrafted Frozen Gloves"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 347.96m,
                            ProductCategoryId = 6L,
                            ProductName = "Awesome Cotton Chicken"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 301.39m,
                            ProductCategoryId = 11L,
                            ProductName = "Sleek Steel Pants"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 527.51m,
                            ProductCategoryId = 12L,
                            ProductName = "Ergonomic Concrete Computer"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 858.66m,
                            ProductCategoryId = 13L,
                            ProductName = "Ergonomic Wooden Chips"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 450.31m,
                            ProductCategoryId = 14L,
                            ProductName = "Licensed Granite Shirt"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 68.64m,
                            ProductCategoryId = 15L,
                            ProductName = "Handmade Rubber Car"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 302.01m,
                            ProductCategoryId = 16L,
                            ProductName = "Ergonomic Cotton Salad"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 81.80m,
                            ProductCategoryId = 17L,
                            ProductName = "Tasty Frozen Pants"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 432.59m,
                            ProductCategoryId = 8L,
                            ProductName = "Incredible Steel Ball"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 496.53m,
                            ProductCategoryId = 9L,
                            ProductName = "Unbranded Soft Pizza"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 483.15m,
                            ProductCategoryId = 14L,
                            ProductName = "Handmade Rubber Sausages"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 653.59m,
                            ProductCategoryId = 13L,
                            ProductName = "Practical Rubber Bike"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 217.62m,
                            ProductCategoryId = 4L,
                            ProductName = "Awesome Metal Car"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 294.50m,
                            ProductCategoryId = 3L,
                            ProductName = "Incredible Soft Computer"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 251.23m,
                            ProductCategoryId = 6L,
                            ProductName = "Handmade Plastic Gloves"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 2.29m,
                            ProductCategoryId = 1L,
                            ProductName = "Small Granite Shirt"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 5.46m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Metal Table"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 615.30m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Fresh Hat"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 668.17m,
                            ProductCategoryId = 4L,
                            ProductName = "Awesome Concrete Hat"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 913.71m,
                            ProductCategoryId = 5L,
                            ProductName = "Unbranded Granite Tuna"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 14.89m,
                            ProductCategoryId = 6L,
                            ProductName = "Generic Soft Chips"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 204.07m,
                            ProductCategoryId = 7L,
                            ProductName = "Licensed Steel Gloves"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 122.58m,
                            ProductCategoryId = 8L,
                            ProductName = "Intelligent Plastic Fish"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 361.50m,
                            ProductCategoryId = 9L,
                            ProductName = "Handmade Plastic Soap"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 127.91m,
                            ProductCategoryId = 1L,
                            ProductName = "Gorgeous Concrete Fish"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 690.34m,
                            ProductCategoryId = 11L,
                            ProductName = "Generic Frozen Chicken"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 70.25m,
                            ProductCategoryId = 14L,
                            ProductName = "Licensed Plastic Shoes"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 892.14m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Granite Mouse"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 996.45m,
                            ProductCategoryId = 6L,
                            ProductName = "Sleek Fresh Soap"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 241.16m,
                            ProductCategoryId = 15L,
                            ProductName = "Licensed Metal Keyboard"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 725.36m,
                            ProductCategoryId = 2L,
                            ProductName = "Practical Rubber Ball"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 550.26m,
                            ProductCategoryId = 18L,
                            ProductName = "Unbranded Soft Tuna"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 136.55m,
                            ProductCategoryId = 4L,
                            ProductName = "Sleek Concrete Pants"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 219.02m,
                            ProductCategoryId = 15L,
                            ProductName = "Gorgeous Plastic Chair"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 387.46m,
                            ProductCategoryId = 19L,
                            ProductName = "Handmade Frozen Pants"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 919.84m,
                            ProductCategoryId = 20L,
                            ProductName = "Generic Soft Pizza"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 875.23m,
                            ProductCategoryId = 8L,
                            ProductName = "Handmade Concrete Ball"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 78.48m,
                            ProductCategoryId = 14L,
                            ProductName = "Ergonomic Plastic Bike"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 401.09m,
                            ProductCategoryId = 13L,
                            ProductName = "Small Steel Pants"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 669.45m,
                            ProductCategoryId = 19L,
                            ProductName = "Practical Granite Fish"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 425.70m,
                            ProductCategoryId = 16L,
                            ProductName = "Gorgeous Metal Bike"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 726.77m,
                            ProductCategoryId = 11L,
                            ProductName = "Unbranded Wooden Towels"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 311.04m,
                            ProductCategoryId = 13L,
                            ProductName = "Small Cotton Tuna"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Outdoors"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 444m,
                            Id = 1L,
                            Quantity = 80,
                            UnitPrice = 15.26m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 299m,
                            Id = 2L,
                            Quantity = 23,
                            UnitPrice = 858.49m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 95m,
                            Id = 3L,
                            Quantity = 87,
                            UnitPrice = 355.44m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 282m,
                            Id = 4L,
                            Quantity = 83,
                            UnitPrice = 989.16m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 957m,
                            Id = 5L,
                            Quantity = 17,
                            UnitPrice = 840.81m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 803m,
                            Id = 6L,
                            Quantity = 99,
                            UnitPrice = 837.87m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 149m,
                            Id = 7L,
                            Quantity = 75,
                            UnitPrice = 93.60m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 68m,
                            Id = 8L,
                            Quantity = 71,
                            UnitPrice = 510.83m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 109m,
                            Id = 9L,
                            Quantity = 33,
                            UnitPrice = 49.99m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 423m,
                            Id = 10L,
                            Quantity = 42,
                            UnitPrice = 526.00m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 836m,
                            Id = 11L,
                            Quantity = 66,
                            UnitPrice = 710.16m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 945m,
                            Id = 12L,
                            Quantity = 22,
                            UnitPrice = 340.03m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 556m,
                            Id = 13L,
                            Quantity = 28,
                            UnitPrice = 852.25m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 707m,
                            Id = 14L,
                            Quantity = 12,
                            UnitPrice = 483.87m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 125m,
                            Id = 15L,
                            Quantity = 91,
                            UnitPrice = 422.29m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 753m,
                            Id = 16L,
                            Quantity = 98,
                            UnitPrice = 759.85m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 872m,
                            Id = 17L,
                            Quantity = 70,
                            UnitPrice = 333.18m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 495m,
                            Id = 18L,
                            Quantity = 90,
                            UnitPrice = 563.07m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 686m,
                            Id = 19L,
                            Quantity = 66,
                            UnitPrice = 684.18m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 258m,
                            Id = 20L,
                            Quantity = 99,
                            UnitPrice = 329.77m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Dolore reiciendis qui consequatur unde quia fuga.",
                            RequestDate = new DateTime(2024, 5, 11, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4218),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "suscipit",
                            RequestDate = new DateTime(2024, 3, 2, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4332),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "dolores",
                            RequestDate = new DateTime(2024, 5, 21, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4340),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Omnis quia iure fugit nihil odit iusto dignissimos sit.",
                            RequestDate = new DateTime(2024, 5, 11, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4345),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "eveniet",
                            RequestDate = new DateTime(2024, 3, 2, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4380),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "necessitatibus",
                            RequestDate = new DateTime(2024, 5, 21, 22, 35, 20, 165, DateTimeKind.Local).AddTicks(4386),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(756),
                            ReviewText = "Impedit dolorem aspernatur vitae commodi mollitia consequuntur explicabo enim."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(857),
                            ReviewText = "Aspernatur sit sint ullam et occaecati.\nQuia nihil dignissimos sit non voluptatem hic perspiciatis enim.\nLabore ut et iusto.\nEos laudantium et et eum quis aut et suscipit.\nSunt cumque omnis velit impedit dolor quas earum.\nQuisquam rerum vitae autem recusandae."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1089),
                            ReviewText = "Voluptatem omnis veniam repellendus ut tempora nihil.\nMaxime facilis ullam.\nConsectetur suscipit natus eveniet in rerum.\nNobis et perferendis.\nCum quaerat totam vel hic ut nostrum."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1236),
                            ReviewText = "Fuga velit maxime asperiores. Dicta atque eum sit qui voluptate quaerat quo culpa numquam. Nihil eligendi facilis ab cum quibusdam adipisci aliquam. Qui ab sed minima molestiae incidunt cumque quasi doloremque reiciendis. Dignissimos qui sunt perferendis eum officia occaecati cum et."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 7, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1383),
                            ReviewText = "Praesentium enim tempora est."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 6, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1432),
                            ReviewText = "Corrupti qui dolorem esse.\nAut dolorum non.\nVoluptatibus provident corrupti et voluptas voluptas.\nSit reiciendis cupiditate nulla harum nulla.\nError voluptatem quod."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1521),
                            ReviewText = "voluptas"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1527),
                            ReviewText = "Eos in dolor ullam provident odit necessitatibus.\nUnde et nulla rerum et cupiditate enim sint.\nEum quia quidem deleniti.\nVoluptatem eum qui iure doloribus.\nAliquam dolores rerum."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1647),
                            ReviewText = "Optio et eveniet quia nesciunt qui esse vel animi laboriosam.\nHic sed cum fugiat nobis.\nHarum libero nobis nobis sit sapiente.\nOptio et alias dolores qui libero deserunt deserunt.\nEaque odit dolorum assumenda.\nDeleniti ab doloribus qui itaque cumque fugit est."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 22, 35, 20, 167, DateTimeKind.Local).AddTicks(1780),
                            ReviewText = "Molestias nihil alias ex voluptatibus corrupti sed ut laboriosam voluptatem.\nUt accusamus harum ea atque ipsam praesentium illum."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "3S2rCDwXBbeTmh3vZFW7G1g5NyKjM",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 6, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9597),
                            Status = "Sent from abroad",
                            TrackingNumber = "TPMIPRU1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "3be2iMKmqdgYkxpAaTjSZ5hyoVvQNJ4Esz",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 5, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9775),
                            Status = "Recieved from abroad",
                            TrackingNumber = "PZVIGWP1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "3YaZwCtrq4iUVAWKJ78DFEmN9uP6g",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 26, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9823),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "VQWOAEC1VEW"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1TnhaF6WbokcZGpQ1CSgzwVtJYqd",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 26, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9866),
                            Status = "delivered",
                            TrackingNumber = "DOWICDM1613"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "1oM4UDW25JzqTScykZvKadXwEhY",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 7, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9909),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "UGSUGQA1388"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "33mV17uJShytocpw8MQRUKjXxC",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 30, 22, 35, 20, 168, DateTimeKind.Local).AddTicks(9948),
                            Status = "recieved",
                            TrackingNumber = "LTPIKNQ1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1YzAyb4KGDvtwkML9uZdgrfsB8WPURQ5m1",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 15, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(28),
                            Status = "boxing",
                            TrackingNumber = "JPNUPWV1"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfLastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("productId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(353),
                            productId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(356),
                            productId = 21L
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(357),
                            productId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 4L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(358),
                            productId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 5L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(359),
                            productId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 6L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 22, 35, 20, 169, DateTimeKind.Local).AddTicks(360),
                            productId = 6L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "product")
                        .WithMany("WishLists")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
