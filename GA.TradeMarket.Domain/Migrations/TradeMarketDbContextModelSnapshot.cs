// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    partial class TradeMarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2007, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6167),
                            Points = 980
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1995, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6169),
                            Points = 171
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6171),
                            Points = 392
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2011, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6172),
                            Points = 658
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1997, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6174),
                            Points = 939
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1995, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6176),
                            Points = 338
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2023, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6177),
                            Points = 123
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2011, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6179),
                            Points = 849
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2004, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6180),
                            Points = 901
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1996, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6182),
                            Points = 136
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2023, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6184),
                            Points = 382
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2002, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6185),
                            Points = 594
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6187),
                            Points = 637
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2007, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6188),
                            Points = 438
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1999, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6191),
                            Points = 514
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6192),
                            Points = 169
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2023, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6193),
                            Points = 766
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2021, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6195),
                            Points = 799
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2022, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6197),
                            Points = 873
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(1999, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6199),
                            Points = 821
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2005, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6200),
                            Points = 726
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(1999, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6201),
                            Points = 217
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2000, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6203),
                            Points = 595
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2003, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6205),
                            Points = 172
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2006, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6206),
                            Points = 755
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2015, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6208),
                            Points = 714
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2021, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6209),
                            Points = 533
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6211),
                            Points = 753
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(1997, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6212),
                            Points = 432
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(1997, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6214),
                            Points = 795
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2002, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6215),
                            Points = 924
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2003, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(6218),
                            Points = 405
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "32fzWqaXSrEDAbecKJm5VLT6ZnY22489",
                            DiscountValue = 148m,
                            ExpiryDate = new DateTime(2025, 4, 14, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9228)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "3r1GupTfiymaNFHkgBZbwMUq9zv6R8En99296",
                            DiscountValue = 356m,
                            ExpiryDate = new DateTime(2024, 12, 17, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9324)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "1Me35tikaqf4BhGN9cPw1yxTjsEZL72025",
                            DiscountValue = 204m,
                            ExpiryDate = new DateTime(2024, 12, 4, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9359)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1a5HEwDUi3eSPkcugbrXsJ7zVM948F51572",
                            DiscountValue = 208m,
                            ExpiryDate = new DateTime(2024, 12, 19, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9413)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "35znDhY98JTdE3GZVwR6NjvtyAW85120",
                            DiscountValue = 196m,
                            ExpiryDate = new DateTime(2025, 5, 1, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9445)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3XMRzrNf7sLtGEKhe4CSowqacBiDZpn171095",
                            DiscountValue = 209m,
                            ExpiryDate = new DateTime(2025, 6, 17, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9474)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1HENaTG1gcMYKhsAUnquv79rSXpbCj4Vt83103",
                            DiscountValue = 396m,
                            ExpiryDate = new DateTime(2024, 9, 6, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9507)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1yw6ip1Hh7DFZxVzRB9QuqftMA259696",
                            DiscountValue = 100m,
                            ExpiryDate = new DateTime(2025, 8, 5, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9541)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "1bGYa7hQ8JXSK3io4q6WcszfFjrmwE97066",
                            DiscountValue = 123m,
                            ExpiryDate = new DateTime(2025, 6, 15, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9569)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "1gN6xMmUupzGaPqi2YhtS8ETCWj5v61176",
                            DiscountValue = 380m,
                            ExpiryDate = new DateTime(2025, 3, 10, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9599)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3nYeAcTi9Pbyu1sVJtLB5vGWxq35216",
                            DiscountValue = 305m,
                            ExpiryDate = new DateTime(2025, 1, 13, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9630)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "3rU64m8dgDN9Cw5T7i2enWMXckBGHbV50928",
                            DiscountValue = 100m,
                            ExpiryDate = new DateTime(2025, 8, 29, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9743)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "1ZbJV8dpC6tgDosELPUqm4STaHRXW2Fhw61754",
                            DiscountValue = 367m,
                            ExpiryDate = new DateTime(2025, 10, 6, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9776)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "1imSEocFNekBQt7qwDpHaRJgL48dUZ94159",
                            DiscountValue = 203m,
                            ExpiryDate = new DateTime(2024, 11, 19, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9809)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "1aUVMC4pBqJ9wj3Z7W1yPdD6hKmk31705",
                            DiscountValue = 133m,
                            ExpiryDate = new DateTime(2025, 8, 14, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9839)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "3vfJHKzNonbc16C2MwkS3d8jWB7588951",
                            DiscountValue = 318m,
                            ExpiryDate = new DateTime(2025, 4, 24, 15, 47, 25, 675, DateTimeKind.Local).AddTicks(9869)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 425m,
                            OperationDate = new DateTime(2023, 5, 28, 16, 47, 25, 678, DateTimeKind.Local).AddTicks(5987),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 763m,
                            OperationDate = new DateTime(2023, 6, 10, 13, 47, 25, 678, DateTimeKind.Local).AddTicks(5990),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 824m,
                            OperationDate = new DateTime(2024, 5, 15, 2, 47, 25, 678, DateTimeKind.Local).AddTicks(5992),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 542m,
                            OperationDate = new DateTime(2023, 5, 1, 0, 47, 25, 678, DateTimeKind.Local).AddTicks(5993),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 103m,
                            OperationDate = new DateTime(2023, 8, 30, 13, 47, 25, 678, DateTimeKind.Local).AddTicks(6042),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 598m,
                            OperationDate = new DateTime(2023, 10, 17, 0, 47, 25, 678, DateTimeKind.Local).AddTicks(6044),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 116m,
                            OperationDate = new DateTime(2024, 2, 27, 0, 47, 25, 678, DateTimeKind.Local).AddTicks(6046),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 770m,
                            OperationDate = new DateTime(2023, 9, 3, 11, 47, 25, 678, DateTimeKind.Local).AddTicks(6047),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 8, 15, 47, 25, 673, DateTimeKind.Local).AddTicks(6462),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "laudantium",
                            NotificationDate = new DateTime(2024, 5, 3, 20, 47, 25, 680, DateTimeKind.Local).AddTicks(5801),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "quod",
                            NotificationDate = new DateTime(2024, 5, 31, 1, 47, 25, 680, DateTimeKind.Local).AddTicks(5852),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "perferendis",
                            NotificationDate = new DateTime(2024, 6, 2, 6, 47, 25, 680, DateTimeKind.Local).AddTicks(5859),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "Aperiam dolores ipsa sint neque quaerat id deserunt. Nulla sit eveniet voluptatem ut natus consectetur ea corrupti. Ex ut excepturi. Consequuntur distinctio dolore sed voluptatibus quia. Sit nihil a non eum et. Non ipsam praesentium quia adipisci iusto.",
                            NotificationDate = new DateTime(2024, 5, 16, 6, 47, 25, 680, DateTimeKind.Local).AddTicks(5864),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "aliquam",
                            NotificationDate = new DateTime(2024, 5, 11, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(6120),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Odit dicta repellat omnis aut placeat adipisci.",
                            NotificationDate = new DateTime(2024, 5, 10, 12, 47, 25, 680, DateTimeKind.Local).AddTicks(6126),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "iste",
                            NotificationDate = new DateTime(2024, 6, 1, 8, 47, 25, 680, DateTimeKind.Local).AddTicks(6152),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "sed",
                            NotificationDate = new DateTime(2024, 5, 6, 20, 47, 25, 680, DateTimeKind.Local).AddTicks(6157),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Deleniti sunt molestiae perspiciatis dolor nisi pariatur molestiae. Voluptatibus ullam iste cum ipsum dolores. Molestiae incidunt sint facere vitae. Placeat at totam est iste delectus. Ut quaerat voluptate qui quis atque.",
                            NotificationDate = new DateTime(2024, 5, 22, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(6162),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "Repellendus dolore explicabo aut aut reiciendis consequuntur.",
                            NotificationDate = new DateTime(2024, 5, 28, 10, 47, 25, 680, DateTimeKind.Local).AddTicks(6324),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "incidunt",
                            NotificationDate = new DateTime(2024, 5, 24, 1, 47, 25, 680, DateTimeKind.Local).AddTicks(6349),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Est aut enim nam illum aut saepe molestias dolorem adipisci.\nIpsum sunt adipisci quia reprehenderit accusamus quaerat sint.\nCorrupti ut et ea.\nQuibusdam quisquam voluptas aut adipisci dicta inventore ipsa delectus ut.",
                            NotificationDate = new DateTime(2024, 5, 4, 3, 47, 25, 680, DateTimeKind.Local).AddTicks(6353),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "blanditiis",
                            NotificationDate = new DateTime(2024, 5, 11, 12, 47, 25, 680, DateTimeKind.Local).AddTicks(6579),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Nihil saepe facilis iure quam autem ut.",
                            NotificationDate = new DateTime(2024, 6, 5, 10, 47, 25, 680, DateTimeKind.Local).AddTicks(6585),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Non numquam minus quia. Laudantium ipsum a alias ea iste perferendis harum voluptates. Provident nihil et aut commodi. Sed asperiores et reiciendis voluptate distinctio ea recusandae ipsa. Dolores rerum et esse deleniti libero sed et.",
                            NotificationDate = new DateTime(2024, 6, 6, 6, 47, 25, 680, DateTimeKind.Local).AddTicks(6612),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Repudiandae ipsa similique in tempore possimus et.",
                            NotificationDate = new DateTime(2024, 6, 7, 17, 47, 25, 680, DateTimeKind.Local).AddTicks(6785),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Nobis magni aspernatur.\nAut inventore maiores culpa dolores et enim deserunt.\nMagnam est aut sit quis et incidunt harum.\nPossimus maiores officia voluptatem et mollitia ut.\nHic omnis culpa cumque qui.",
                            NotificationDate = new DateTime(2024, 5, 24, 21, 47, 25, 680, DateTimeKind.Local).AddTicks(6812),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Deleniti commodi tempora ex unde.\nDicta amet sit est similique et vitae.\nMolestiae quae itaque repudiandae vel tempora.\nNostrum asperiores non omnis et quo molestiae quis.",
                            NotificationDate = new DateTime(2024, 5, 15, 11, 47, 25, 680, DateTimeKind.Local).AddTicks(6911),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 17, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7270),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 6, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7273),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 23, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7274),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 16, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7275),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 17, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7277),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 16, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7278),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 25, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7279),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 31, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7281),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 22, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7282),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 4, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7283),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 11, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7285),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 22, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7286),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 7, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7288),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 6, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7289),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 29, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7290),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 14, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7292),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 29, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7293),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 5, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7294),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 12, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7296),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 1, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7297),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 5, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7298),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 24, 15, 47, 25, 680, DateTimeKind.Local).AddTicks(7300),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 880m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 25, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1614),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 792m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 21, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1619),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 189m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 3, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1621),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 784m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 21, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1623),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 654m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 5, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1625),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 651m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 3, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1627),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 720m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 18, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1629),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 969m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 25, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1631),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 393m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 27, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1633),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 637m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 18, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1635),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 54m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 16, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1637),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 326m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 28, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1639),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 813m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 23, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1640),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 675m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 21, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1642),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 951m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 10, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1644),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 32m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 28, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1646),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 867m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 21, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1647),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 562m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 12, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1649),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "853",
                            CardHolderName = "Mac Ullrich",
                            CardNumber = "4091-0430-1072-9798",
                            ExpiryDate = new DateTime(2028, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(4846)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "412",
                            CardHolderName = "Candace Emmerich",
                            CardNumber = "6767-2531-7454-9671-399",
                            ExpiryDate = new DateTime(2030, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(5183)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "324",
                            CardHolderName = "Fausto Klein",
                            CardNumber = "3529-6406-2408-9735",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(5494)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "892",
                            CardHolderName = "Maida Tremblay",
                            CardNumber = "6759-1447-0415-8700-38",
                            ExpiryDate = new DateTime(2032, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(5875)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "560",
                            CardHolderName = "Clifford Marquardt",
                            CardNumber = "4340467248775",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(6153)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "874",
                            CardHolderName = "Nat Torphy",
                            CardNumber = "6767-3353-6851-9879-37",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(6493)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "295",
                            CardHolderName = "Demetris White",
                            CardNumber = "6399-6981-3821-4637",
                            ExpiryDate = new DateTime(2033, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(6850)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "840",
                            CardHolderName = "Stefan Beatty",
                            CardNumber = "3787-217336-96319",
                            ExpiryDate = new DateTime(2033, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(7154)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "402",
                            CardHolderName = "Amparo Connelly",
                            CardNumber = "6480-6245-7808-1022-7970",
                            ExpiryDate = new DateTime(2033, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(7542)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "178",
                            CardHolderName = "Bud Mann",
                            CardNumber = "3542-9048-0207-4908",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(7876)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "595",
                            CardHolderName = "Sean Christiansen",
                            CardNumber = "6378-7639-1089-6632",
                            ExpiryDate = new DateTime(2029, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(8167)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "713",
                            CardHolderName = "Clement Hyatt",
                            CardNumber = "6371-7072-8372-2328",
                            ExpiryDate = new DateTime(2029, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(8457)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "392",
                            CardHolderName = "Mariana Boyle",
                            CardNumber = "6767-2910-2156-8033-15",
                            ExpiryDate = new DateTime(2030, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(8834)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "672",
                            CardHolderName = "Guadalupe Hahn",
                            CardNumber = "3053-613906-8537",
                            ExpiryDate = new DateTime(2030, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(9151)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "643",
                            CardHolderName = "Keshawn Prosacco",
                            CardNumber = "6767-0234-7748-9134",
                            ExpiryDate = new DateTime(2030, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(9387)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "338",
                            CardHolderName = "Antonette O'Kon",
                            CardNumber = "6771-8947-5867-6811",
                            ExpiryDate = new DateTime(2026, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(9711)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "602",
                            CardHolderName = "Ola Wolff",
                            CardNumber = "3719-814363-60095",
                            ExpiryDate = new DateTime(2026, 6, 8, 15, 47, 25, 682, DateTimeKind.Local).AddTicks(9972)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "000",
                            CardHolderName = "Cleora Gutmann",
                            CardNumber = "6767-2917-9614-9195-413",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(246)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "542",
                            CardHolderName = "Anahi Kemmer",
                            CardNumber = "6381-3931-0214-8686",
                            ExpiryDate = new DateTime(2029, 6, 8, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(528)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "437",
                            CardHolderName = "Abraham Kling",
                            CardNumber = "5020951754450285",
                            ExpiryDate = new DateTime(2031, 6, 8, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(836)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "254",
                            CardHolderName = "Sonia Cummerata",
                            CardNumber = "3529-8199-9607-3432",
                            ExpiryDate = new DateTime(2029, 6, 8, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1095)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "882",
                            CardHolderName = "Gerhard Gleason",
                            CardNumber = "3756-980509-55838",
                            ExpiryDate = new DateTime(2030, 6, 8, 15, 47, 25, 683, DateTimeKind.Local).AddTicks(1381)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4e018283-84b1-4f71-b357-c83a8d3198e7",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "guram.apkhazava908@ens.tsu.ge",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAECzJPfeOrrgQ/mEuZCtdk5zzoIJACCRbHv6aqFkzUsVACgsG4KfmT3ka9hgzx0TKfg==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a50b72b4-a239-40c5-9bec-61963df74908",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1971, 6, 8, 15, 47, 25, 676, DateTimeKind.Local).AddTicks(2052),
                            ConcurrencyStamp = "812ec7e0-3eff-4675-a11e-5e4857117cef",
                            Email = "asa@upton.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Davis",
                            PhoneNumber = "(486)050-5601 x270",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19f104e8-5aa0-4e5b-8d57-07b90d9b435f",
                            Surname = "Grant",
                            TwoFactorEnabled = false,
                            UserName = "alayna_ryan"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1993, 6, 8, 15, 47, 25, 676, DateTimeKind.Local).AddTicks(5325),
                            ConcurrencyStamp = "073eeba5-964c-4b49-bbe2-87e0ea87211a",
                            Email = "paige@ryanrempel.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Heaney",
                            PhoneNumber = "320.399.9859",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0abfd361-44ee-46a8-93ed-34070f0c8334",
                            Surname = "Okuneva",
                            TwoFactorEnabled = false,
                            UserName = "zoey.wolff"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1969, 6, 8, 15, 47, 25, 676, DateTimeKind.Local).AddTicks(8331),
                            ConcurrencyStamp = "eb3ac95a-46a3-450a-bd5c-99271e2db70d",
                            Email = "gwendolyn@cronasatterfield.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bosco",
                            PhoneNumber = "(288)976-3076 x160",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e18757fe-4f59-4cbc-a2da-00f974874c14",
                            Surname = "Wunsch",
                            TwoFactorEnabled = false,
                            UserName = "lennie.effertz"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2009, 6, 8, 15, 47, 25, 677, DateTimeKind.Local).AddTicks(1899),
                            ConcurrencyStamp = "0cfb3cb3-93f4-48fe-954e-b02c5c080713",
                            Email = "reed.prosacco@schumm.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rutherford",
                            PhoneNumber = "1-880-162-8684",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13638485-aa01-484e-b9bc-a129fb5d64d7",
                            Surname = "Pfeffer",
                            TwoFactorEnabled = false,
                            UserName = "skye.welch"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1994, 6, 8, 15, 47, 25, 677, DateTimeKind.Local).AddTicks(5048),
                            ConcurrencyStamp = "9fb90562-5de5-40b8-a777-c24d20853e11",
                            Email = "nayeli.hamill@kuphalcorwin.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lebsack",
                            PhoneNumber = "(632)680-3635",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f255fff-4623-40ca-8ef4-bbec6684cf5a",
                            Surname = "Parisian",
                            TwoFactorEnabled = false,
                            UserName = "mia"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2003, 6, 8, 15, 47, 25, 677, DateTimeKind.Local).AddTicks(8317),
                            ConcurrencyStamp = "2ca74fef-c5d6-4498-97a3-b62f7eda431c",
                            Email = "dax@beatty.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Carroll",
                            PhoneNumber = "354-678-0064 x809",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1907c7c-bf0e-4190-8971-3a827b0cfb65",
                            Surname = "Rath",
                            TwoFactorEnabled = false,
                            UserName = "lou"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2006, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(1149),
                            ConcurrencyStamp = "b932f5ed-11f0-4d2e-91d1-2ab8d6f347bf",
                            Email = "minerva@adams.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Rath",
                            PhoneNumber = "1-568-960-6125 x0345",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "982f9ee3-4810-49ee-930d-40055ce02c45",
                            Surname = "McCullough",
                            TwoFactorEnabled = false,
                            UserName = "dovie_ferry"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1976, 6, 8, 15, 47, 25, 678, DateTimeKind.Local).AddTicks(4445),
                            ConcurrencyStamp = "2a208d77-0439-4d80-8c7b-4db0ec48d108",
                            Email = "wyman.borer@mcglynnkiehn.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Homenick",
                            PhoneNumber = "1-811-494-1863",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b9ad071-3d44-48d3-b115-306fdade489e",
                            Surname = "D'Amore",
                            TwoFactorEnabled = false,
                            UserName = "meaghan"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 764.29m,
                            ProductCategoryId = 1L,
                            ProductName = "Rustic Plastic Bacon"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 983.33m,
                            ProductCategoryId = 2L,
                            ProductName = "Practical Granite Salad"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 259.88m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Concrete Bike"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 237.72m,
                            ProductCategoryId = 4L,
                            ProductName = "Ergonomic Metal Chicken"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 803.82m,
                            ProductCategoryId = 5L,
                            ProductName = "Generic Rubber Mouse"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 651.92m,
                            ProductCategoryId = 6L,
                            ProductName = "Refined Fresh Fish"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 616.15m,
                            ProductCategoryId = 7L,
                            ProductName = "Fantastic Rubber Table"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 446.36m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Concrete Sausages"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 25.19m,
                            ProductCategoryId = 9L,
                            ProductName = "Gorgeous Metal Gloves"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 261.01m,
                            ProductCategoryId = 1L,
                            ProductName = "Rustic Fresh Towels"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 876.04m,
                            ProductCategoryId = 3L,
                            ProductName = "Rustic Wooden Salad"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 54.38m,
                            ProductCategoryId = 4L,
                            ProductName = "Fantastic Steel Hat"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 114.35m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Fresh Hat"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 21.92m,
                            ProductCategoryId = 6L,
                            ProductName = "Small Frozen Mouse"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 654.00m,
                            ProductCategoryId = 11L,
                            ProductName = "Intelligent Fresh Tuna"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 390.39m,
                            ProductCategoryId = 12L,
                            ProductName = "Gorgeous Fresh Shirt"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 459.20m,
                            ProductCategoryId = 13L,
                            ProductName = "Incredible Steel Ball"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 886.35m,
                            ProductCategoryId = 14L,
                            ProductName = "Rustic Fresh Soap"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 158.65m,
                            ProductCategoryId = 15L,
                            ProductName = "Intelligent Cotton Salad"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 681.98m,
                            ProductCategoryId = 16L,
                            ProductName = "Sleek Granite Salad"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 381.80m,
                            ProductCategoryId = 17L,
                            ProductName = "Small Frozen Mouse"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 284.46m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Steel Salad"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 128.11m,
                            ProductCategoryId = 9L,
                            ProductName = "Tasty Plastic Mouse"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 148.46m,
                            ProductCategoryId = 14L,
                            ProductName = "Licensed Wooden Computer"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 304.65m,
                            ProductCategoryId = 13L,
                            ProductName = "Incredible Metal Chips"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 505.11m,
                            ProductCategoryId = 4L,
                            ProductName = "Handmade Granite Sausages"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 982.04m,
                            ProductCategoryId = 3L,
                            ProductName = "Tasty Frozen Pizza"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 621.44m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Cotton Keyboard"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 810.13m,
                            ProductCategoryId = 1L,
                            ProductName = "Small Soft Cheese"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 999.30m,
                            ProductCategoryId = 2L,
                            ProductName = "Handcrafted Cotton Hat"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 457.89m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Cotton Fish"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 910.37m,
                            ProductCategoryId = 4L,
                            ProductName = "Incredible Rubber Ball"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 82.74m,
                            ProductCategoryId = 5L,
                            ProductName = "Licensed Steel Bacon"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 648.96m,
                            ProductCategoryId = 6L,
                            ProductName = "Tasty Plastic Soap"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 512.78m,
                            ProductCategoryId = 7L,
                            ProductName = "Handcrafted Concrete Soap"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 656.64m,
                            ProductCategoryId = 8L,
                            ProductName = "Gorgeous Metal Computer"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 483.74m,
                            ProductCategoryId = 9L,
                            ProductName = "Incredible Cotton Shirt"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 118.55m,
                            ProductCategoryId = 1L,
                            ProductName = "Tasty Steel Bike"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 392.67m,
                            ProductCategoryId = 11L,
                            ProductName = "Rustic Cotton Chips"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 342.32m,
                            ProductCategoryId = 14L,
                            ProductName = "Intelligent Frozen Chips"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 160.08m,
                            ProductCategoryId = 3L,
                            ProductName = "Awesome Granite Car"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 8.46m,
                            ProductCategoryId = 6L,
                            ProductName = "Rustic Metal Sausages"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 952.38m,
                            ProductCategoryId = 15L,
                            ProductName = "Practical Granite Sausages"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 414.74m,
                            ProductCategoryId = 2L,
                            ProductName = "Refined Steel Chicken"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 680.08m,
                            ProductCategoryId = 18L,
                            ProductName = "Ergonomic Fresh Salad"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 163.65m,
                            ProductCategoryId = 4L,
                            ProductName = "Generic Frozen Ball"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 490.97m,
                            ProductCategoryId = 15L,
                            ProductName = "Licensed Cotton Shoes"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 195.46m,
                            ProductCategoryId = 19L,
                            ProductName = "Ergonomic Fresh Salad"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 608.05m,
                            ProductCategoryId = 20L,
                            ProductName = "Ergonomic Fresh Cheese"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 2.55m,
                            ProductCategoryId = 8L,
                            ProductName = "Fantastic Concrete Sausages"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 292.47m,
                            ProductCategoryId = 14L,
                            ProductName = "Refined Concrete Chicken"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 628.21m,
                            ProductCategoryId = 13L,
                            ProductName = "Sleek Metal Shirt"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 432.92m,
                            ProductCategoryId = 19L,
                            ProductName = "Intelligent Wooden Chair"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 192.06m,
                            ProductCategoryId = 16L,
                            ProductName = "Licensed Steel Gloves"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 144.83m,
                            ProductCategoryId = 11L,
                            ProductName = "Small Wooden Shoes"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 335.16m,
                            ProductCategoryId = 13L,
                            ProductName = "Practical Frozen Chair"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Books"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Music"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 545m,
                            Id = 1L,
                            Quantity = 75,
                            UnitPrice = 556.25m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 577m,
                            Id = 2L,
                            Quantity = 70,
                            UnitPrice = 695.01m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 832m,
                            Id = 3L,
                            Quantity = 72,
                            UnitPrice = 647.47m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 67m,
                            Id = 4L,
                            Quantity = 22,
                            UnitPrice = 601.39m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 538m,
                            Id = 5L,
                            Quantity = 79,
                            UnitPrice = 526.76m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 433m,
                            Id = 6L,
                            Quantity = 44,
                            UnitPrice = 887.16m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 247m,
                            Id = 7L,
                            Quantity = 76,
                            UnitPrice = 999.32m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 246m,
                            Id = 8L,
                            Quantity = 15,
                            UnitPrice = 49.85m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 771m,
                            Id = 9L,
                            Quantity = 17,
                            UnitPrice = 170.67m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 708m,
                            Id = 10L,
                            Quantity = 68,
                            UnitPrice = 417.57m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 975m,
                            Id = 11L,
                            Quantity = 27,
                            UnitPrice = 1.85m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 562m,
                            Id = 12L,
                            Quantity = 45,
                            UnitPrice = 110.06m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 121m,
                            Id = 13L,
                            Quantity = 20,
                            UnitPrice = 541.97m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 883m,
                            Id = 14L,
                            Quantity = 87,
                            UnitPrice = 83.65m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 147m,
                            Id = 15L,
                            Quantity = 16,
                            UnitPrice = 472.91m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 612m,
                            Id = 16L,
                            Quantity = 56,
                            UnitPrice = 92.74m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 544m,
                            Id = 17L,
                            Quantity = 53,
                            UnitPrice = 672.46m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 557m,
                            Id = 18L,
                            Quantity = 24,
                            UnitPrice = 664.36m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 242m,
                            Id = 19L,
                            Quantity = 92,
                            UnitPrice = 915.86m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 489m,
                            Id = 20L,
                            Quantity = 78,
                            UnitPrice = 412.98m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "odio",
                            RequestDate = new DateTime(2024, 5, 9, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8135),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "ut",
                            RequestDate = new DateTime(2024, 2, 29, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8183),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Laborum odit asperiores omnis.",
                            RequestDate = new DateTime(2024, 5, 19, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8191),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Esse recusandae et commodi dolorum officiis.",
                            RequestDate = new DateTime(2024, 5, 9, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8257),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Earum ea veritatis non facilis qui qui laudantium.",
                            RequestDate = new DateTime(2024, 2, 29, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8283),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "aliquid",
                            RequestDate = new DateTime(2024, 5, 19, 15, 47, 25, 689, DateTimeKind.Local).AddTicks(8315),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 24, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(2438),
                            ReviewText = "Amet tenetur tempora iure nulla. Ut aut a delectus quis quibusdam eaque. Mollitia molestiae cupiditate maiores autem tempora."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 15, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(2624),
                            ReviewText = "Aspernatur et eius quo commodi in deleniti. Reprehenderit dolorem quam. Praesentium tempore possimus qui quia molestiae et sapiente animi ullam."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 16, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(2750),
                            ReviewText = "Amet ut explicabo voluptatum ut velit dolorem. Expedita molestiae veritatis sint rerum laboriosam recusandae qui sit nulla. Sit vitae et et magni mollitia nesciunt sed sit atque. Debitis rerum qui odit totam est. Quod voluptate cumque culpa voluptas eos vitae expedita dolorum consequatur."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 6, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(2900),
                            ReviewText = "Expedita harum facere dolores qui. Officiis eum optio qui harum voluptatem. Aperiam laudantium voluptatem ut quos dolores fugit illo accusamus consequuntur. Quo asperiores assumenda. Enim possimus libero eaque. Rerum aliquid aut."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 5, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3039),
                            ReviewText = "Eveniet consequatur non id commodi molestiae molestiae aut. Sapiente incidunt veritatis consequatur voluptas libero dolor. Excepturi est laborum alias ut excepturi minima ex. Est in optio aut nobis aut tenetur voluptas fugiat suscipit. Non odio ut rerum quis laboriosam et eveniet reprehenderit dolores. Nostrum est officia modi voluptatum alias hic."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 4, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3225),
                            ReviewText = "Molestias atque quis optio facere."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 24, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3243),
                            ReviewText = "provident"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 15, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3249),
                            ReviewText = "Sint at quod magni pariatur ad excepturi ea omnis labore."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 16, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3279),
                            ReviewText = "quibusdam"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 6, 15, 47, 25, 691, DateTimeKind.Local).AddTicks(3284),
                            ReviewText = "Ut est ipsum voluptatem voluptas eius."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "33AKbiWwDSNvpq59R82GxuhBcVy7H",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 4, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7610),
                            Status = "Sent from abroad",
                            TrackingNumber = "CKWICII1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "32kS6GtncXQHD3zhmdgTeFYiPMBRvsf",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 3, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7764),
                            Status = "Recieved from abroad",
                            TrackingNumber = "ITSOMSY1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "17L2CeS8BaqyzHXnhuEoPgiQjxUMNtw6",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 24, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7806),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "WJDUBOP1"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "39pvAsHNGtri1oxk3TKYCDQBz7W",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 24, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7844),
                            Status = "delivered",
                            TrackingNumber = "NFBEEAL1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "3Nf4bB3ijeHT52AvSJpDXaUGKyWV",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 5, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7878),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "JXUOBLP1252"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "11VUuTQziBD5eWm3xnGovsYyH42aFSt8ZR",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 28, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7916),
                            Status = "recieved",
                            TrackingNumber = "WEYOLYE1327"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "3YCN1R2sDrS9BTPobUdFLMHnXAhw4v",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 13, 15, 47, 25, 692, DateTimeKind.Local).AddTicks(7960),
                            Status = "boxing",
                            TrackingNumber = "KQLECAH1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
