// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    partial class TradeMarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2003, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9221),
                            Points = 818
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2006, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9226),
                            Points = 959
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1997, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9228),
                            Points = 863
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2018, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9229),
                            Points = 294
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2000, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9231),
                            Points = 264
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1999, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9233),
                            Points = 911
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1997, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9235),
                            Points = 232
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1999, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9237),
                            Points = 931
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2014, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9238),
                            Points = 975
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1997, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9240),
                            Points = 474
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2010, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9241),
                            Points = 526
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1998, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9243),
                            Points = 121
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2011, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9247),
                            Points = 541
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2014, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9249),
                            Points = 834
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9251),
                            Points = 768
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2008, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(9253),
                            Points = 617
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1uA6vTaJePcs82Lypwrxo4EYSX7n28045",
                            DiscountValue = 399m,
                            ExpiryDate = new DateTime(2024, 9, 1, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(3845)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "16YqgVJQHLAmt7MKznsShRf5ejD2uTa83Ur71341",
                            DiscountValue = 301m,
                            ExpiryDate = new DateTime(2024, 9, 12, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(3944)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3ub7g8jaDSPBFTvZnKYG3eoq1kVmCEiAWX87548",
                            DiscountValue = 117m,
                            ExpiryDate = new DateTime(2024, 7, 28, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(3984)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1ZTLXgojScU4apeWEQtNFVdy3s89511",
                            DiscountValue = 201m,
                            ExpiryDate = new DateTime(2025, 5, 3, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(4022)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1T8sPEHkDWUCxRQXu4ApKcoFJejdYi23238",
                            DiscountValue = 292m,
                            ExpiryDate = new DateTime(2025, 8, 23, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(4053)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "3r4KvbMDwzfJp7tqXL9gsyiFRoESYG47065",
                            DiscountValue = 175m,
                            ExpiryDate = new DateTime(2025, 2, 10, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(4084)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1pTZw4La36ft8NdyK2qrMWPJvniYjeXoQ977256",
                            DiscountValue = 101m,
                            ExpiryDate = new DateTime(2025, 8, 25, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(4116)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "37toGN6eDqwWX5xafQLAgFKuVpdcBvE25242",
                            DiscountValue = 340m,
                            ExpiryDate = new DateTime(2024, 12, 21, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(4183)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 137m,
                            OperationDate = new DateTime(2023, 4, 30, 0, 41, 37, 960, DateTimeKind.Local).AddTicks(9061),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 441m,
                            OperationDate = new DateTime(2023, 6, 7, 2, 41, 37, 960, DateTimeKind.Local).AddTicks(9066),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 674m,
                            OperationDate = new DateTime(2024, 3, 29, 21, 41, 37, 960, DateTimeKind.Local).AddTicks(9068),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 754m,
                            OperationDate = new DateTime(2023, 12, 30, 0, 41, 37, 960, DateTimeKind.Local).AddTicks(9070),
                            PersonId = "4"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 3, 11, 41, 37, 957, DateTimeKind.Local).AddTicks(918),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Message = "Esse maxime ut nihil ullam ullam ratione facilis ut rerum. Qui nobis suscipit totam perferendis quis. Deserunt numquam in. Repudiandae consequuntur ex quis ipsam consequatur sit qui.",
                            NotificationDate = new DateTime(2024, 5, 4, 16, 41, 37, 962, DateTimeKind.Local).AddTicks(7286),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Message = "Eligendi voluptas modi architecto.\nLabore qui incidunt adipisci perferendis reprehenderit harum et voluptatem tenetur.\nIste voluptatum et sit et nobis dolorem mollitia nesciunt.",
                            NotificationDate = new DateTime(2024, 4, 23, 12, 41, 37, 962, DateTimeKind.Local).AddTicks(7503),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Message = "Veritatis est sit et esse.\nBeatae aut pariatur vero totam.\nAssumenda reprehenderit tenetur reprehenderit optio enim exercitationem eum eius corrupti.",
                            NotificationDate = new DateTime(2024, 5, 23, 15, 41, 37, 962, DateTimeKind.Local).AddTicks(7622),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Message = "consequatur",
                            NotificationDate = new DateTime(2024, 5, 20, 0, 41, 37, 962, DateTimeKind.Local).AddTicks(7693),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Message = "Delectus dolores porro voluptates perspiciatis aspernatur.\nMolestiae facere ut illo vero.\nEa quam vitae.\nEa aspernatur maxime laudantium.\nEst consequuntur tempora aut quibusdam.\nRerum numquam pariatur voluptatem ut sequi harum eaque enim.",
                            NotificationDate = new DateTime(2024, 5, 9, 10, 41, 37, 962, DateTimeKind.Local).AddTicks(7701),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            Message = "Aut et eum non saepe molestiae.\nBeatae molestiae possimus quia modi debitis illo.\nSequi autem a id beatae provident eos nemo.\nRerum voluptas dignissimos quas voluptatibus ratione sed.",
                            NotificationDate = new DateTime(2024, 5, 9, 10, 41, 37, 962, DateTimeKind.Local).AddTicks(7843),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            Message = "Quam rerum ipsa.",
                            NotificationDate = new DateTime(2024, 4, 28, 0, 41, 37, 962, DateTimeKind.Local).AddTicks(7930),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Message = "mollitia",
                            NotificationDate = new DateTime(2024, 5, 18, 10, 41, 37, 962, DateTimeKind.Local).AddTicks(7945),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Message = "Quasi ab consectetur laudantium aliquid ea modi sit amet dolorum.",
                            NotificationDate = new DateTime(2024, 5, 19, 4, 41, 37, 962, DateTimeKind.Local).AddTicks(7949),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 5, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8235),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 2, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8239),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 13, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8240),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 12, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8241),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 14, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8243),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 23, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8244),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 7, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8245),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 15, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8246),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 5, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8248),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 26, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8249),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 24, 11, 41, 37, 962, DateTimeKind.Local).AddTicks(8250),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 173m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 13, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1876),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 61m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 18, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1882),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 128m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 26, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1884),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 678m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 8, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1886),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 672m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 28, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2018),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 482m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 19, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2022),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 261m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 8, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2025),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 211m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 11, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2026),
                            PaymentMethod = "ATM",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 710m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 9, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2028),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 958m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 21, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2030),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 633m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 26, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2032),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 932m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 7, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2034),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 416m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 7, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2035),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 900m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 17, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2037),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 531m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 20, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2039),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 761m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 5, 17, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2041),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 153m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 20, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2042),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 470m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 27, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(2044),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "950",
                            CardHolderName = "Checking Account",
                            CardNumber = "4730544558156",
                            ExpiryDate = new DateTime(2028, 6, 3, 11, 41, 37, 964, DateTimeKind.Local).AddTicks(8298)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "833",
                            CardHolderName = "Auto Loan Account",
                            CardNumber = "5893-5372-0419-8147",
                            ExpiryDate = new DateTime(2029, 6, 3, 11, 41, 37, 964, DateTimeKind.Local).AddTicks(8842)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "809",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6371-0774-8778-2712",
                            ExpiryDate = new DateTime(2031, 6, 3, 11, 41, 37, 964, DateTimeKind.Local).AddTicks(9198)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "313",
                            CardHolderName = "Home Loan Account",
                            CardNumber = "630480392961380395",
                            ExpiryDate = new DateTime(2030, 6, 3, 11, 41, 37, 964, DateTimeKind.Local).AddTicks(9552)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "855",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "6398-1435-0157-0688",
                            ExpiryDate = new DateTime(2033, 6, 3, 11, 41, 37, 964, DateTimeKind.Local).AddTicks(9831)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "064",
                            CardHolderName = "Auto Loan Account",
                            CardNumber = "5496-3702-8837-9784",
                            ExpiryDate = new DateTime(2028, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(119)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "004",
                            CardHolderName = "Checking Account",
                            CardNumber = "5018-6006-4595-7586",
                            ExpiryDate = new DateTime(2028, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(454)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "991",
                            CardHolderName = "Home Loan Account",
                            CardNumber = "503857965446820103",
                            ExpiryDate = new DateTime(2033, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(768)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "105",
                            CardHolderName = "Credit Card Account",
                            CardNumber = "3025-327783-9998",
                            ExpiryDate = new DateTime(2030, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1031)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "283",
                            CardHolderName = "Personal Loan Account",
                            CardNumber = "6389-7027-5299-9200",
                            ExpiryDate = new DateTime(2030, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1315)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "350",
                            CardHolderName = "Home Loan Account",
                            CardNumber = "3672-941324-1516",
                            ExpiryDate = new DateTime(2026, 6, 3, 11, 41, 37, 965, DateTimeKind.Local).AddTicks(1624)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1978, 6, 3, 11, 41, 37, 959, DateTimeKind.Local).AddTicks(8263),
                            ConcurrencyStamp = "402dda98-d6ab-442b-88cc-2a9cdebad8d3",
                            Email = "wilhelm@gorczany.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dickens",
                            PhoneNumber = "1-040-615-3177 x9410",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75788046-a24d-4d31-93a6-04eed62bffec",
                            Surname = "Bartell",
                            TwoFactorEnabled = false,
                            UserName = "rene"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2010, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(1542),
                            ConcurrencyStamp = "8c72a89e-505a-4368-a427-1b3e654944ca",
                            Email = "carter_grady@moen.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pouros",
                            PhoneNumber = "529.852.8131",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6e29e2c-4822-4371-9165-95cca2f532b0",
                            Surname = "Keeling",
                            TwoFactorEnabled = false,
                            UserName = "maymie.spencer"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2006, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(4624),
                            ConcurrencyStamp = "157f608b-0b48-4c91-9f1c-f886782b6301",
                            Email = "xavier@bodelindgren.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Murphy",
                            PhoneNumber = "(660)907-2031",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ebb8cee-dcab-4a34-91f3-310257a54bdc",
                            Surname = "Ruecker",
                            TwoFactorEnabled = false,
                            UserName = "berneice"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1980, 6, 3, 11, 41, 37, 960, DateTimeKind.Local).AddTicks(7612),
                            ConcurrencyStamp = "cd7c9ec2-7a12-4a8e-9233-f18fa90891e9",
                            Email = "cyrus@hermanvon.name",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Orn",
                            PhoneNumber = "(806)707-4387 x17877",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6704b07a-3784-4274-847e-578f3955cd8f",
                            Surname = "Swift",
                            TwoFactorEnabled = false,
                            UserName = "garrison"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "927c8b1f-4fa5-4cd2-9f5b-ab4107337f9a",
                            Email = "aapkhazava22@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "AAPKHAZAVA22@GMAIL.COM",
                            NormalizedUserName = "GUGAADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFo6Z24/XqJKLPJatRxYDr4a9qbTKOJHMHLpZDoKaO3ZKKimFqQ5qguPPMAE4w4oGA==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bfeab9ee-16bf-4621-89c9-3eafb856f928",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "gugaadmin"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 0.0129699856136830m,
                            ProductCategoryId = 1L,
                            ProductName = "Intelligent Concrete Chips"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 0.3555568640360720m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Rubber Soap"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 0.004038397762760490m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Plastic Chicken"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 0.9992389100676840m,
                            ProductCategoryId = 4L,
                            ProductName = "Practical Steel Gloves"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 0.6683573599777520m,
                            ProductCategoryId = 5L,
                            ProductName = "Fantastic Metal Tuna"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 0.01730201501701980m,
                            ProductCategoryId = 6L,
                            ProductName = "Tasty Soft Keyboard"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 0.5359801440196420m,
                            ProductCategoryId = 7L,
                            ProductName = "Rustic Cotton Bike"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 0.435189068318830m,
                            ProductCategoryId = 8L,
                            ProductName = "Handmade Soft Towels"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 0.3674693376314080m,
                            ProductCategoryId = 9L,
                            ProductName = "Awesome Steel Fish"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 0.06900564782519450m,
                            ProductCategoryId = 1L,
                            ProductName = "Generic Cotton Keyboard"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 0.7886830890714540m,
                            ProductCategoryId = 3L,
                            ProductName = "Gorgeous Frozen Bike"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 0.1976677669688450m,
                            ProductCategoryId = 4L,
                            ProductName = "Unbranded Rubber Keyboard"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 0.5519519108423630m,
                            ProductCategoryId = 3L,
                            ProductName = "Handcrafted Frozen Table"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 0.4717061806907380m,
                            ProductCategoryId = 6L,
                            ProductName = "Sleek Wooden Chips"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 0.4640248442858550m,
                            ProductCategoryId = 1L,
                            ProductName = "Fantastic Wooden Chips"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 0.1042292973202090m,
                            ProductCategoryId = 2L,
                            ProductName = "Generic Metal Fish"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 0.2195606554307940m,
                            ProductCategoryId = 3L,
                            ProductName = "Small Plastic Computer"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 0.9467363243381990m,
                            ProductCategoryId = 4L,
                            ProductName = "Handcrafted Concrete Cheese"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 0.2839471388732690m,
                            ProductCategoryId = 5L,
                            ProductName = "Practical Granite Chips"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 0.3391831432528340m,
                            ProductCategoryId = 6L,
                            ProductName = "Handcrafted Concrete Sausages"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 0.72640342628690m,
                            ProductCategoryId = 7L,
                            ProductName = "Unbranded Granite Bike"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 0.0970971719747950m,
                            ProductCategoryId = 8L,
                            ProductName = "Tasty Cotton Car"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 0.8985232892851620m,
                            ProductCategoryId = 9L,
                            ProductName = "Fantastic Wooden Salad"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 0.603822614543830m,
                            ProductCategoryId = 1L,
                            ProductName = "Incredible Frozen Table"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 0.3251882754769910m,
                            ProductCategoryId = 3L,
                            ProductName = "Practical Concrete Mouse"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 0.7445148215674250m,
                            ProductCategoryId = 4L,
                            ProductName = "Gorgeous Soft Shoes"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 0.2887609816963020m,
                            ProductCategoryId = 3L,
                            ProductName = "Fantastic Wooden Chips"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 0.06970529727610560m,
                            ProductCategoryId = 6L,
                            ProductName = "Rustic Fresh Sausages"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Toys"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Grocery"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 495m,
                            Id = 1L,
                            Quantity = 62,
                            UnitPrice = 151.82m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 179m,
                            Id = 2L,
                            Quantity = 87,
                            UnitPrice = 29.04m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 984m,
                            Id = 3L,
                            Quantity = 73,
                            UnitPrice = 640.80m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 799m,
                            Id = 4L,
                            Quantity = 76,
                            UnitPrice = 239.86m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 561m,
                            Id = 5L,
                            Quantity = 63,
                            UnitPrice = 966.92m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 450m,
                            Id = 6L,
                            Quantity = 23,
                            UnitPrice = 305.67m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 204m,
                            Id = 7L,
                            Quantity = 28,
                            UnitPrice = 186.24m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 335m,
                            Id = 8L,
                            Quantity = 58,
                            UnitPrice = 886.01m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 842m,
                            Id = 9L,
                            Quantity = 73,
                            UnitPrice = 558.88m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 127m,
                            Id = 10L,
                            Quantity = 56,
                            UnitPrice = 812.47m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "et",
                            RequestDate = new DateTime(2024, 5, 4, 11, 41, 37, 971, DateTimeKind.Local).AddTicks(2926),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Nesciunt similique ea culpa amet.\nDelectus sequi quisquam molestias.\nVitae voluptas facere qui nemo atque quidem aut velit.\nFugit nobis totam ab vel.\nEum et sit et quia asperiores quod sed.",
                            RequestDate = new DateTime(2024, 2, 24, 11, 41, 37, 971, DateTimeKind.Local).AddTicks(2969),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Quo esse possimus aperiam assumenda inventore nulla error nihil officia. Similique maxime consequuntur. Nam ratione quo ipsa est. Dicta esse alias rem.",
                            RequestDate = new DateTime(2024, 5, 14, 11, 41, 37, 971, DateTimeKind.Local).AddTicks(3202),
                            Status = "Declined"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 19, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8309),
                            ReviewText = "error"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 10, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8345),
                            ReviewText = "distinctio"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 11, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8352),
                            ReviewText = "Quos voluptatem saepe delectus ut labore non vero earum provident."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 1, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8423),
                            ReviewText = "veritatis"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 4, 30, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8430),
                            ReviewText = "Maiores culpa exercitationem.\nFugit optio consectetur modi asperiores libero illum nihil natus excepturi."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 4, 29, 11, 41, 37, 972, DateTimeKind.Local).AddTicks(8490),
                            ReviewText = "odit"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "3E12ri7yQcJqszWNpgekj8YS9P",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 5, 30, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3574),
                            Status = "Sent from abroad",
                            TrackingNumber = "UMNOCST1002"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "354kuJ3EqV1nTYHfZzRvPgoMeyw68xXAms",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 5, 29, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3675),
                            Status = "Recieved from abroad",
                            TrackingNumber = "TRQUAMZ1312"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "1hun13QVGrke9JSa2AgE65bTwoR",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 19, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3720),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "HVUUPYY1152"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "1UkzPVheqvGo3jLfZdcrHS1pJw",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 19, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3758),
                            Status = "delivered",
                            TrackingNumber = "OLPAGLN1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "1XrYBoDE8LZKzJWQ6ahnAjMewuy",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 5, 31, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3825),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "FDKIAXV1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "3HQrbCGkB7n8icapgeFofDP1LXEy",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 23, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3924),
                            Status = "recieved",
                            TrackingNumber = "CFDEPTR1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "3kNFtKXbYDuox43Lj2v8a69SefZiJWhrpz1",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 8, 11, 41, 37, 974, DateTimeKind.Local).AddTicks(3960),
                            Status = "boxing",
                            TrackingNumber = "LOFUTNH1106"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
