// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240610192311_migrateNowNEwv1")]
    partial class migrateNowNEwv1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoggMesagge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6272),
                            Points = 536
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2006, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6276),
                            Points = 514
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6278),
                            Points = 384
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2019, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6279),
                            Points = 725
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2005, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6281),
                            Points = 591
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2012, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6282),
                            Points = 145
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6284),
                            Points = 961
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6286),
                            Points = 233
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6287),
                            Points = 284
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6289),
                            Points = 420
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2004, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6290),
                            Points = 844
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2016, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6292),
                            Points = 938
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2006, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6293),
                            Points = 845
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(1998, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6295),
                            Points = 382
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6296),
                            Points = 162
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2003, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6298),
                            Points = 139
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2004, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6300),
                            Points = 214
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2001, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6301),
                            Points = 877
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2013, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6303),
                            Points = 772
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6304),
                            Points = 881
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2008, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6306),
                            Points = 386
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6307),
                            Points = 290
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6309),
                            Points = 475
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2001, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6310),
                            Points = 689
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2017, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6312),
                            Points = 586
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2002, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6313),
                            Points = 428
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2018, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6315),
                            Points = 588
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1999, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6317),
                            Points = 785
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2019, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6318),
                            Points = 949
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2009, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6320),
                            Points = 548
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2023, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6321),
                            Points = 809
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2001, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(6323),
                            Points = 615
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "1NRBzukVFdxjH1am8DfhbZnyoTG19589",
                            DiscountValue = 346m,
                            ExpiryDate = new DateTime(2024, 10, 23, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1414)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "11f4X28piMPB9nrYVW3umKkCvsQN38852",
                            DiscountValue = 302m,
                            ExpiryDate = new DateTime(2025, 7, 27, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1510)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "3gHot3jAm65JhUr2yVEMXCFYPeNBxLf87n14612",
                            DiscountValue = 302m,
                            ExpiryDate = new DateTime(2024, 8, 2, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1542)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "1Zp9x7ehyFYGENf5uAXwvaUbT397750",
                            DiscountValue = 346m,
                            ExpiryDate = new DateTime(2024, 9, 1, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1580)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1bsFqEjZyLV8nK1Rd4QHvBhwpG9MXN21854",
                            DiscountValue = 156m,
                            ExpiryDate = new DateTime(2025, 10, 12, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1665)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "1KHtWEoAzV35DFYSuxdRMecXrqBTLfhak473514",
                            DiscountValue = 390m,
                            ExpiryDate = new DateTime(2024, 11, 20, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1698)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "3iY8JxWvnaPd5ELfDA7wQm69jrzBRK99183",
                            DiscountValue = 172m,
                            ExpiryDate = new DateTime(2025, 3, 27, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1733)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1YF6kg5Bnwt2EK7VmXrpoi1cHz69310",
                            DiscountValue = 208m,
                            ExpiryDate = new DateTime(2025, 4, 8, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1764)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "3B6NHSsTGxF7XvYQprPU8VLCjAki25904",
                            DiscountValue = 113m,
                            ExpiryDate = new DateTime(2025, 3, 19, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1792)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "3vuAR8XiwT9W6Vcs3SK4NkhoyCG1Z93524",
                            DiscountValue = 218m,
                            ExpiryDate = new DateTime(2024, 7, 10, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1822)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "1jgbpndSMu1esT8ExcC4XBL9W2qH42583",
                            DiscountValue = 106m,
                            ExpiryDate = new DateTime(2025, 8, 21, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1854)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "3U2xn1CPGvfjsbYMNuTiQcSzg6R46242",
                            DiscountValue = 308m,
                            ExpiryDate = new DateTime(2024, 7, 11, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1884)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "1E3ZFkzB2stV9UAbd5p8Reo6inCm1yj84396",
                            DiscountValue = 288m,
                            ExpiryDate = new DateTime(2024, 7, 19, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(1912)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "13KmN9hCwsSEXbLp2o8JHqRTAuerQy46zf27359",
                            DiscountValue = 150m,
                            ExpiryDate = new DateTime(2024, 9, 7, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(2036)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "3tdTQrMSUoKNHpPjAaYcw1RFXifEq99498",
                            DiscountValue = 222m,
                            ExpiryDate = new DateTime(2024, 7, 30, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(2157)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1EXprv2iURNTHVY4x6tL9g8WBcF68526",
                            DiscountValue = 117m,
                            ExpiryDate = new DateTime(2024, 10, 15, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(2187)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 897m,
                            OperationDate = new DateTime(2023, 9, 24, 19, 23, 10, 511, DateTimeKind.Local).AddTicks(6126),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 121m,
                            OperationDate = new DateTime(2024, 2, 4, 12, 23, 10, 511, DateTimeKind.Local).AddTicks(6134),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 179m,
                            OperationDate = new DateTime(2024, 3, 9, 6, 23, 10, 511, DateTimeKind.Local).AddTicks(6135),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 569m,
                            OperationDate = new DateTime(2023, 9, 11, 8, 23, 10, 511, DateTimeKind.Local).AddTicks(6137),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 916m,
                            OperationDate = new DateTime(2023, 10, 12, 13, 23, 10, 511, DateTimeKind.Local).AddTicks(6138),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 484m,
                            OperationDate = new DateTime(2023, 10, 6, 2, 23, 10, 511, DateTimeKind.Local).AddTicks(6140),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 397m,
                            OperationDate = new DateTime(2024, 6, 1, 18, 23, 10, 511, DateTimeKind.Local).AddTicks(6141),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 553m,
                            OperationDate = new DateTime(2024, 4, 23, 1, 23, 10, 511, DateTimeKind.Local).AddTicks(6143),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 10, 23, 23, 10, 500, DateTimeKind.Local).AddTicks(6275),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "Iusto quis quas rerum quia beatae assumenda modi. Ut placeat sint tenetur omnis ad. Quas officia impedit quis et repellat aut ut voluptates est. Occaecati perspiciatis vel. Recusandae omnis nihil repellat. Recusandae deleniti asperiores eum itaque sit.",
                            NotificationDate = new DateTime(2024, 5, 25, 19, 23, 10, 528, DateTimeKind.Local).AddTicks(6908),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "Voluptatem ea provident qui quod sit aut.",
                            NotificationDate = new DateTime(2024, 5, 18, 9, 23, 10, 528, DateTimeKind.Local).AddTicks(7481),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "Ad molestias consectetur ex sint ipsam omnis corporis. Maxime culpa laborum dolores in. Autem quo animi repellat reiciendis optio rerum. Natus laboriosam similique ut occaecati deleniti voluptatem quia odio incidunt. Quia rerum dolor. Qui optio veritatis veniam quasi deserunt.",
                            NotificationDate = new DateTime(2024, 4, 30, 9, 23, 10, 528, DateTimeKind.Local).AddTicks(7525),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "Sapiente ipsam commodi doloribus et sunt. Ipsum ipsam ab distinctio non. Nemo voluptatem possimus eaque enim illo cupiditate. Placeat minus nam. Commodi vel asperiores sunt beatae sed quo similique.",
                            NotificationDate = new DateTime(2024, 6, 3, 13, 23, 10, 528, DateTimeKind.Local).AddTicks(7770),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "Sunt veniam rem dolorem quia et voluptate.\nQui animi laudantium est.\nIpsa architecto laboriosam possimus officiis reprehenderit.\nMagni est cum odit iste doloremque occaecati non quos.",
                            NotificationDate = new DateTime(2024, 6, 6, 7, 23, 10, 528, DateTimeKind.Local).AddTicks(7925),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "Qui ab sint est excepturi ut eveniet molestias dolores. Voluptatem odit quo quisquam earum qui rerum aut nostrum delectus. Recusandae dignissimos impedit. Natus perspiciatis neque officia consequatur incidunt molestias.",
                            NotificationDate = new DateTime(2024, 5, 31, 18, 23, 10, 528, DateTimeKind.Local).AddTicks(9045),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "amet",
                            NotificationDate = new DateTime(2024, 6, 5, 19, 23, 10, 528, DateTimeKind.Local).AddTicks(9222),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "In molestias illo.\nRecusandae placeat in minus corrupti.\nQui dolores accusantium ea iste nemo officia quo.\nAliquid iste vitae non ducimus magni sunt hic quis molestiae.",
                            NotificationDate = new DateTime(2024, 5, 9, 20, 23, 10, 528, DateTimeKind.Local).AddTicks(9231),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Aut voluptatem dolorem eum fugiat.",
                            NotificationDate = new DateTime(2024, 5, 20, 11, 23, 10, 528, DateTimeKind.Local).AddTicks(9457),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "et",
                            NotificationDate = new DateTime(2024, 5, 30, 22, 23, 10, 528, DateTimeKind.Local).AddTicks(9487),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "necessitatibus",
                            NotificationDate = new DateTime(2024, 5, 30, 16, 23, 10, 528, DateTimeKind.Local).AddTicks(9495),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Atque praesentium et excepturi ut nemo. Voluptatum ut incidunt ipsa. Nostrum et rerum ipsum voluptatem. Porro consequatur necessitatibus minima ut omnis voluptas. Molestias sint corporis inventore.",
                            NotificationDate = new DateTime(2024, 5, 8, 17, 23, 10, 528, DateTimeKind.Local).AddTicks(9502),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "Numquam eius velit ut mollitia eum aspernatur aut incidunt est.",
                            NotificationDate = new DateTime(2024, 5, 1, 17, 23, 10, 528, DateTimeKind.Local).AddTicks(9720),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "est",
                            NotificationDate = new DateTime(2024, 6, 3, 12, 23, 10, 528, DateTimeKind.Local).AddTicks(9773),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Recusandae qui a aut.",
                            NotificationDate = new DateTime(2024, 5, 20, 14, 23, 10, 528, DateTimeKind.Local).AddTicks(9780),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Voluptatem aut corrupti a repudiandae itaque.\nVoluptate sunt optio iusto assumenda vitae eligendi magnam.\nSed sit quidem est dicta.\nExercitationem nihil qui distinctio non.\nAut quas nihil velit rerum quia libero et.\nId at quae ipsa magnam impedit est id.",
                            NotificationDate = new DateTime(2024, 6, 6, 14, 23, 10, 528, DateTimeKind.Local).AddTicks(9804),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Eligendi autem et culpa.\nVelit esse reiciendis natus beatae exercitationem accusamus non repellat.",
                            NotificationDate = new DateTime(2024, 4, 30, 18, 23, 10, 529, DateTimeKind.Local).AddTicks(44),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Eius exercitationem facilis et hic sapiente incidunt necessitatibus placeat aut.\nSit eum et quasi vero dolorem rerum veritatis.\nDolorum voluptatem architecto reprehenderit minima iste asperiores sequi odio modi.\nQuia quo voluptate nemo reprehenderit cumque placeat sit.\nCumque occaecati et neque iusto excepturi et tempora.\nDolor labore quia perferendis quia ab quae.",
                            NotificationDate = new DateTime(2024, 5, 17, 20, 23, 10, 529, DateTimeKind.Local).AddTicks(106),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 29, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(949),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 23, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(954),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 17, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(955),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 6, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(957),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 5, 23, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(958),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 1, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(960),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 7, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(961),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 4, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(962),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 2, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(964),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 23, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(965),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 5, 23, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(967),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 5, 13, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(979),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 20, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(993),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 3, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(996),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 18, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(998),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 5, 19, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(999),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 7, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1001),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 5, 20, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1003),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 5, 26, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1004),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 5, 31, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1006),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 4, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1008),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 8, 23, 23, 10, 529, DateTimeKind.Local).AddTicks(1009),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 557m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 23, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9080),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 393m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 28, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9096),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 212m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 7, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9098),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 194m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 23, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9101),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 923m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 28, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9103),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 48m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 6, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9105),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 430m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 25, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9107),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 794m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 5, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9109),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 839m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 5, 14, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9116),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 529m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 20, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9119),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 772m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 5, 19, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9121),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 632m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 5, 24, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9123),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 302m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 1, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9125),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 617m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 5, 12, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9127),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 564m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 5, 16, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9130),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 991m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 6, 3, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9134),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 873m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 5, 16, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9136),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 695m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 3, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(9137),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "208",
                            CardHolderName = "Sebastian Greenfelder",
                            CardNumber = "6759-6572-3748-4236-12",
                            ExpiryDate = new DateTime(2032, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(4089)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "357",
                            CardHolderName = "Cyril Dickens",
                            CardNumber = "4600528817730",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(4633)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "152",
                            CardHolderName = "Kristian Gislason",
                            CardNumber = "501857874251167853",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(6136)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "135",
                            CardHolderName = "Conrad Blanda",
                            CardNumber = "6767-7874-5081-5183-15",
                            ExpiryDate = new DateTime(2027, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(6676)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "043",
                            CardHolderName = "Cade Kuvalis",
                            CardNumber = "5485-5957-8398-4489",
                            ExpiryDate = new DateTime(2029, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(7220)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "969",
                            CardHolderName = "Branson Kemmer",
                            CardNumber = "4574801983446",
                            ExpiryDate = new DateTime(2028, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(7639)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "450",
                            CardHolderName = "Norbert Graham",
                            CardNumber = "3010-850094-5956",
                            ExpiryDate = new DateTime(2031, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(8109)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "250",
                            CardHolderName = "Kathryn Graham",
                            CardNumber = "6391-4303-0186-1418",
                            ExpiryDate = new DateTime(2029, 6, 10, 23, 23, 10, 534, DateTimeKind.Local).AddTicks(9614)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "202",
                            CardHolderName = "Makenzie Von",
                            CardNumber = "3529-7482-4302-3918",
                            ExpiryDate = new DateTime(2031, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(162)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "953",
                            CardHolderName = "Willie Block",
                            CardNumber = "3528-4139-9022-8795",
                            ExpiryDate = new DateTime(2031, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(679)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "463",
                            CardHolderName = "Jameson Paucek",
                            CardNumber = "6759-2549-3643-4441",
                            ExpiryDate = new DateTime(2029, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(1145)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "581",
                            CardHolderName = "Bernhard Hackett",
                            CardNumber = "3646-932004-6159",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(1524)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "954",
                            CardHolderName = "Dallas Berge",
                            CardNumber = "6709862963672518",
                            ExpiryDate = new DateTime(2031, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(2890)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "361",
                            CardHolderName = "Virginia Collier",
                            CardNumber = "3655-601891-4191",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(3303)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "940",
                            CardHolderName = "Alice Koss",
                            CardNumber = "3638-142369-4191",
                            ExpiryDate = new DateTime(2028, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(3736)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "508",
                            CardHolderName = "Eloy Sawayn",
                            CardNumber = "5478-5091-7499-8585",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(4257)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "448",
                            CardHolderName = "Taya Willms",
                            CardNumber = "3529-5970-2951-0105",
                            ExpiryDate = new DateTime(2026, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(4643)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "804",
                            CardHolderName = "Joanny Feeney",
                            CardNumber = "3731-008435-99199",
                            ExpiryDate = new DateTime(2030, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(6046)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "154",
                            CardHolderName = "Ansley Ankunding",
                            CardNumber = "4839-8605-0966-7362",
                            ExpiryDate = new DateTime(2032, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(6525)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "078",
                            CardHolderName = "Uriah Padberg",
                            CardNumber = "3471-727429-28723",
                            ExpiryDate = new DateTime(2030, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(6893)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "956",
                            CardHolderName = "Martina Simonis",
                            CardNumber = "5213-6584-3096-3832",
                            ExpiryDate = new DateTime(2033, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(7355)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "415",
                            CardHolderName = "Emery Fadel",
                            CardNumber = "3411-252017-24807",
                            ExpiryDate = new DateTime(2029, 6, 10, 23, 23, 10, 535, DateTimeKind.Local).AddTicks(8666)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2aae7687-6e74-44a1-abef-7c52a165eb3c",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "GURAM.APKHAZAVA908@ENS.TSU.GE",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAEGsSUEenJX8E+7DGzc97WzBXUAAQmO2hluI1krGBWm/VqI+wMEN/kPwGp2yYXJsvmw==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0727eab9-98ef-4e95-9b0f-05ec51b95f8e",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1979, 6, 10, 23, 23, 10, 505, DateTimeKind.Local).AddTicks(7662),
                            ConcurrencyStamp = "fd7fb921-154a-4601-a60b-71f3d709f004",
                            Email = "americo.klein@lubowitz.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Krajcik",
                            PhoneNumber = "246.566.2422 x616",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d293945-ec7f-41fa-8c57-612f4ca3ff4e",
                            Surname = "Jewess",
                            TwoFactorEnabled = false,
                            UserName = "blaze"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2007, 6, 10, 23, 23, 10, 506, DateTimeKind.Local).AddTicks(4894),
                            ConcurrencyStamp = "330f9dbf-fc0a-4e5b-ae63-237ddf3ae260",
                            Email = "araceli@streich.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Kohler",
                            PhoneNumber = "(397)965-3831 x205",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2c7488a-87bb-4a72-bd36-7c6e16528cd6",
                            Surname = "O'Hara",
                            TwoFactorEnabled = false,
                            UserName = "federico"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2012, 6, 10, 23, 23, 10, 507, DateTimeKind.Local).AddTicks(2780),
                            ConcurrencyStamp = "dcaddf39-57af-4d03-af60-ba3e64635e32",
                            Email = "newton_parker@davisbatz.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Boyle",
                            PhoneNumber = "(074)890-2643",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f89230f4-330a-4f2b-abf6-40cd7a652ef5",
                            Surname = "Feeney",
                            TwoFactorEnabled = false,
                            UserName = "maegan_welch"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 6, 10, 23, 23, 10, 507, DateTimeKind.Local).AddTicks(9287),
                            ConcurrencyStamp = "c3c99f65-47bc-4374-a36c-0f1cdcaf47e0",
                            Email = "gail@wisoky.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Cummerata",
                            PhoneNumber = "112.304.2649 x93236",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f82abf0a-68cb-4e83-a49b-1abe82587158",
                            Surname = "Price",
                            TwoFactorEnabled = false,
                            UserName = "kelvin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1983, 6, 10, 23, 23, 10, 508, DateTimeKind.Local).AddTicks(8449),
                            ConcurrencyStamp = "447ad260-881f-46e1-bddb-dec64eed4b88",
                            Email = "jammie@wyman.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Crona",
                            PhoneNumber = "1-053-212-1813",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d004d48-9d80-4c06-83c3-64470dcf29a2",
                            Surname = "Boehm",
                            TwoFactorEnabled = false,
                            UserName = "yessenia_auer"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2011, 6, 10, 23, 23, 10, 509, DateTimeKind.Local).AddTicks(9494),
                            ConcurrencyStamp = "56d95d01-0166-4c83-90cf-40ee9b916488",
                            Email = "israel.homenick@oreillygraham.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Gislason",
                            PhoneNumber = "(762)694-9949 x288",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d740625-90f0-491a-bbc5-b3922fce7f8d",
                            Surname = "Nienow",
                            TwoFactorEnabled = false,
                            UserName = "emelie"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2014, 6, 10, 23, 23, 10, 510, DateTimeKind.Local).AddTicks(6257),
                            ConcurrencyStamp = "fbc6ee8f-d0e9-4c9b-a9ff-5fb18f8016a2",
                            Email = "dell_hickle@hoegerbraun.info",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Schmidt",
                            PhoneNumber = "393.034.0624 x867",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f3498a9-ead9-49ab-8fed-162c7f6bd1f4",
                            Surname = "Deckow",
                            TwoFactorEnabled = false,
                            UserName = "agnes_witting"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1997, 6, 10, 23, 23, 10, 511, DateTimeKind.Local).AddTicks(3308),
                            ConcurrencyStamp = "d1aaaa11-d40c-45ff-9105-d9d98bbe3565",
                            Email = "alec.steuber@kautzer.co.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Wuckert",
                            PhoneNumber = "954.644.3547 x4326",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "466ec290-69fe-4282-95a5-0269ea3254bc",
                            Surname = "Connelly",
                            TwoFactorEnabled = false,
                            UserName = "roslyn_bruen"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 136.67m,
                            ProductCategoryId = 1L,
                            ProductName = "Fantastic Granite Pants"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 627.88m,
                            ProductCategoryId = 2L,
                            ProductName = "Incredible Cotton Towels"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 323.98m,
                            ProductCategoryId = 3L,
                            ProductName = "Tasty Granite Towels"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 801.12m,
                            ProductCategoryId = 4L,
                            ProductName = "Licensed Fresh Gloves"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 609.42m,
                            ProductCategoryId = 5L,
                            ProductName = "Incredible Rubber Table"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 9.84m,
                            ProductCategoryId = 6L,
                            ProductName = "Tasty Frozen Bacon"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 175.43m,
                            ProductCategoryId = 7L,
                            ProductName = "Licensed Steel Towels"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 905.16m,
                            ProductCategoryId = 8L,
                            ProductName = "Refined Metal Hat"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 238.90m,
                            ProductCategoryId = 9L,
                            ProductName = "Ergonomic Steel Pizza"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 375.64m,
                            ProductCategoryId = 1L,
                            ProductName = "Practical Wooden Salad"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 152.07m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Rubber Computer"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 801.02m,
                            ProductCategoryId = 4L,
                            ProductName = "Unbranded Plastic Keyboard"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 331.88m,
                            ProductCategoryId = 3L,
                            ProductName = "Refined Fresh Hat"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 99.81m,
                            ProductCategoryId = 6L,
                            ProductName = "Incredible Fresh Salad"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 713.27m,
                            ProductCategoryId = 11L,
                            ProductName = "Awesome Metal Bike"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 73.31m,
                            ProductCategoryId = 12L,
                            ProductName = "Handmade Granite Ball"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 782.41m,
                            ProductCategoryId = 13L,
                            ProductName = "Small Rubber Shoes"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 538.59m,
                            ProductCategoryId = 14L,
                            ProductName = "Sleek Rubber Chair"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 383.45m,
                            ProductCategoryId = 15L,
                            ProductName = "Unbranded Cotton Towels"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 718.88m,
                            ProductCategoryId = 16L,
                            ProductName = "Handcrafted Wooden Chicken"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 816.43m,
                            ProductCategoryId = 17L,
                            ProductName = "Rustic Cotton Shoes"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 880.45m,
                            ProductCategoryId = 8L,
                            ProductName = "Handmade Fresh Bacon"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 95.65m,
                            ProductCategoryId = 9L,
                            ProductName = "Small Fresh Ball"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 946.34m,
                            ProductCategoryId = 14L,
                            ProductName = "Intelligent Rubber Sausages"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 263.97m,
                            ProductCategoryId = 13L,
                            ProductName = "Incredible Plastic Pants"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 491.54m,
                            ProductCategoryId = 4L,
                            ProductName = "Generic Frozen Chicken"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 955.47m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Plastic Chicken"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 285.61m,
                            ProductCategoryId = 6L,
                            ProductName = "Practical Steel Gloves"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 700.16m,
                            ProductCategoryId = 1L,
                            ProductName = "Generic Concrete Computer"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 431.84m,
                            ProductCategoryId = 2L,
                            ProductName = "Intelligent Granite Keyboard"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 425.51m,
                            ProductCategoryId = 3L,
                            ProductName = "Refined Frozen Ball"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 159.44m,
                            ProductCategoryId = 4L,
                            ProductName = "Unbranded Frozen Mouse"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 401.28m,
                            ProductCategoryId = 5L,
                            ProductName = "Handcrafted Metal Table"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 369.59m,
                            ProductCategoryId = 6L,
                            ProductName = "Tasty Concrete Bacon"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 269.60m,
                            ProductCategoryId = 7L,
                            ProductName = "Refined Concrete Soap"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 578.95m,
                            ProductCategoryId = 8L,
                            ProductName = "Refined Metal Salad"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 285.91m,
                            ProductCategoryId = 9L,
                            ProductName = "Unbranded Rubber Chicken"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 538.22m,
                            ProductCategoryId = 1L,
                            ProductName = "Incredible Fresh Soap"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 567.76m,
                            ProductCategoryId = 11L,
                            ProductName = "Handcrafted Concrete Shirt"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 418.78m,
                            ProductCategoryId = 14L,
                            ProductName = "Refined Rubber Shoes"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 269.52m,
                            ProductCategoryId = 3L,
                            ProductName = "Licensed Fresh Hat"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 635.12m,
                            ProductCategoryId = 6L,
                            ProductName = "Intelligent Soft Keyboard"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 371.58m,
                            ProductCategoryId = 15L,
                            ProductName = "Generic Frozen Pizza"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 281.75m,
                            ProductCategoryId = 2L,
                            ProductName = "Tasty Frozen Salad"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 271.52m,
                            ProductCategoryId = 18L,
                            ProductName = "Tasty Metal Car"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 124.52m,
                            ProductCategoryId = 4L,
                            ProductName = "Fantastic Frozen Computer"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 253.66m,
                            ProductCategoryId = 15L,
                            ProductName = "Refined Frozen Sausages"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 163.73m,
                            ProductCategoryId = 19L,
                            ProductName = "Licensed Wooden Salad"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 783.18m,
                            ProductCategoryId = 20L,
                            ProductName = "Incredible Granite Soap"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 906.68m,
                            ProductCategoryId = 8L,
                            ProductName = "Generic Concrete Shoes"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 256.91m,
                            ProductCategoryId = 14L,
                            ProductName = "Rustic Steel Ball"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 865.76m,
                            ProductCategoryId = 13L,
                            ProductName = "Intelligent Fresh Chips"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 542.68m,
                            ProductCategoryId = 19L,
                            ProductName = "Awesome Concrete Towels"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 324.41m,
                            ProductCategoryId = 16L,
                            ProductName = "Unbranded Plastic Cheese"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 951.14m,
                            ProductCategoryId = 11L,
                            ProductName = "Generic Plastic Pizza"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 227.93m,
                            ProductCategoryId = 13L,
                            ProductName = "Ergonomic Cotton Bike"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Tools"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Baby"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Kids"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Kids"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 576m,
                            Id = 1L,
                            Quantity = 76,
                            UnitPrice = 270.35m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 880m,
                            Id = 2L,
                            Quantity = 75,
                            UnitPrice = 621.88m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 836m,
                            Id = 3L,
                            Quantity = 89,
                            UnitPrice = 339.67m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 928m,
                            Id = 4L,
                            Quantity = 92,
                            UnitPrice = 612.97m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 519m,
                            Id = 5L,
                            Quantity = 70,
                            UnitPrice = 642.83m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 666m,
                            Id = 6L,
                            Quantity = 66,
                            UnitPrice = 498.93m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 729m,
                            Id = 7L,
                            Quantity = 78,
                            UnitPrice = 115.08m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 698m,
                            Id = 8L,
                            Quantity = 18,
                            UnitPrice = 71.09m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 171m,
                            Id = 9L,
                            Quantity = 35,
                            UnitPrice = 793.07m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 413m,
                            Id = 10L,
                            Quantity = 60,
                            UnitPrice = 275.39m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 462m,
                            Id = 11L,
                            Quantity = 15,
                            UnitPrice = 576.93m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 866m,
                            Id = 12L,
                            Quantity = 79,
                            UnitPrice = 382.56m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 231m,
                            Id = 13L,
                            Quantity = 44,
                            UnitPrice = 932.55m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 482m,
                            Id = 14L,
                            Quantity = 45,
                            UnitPrice = 937.13m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 756m,
                            Id = 15L,
                            Quantity = 32,
                            UnitPrice = 32.21m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 571m,
                            Id = 16L,
                            Quantity = 62,
                            UnitPrice = 626.59m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 562m,
                            Id = 17L,
                            Quantity = 86,
                            UnitPrice = 812.15m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 811m,
                            Id = 18L,
                            Quantity = 97,
                            UnitPrice = 847.14m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 412m,
                            Id = 19L,
                            Quantity = 61,
                            UnitPrice = 189.36m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 156m,
                            Id = 20L,
                            Quantity = 87,
                            UnitPrice = 998.02m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "inventore",
                            RequestDate = new DateTime(2024, 5, 11, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3030),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "Quam animi aut reprehenderit eveniet nam cupiditate ea magni.",
                            RequestDate = new DateTime(2024, 3, 2, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3106),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "ut",
                            RequestDate = new DateTime(2024, 5, 21, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3276),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Delectus iste ipsam consectetur eaque quia deserunt adipisci. Omnis quo commodi. Rerum tenetur ducimus excepturi laboriosam inventore sit optio sint et. Nemo totam esse iusto illum quod dolore ducimus quia. Velit dicta voluptatum. Est ratione dolorem accusantium fugiat blanditiis pariatur commodi exercitationem.",
                            RequestDate = new DateTime(2024, 5, 11, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3284),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "eligendi",
                            RequestDate = new DateTime(2024, 3, 2, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3507),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Placeat error nobis corporis incidunt ab natus totam. Soluta quas ut similique cumque dolores odio. Soluta ipsam odio cum non vero accusantium. Nesciunt porro incidunt culpa provident ea placeat.",
                            RequestDate = new DateTime(2024, 5, 21, 23, 23, 10, 552, DateTimeKind.Local).AddTicks(3568),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(2287),
                            ReviewText = "Est illo sed ea eveniet officia molestias omnis in quasi.\nNumquam minus earum aut aliquid aut soluta dolorem suscipit.\nDolor ut voluptatem dolore facere veritatis occaecati alias dolor assumenda.\nEst in vel quia culpa sit omnis.\nDolorum vitae repellat dicta labore repellendus dolorem.\nSint sint quia debitis repudiandae architecto laborum nam in."
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(2724),
                            ReviewText = "Culpa quam nobis et et consectetur. Libero dolores ut sunt est nulla odio id. Quia ut accusamus officiis odit. Dolores voluptas qui quia cupiditate aut vel."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(2914),
                            ReviewText = "Animi odio molestias.\nHarum quibusdam non aspernatur."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(2959),
                            ReviewText = "Non quis nihil vel alias.\nVelit aperiam sunt dolores quisquam."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 7, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3014),
                            ReviewText = "Ex ut vel non."
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 6, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3038),
                            ReviewText = "Excepturi dolorem error corrupti."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 5, 26, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3075),
                            ReviewText = "Nihil optio et."
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 4, 17, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3154),
                            ReviewText = "Ex ea enim fugiat magni.\nQuibusdam tenetur eveniet totam repudiandae corporis vitae aut.\nVoluptas placeat sunt a."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 18, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3241),
                            ReviewText = "a"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 8, 23, 23, 10, 556, DateTimeKind.Local).AddTicks(3248),
                            ReviewText = "ducimus"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "1Dxk9vrNZ6HfG7UQYRza83EPWqXcK",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 6, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(6731),
                            Status = "Sent from abroad",
                            TrackingNumber = "WXMUEUT1"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "3azVWXGBP6qfMwv4NKjeJkHcm1EbFx3",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 5, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(6914),
                            Status = "Recieved from abroad",
                            TrackingNumber = "PREODMU1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "1Q7wsabY8GWu4XzVdEPL3qpoRDgyAe5",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 4, 26, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(6987),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "NPWIEES1939"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "3nhr2H9MqkVi8DfRZQbAm4tSedcxg",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 4, 26, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7047),
                            Status = "delivered",
                            TrackingNumber = "IXAOLYW1482"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "16uXGhLeFNqBSmAy8ivwVZTtQ3",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 7, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7180),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "BHWUREE1782"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "1yGciofJEFNLC6ZkbthK3HuxM1QgvwqUV",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 5, 30, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7238),
                            Status = "recieved",
                            TrackingNumber = "OIAUBOH1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1mHJTaKWMdCGig6qPnyVeSr1L3Nu8foD",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 4, 15, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7293),
                            Status = "boxing",
                            TrackingNumber = "EGVILAI1738"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfLastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("productId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7924),
                            productId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7928),
                            productId = 21L
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7929),
                            productId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 4L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7930),
                            productId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 5L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7931),
                            productId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 6L,
                            DateOfLastModification = new DateTime(2024, 6, 10, 23, 23, 10, 559, DateTimeKind.Local).AddTicks(7933),
                            productId = 6L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "product")
                        .WithMany("WishLists")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
