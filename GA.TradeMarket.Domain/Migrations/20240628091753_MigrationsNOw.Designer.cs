// <auto-generated />
using System;
using GA.TradeMarket.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GA.TradeMarket.Domain.Migrations
{
    [DbContext(typeof(TradeMarketDbContext))]
    [Migration("20240628091753_MigrationsNOw")]
    partial class MigrationsNOw
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoggMesagge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bonuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2014, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5100),
                            Points = 301
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1998, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5103),
                            Points = 149
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2020, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5105),
                            Points = 307
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2017, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5107),
                            Points = 708
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2018, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5108),
                            Points = 365
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2001, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5110),
                            Points = 113
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2006, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5111),
                            Points = 430
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2019, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5113),
                            Points = 571
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 3L,
                            EnrollmentDate = new DateTime(2007, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5114),
                            Points = 229
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2014, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5116),
                            Points = 610
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2019, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5117),
                            Points = 530
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 1L,
                            EnrollmentDate = new DateTime(2015, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5119),
                            Points = 203
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2013, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5121),
                            Points = 735
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2016, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5122),
                            Points = 299
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(1999, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5124),
                            Points = 520
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2000, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5125),
                            Points = 865
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2022, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5127),
                            Points = 933
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2016, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5129),
                            Points = 278
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2006, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5130),
                            Points = 449
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2006, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5132),
                            Points = 822
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2005, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5133),
                            Points = 864
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2023, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5135),
                            Points = 794
                        },
                        new
                        {
                            Id = 23L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(2008, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5136),
                            Points = 315
                        },
                        new
                        {
                            Id = 24L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2021, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5138),
                            Points = 903
                        },
                        new
                        {
                            Id = 25L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2006, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5139),
                            Points = 251
                        },
                        new
                        {
                            Id = 26L,
                            CustomerId = 4L,
                            EnrollmentDate = new DateTime(2003, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5141),
                            Points = 208
                        },
                        new
                        {
                            Id = 27L,
                            CustomerId = 5L,
                            EnrollmentDate = new DateTime(2008, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5142),
                            Points = 570
                        },
                        new
                        {
                            Id = 28L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2002, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5144),
                            Points = 535
                        },
                        new
                        {
                            Id = 29L,
                            CustomerId = 8L,
                            EnrollmentDate = new DateTime(2023, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5145),
                            Points = 468
                        },
                        new
                        {
                            Id = 30L,
                            CustomerId = 7L,
                            EnrollmentDate = new DateTime(2013, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5146),
                            Points = 580
                        },
                        new
                        {
                            Id = 31L,
                            CustomerId = 2L,
                            EnrollmentDate = new DateTime(2004, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5183),
                            Points = 214
                        },
                        new
                        {
                            Id = 32L,
                            CustomerId = 6L,
                            EnrollmentDate = new DateTime(1998, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(5184),
                            Points = 849
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "33DdRxX2yKYinwr9WMUhgmAVZEQj48Tvq76533",
                            DiscountValue = 161m,
                            ExpiryDate = new DateTime(2025, 5, 20, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8076)
                        },
                        new
                        {
                            Id = 2L,
                            Code = "1VZbXFiHAJ4uRtUv7zET5dNcw215916",
                            DiscountValue = 183m,
                            ExpiryDate = new DateTime(2024, 11, 27, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8175)
                        },
                        new
                        {
                            Id = 3L,
                            Code = "1F2miGCaeM6rYvLxWRgA4HPwVqtZoz67916",
                            DiscountValue = 350m,
                            ExpiryDate = new DateTime(2025, 9, 30, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8208)
                        },
                        new
                        {
                            Id = 4L,
                            Code = "3Bfn7qzc2PQXphVEK6ywmWHkUbN8eR15360",
                            DiscountValue = 387m,
                            ExpiryDate = new DateTime(2024, 7, 21, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8243)
                        },
                        new
                        {
                            Id = 5L,
                            Code = "1wZsDPV2iEQrFXKL4pB1a8yc7Rkn9dbzMJ60978",
                            DiscountValue = 134m,
                            ExpiryDate = new DateTime(2025, 8, 26, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8275)
                        },
                        new
                        {
                            Id = 6L,
                            Code = "35jdGFrNcA6DXyVPf9RonUkZ7pqBE3xKQe97283",
                            DiscountValue = 394m,
                            ExpiryDate = new DateTime(2025, 2, 15, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8310)
                        },
                        new
                        {
                            Id = 7L,
                            Code = "1JUaFzb6xmeMwKuRrE4WyjdcDvLosA1q8h75285",
                            DiscountValue = 309m,
                            ExpiryDate = new DateTime(2025, 8, 20, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8392)
                        },
                        new
                        {
                            Id = 8L,
                            Code = "1VFgfH36Yq4dPiEQWs92R8Ltwjz36788",
                            DiscountValue = 278m,
                            ExpiryDate = new DateTime(2024, 12, 11, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8427)
                        },
                        new
                        {
                            Id = 9L,
                            Code = "1YBaCT1K5wp7PGMJtmDAjVFNghsyiuQ8vrZ6903",
                            DiscountValue = 217m,
                            ExpiryDate = new DateTime(2024, 9, 25, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8457)
                        },
                        new
                        {
                            Id = 10L,
                            Code = "15iyMCrx1A7WD2wVpLTNbQ8gKahqjU6z90834",
                            DiscountValue = 274m,
                            ExpiryDate = new DateTime(2025, 4, 6, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8494)
                        },
                        new
                        {
                            Id = 11L,
                            Code = "3yiL8hDAU9d64x5MtQkcHSfmbNrRFj3qupP28327",
                            DiscountValue = 385m,
                            ExpiryDate = new DateTime(2025, 11, 4, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8529)
                        },
                        new
                        {
                            Id = 12L,
                            Code = "12XLVUdNGDEsfpnA5i8u14zSCqv6QtrF10070",
                            DiscountValue = 269m,
                            ExpiryDate = new DateTime(2025, 3, 4, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8566)
                        },
                        new
                        {
                            Id = 13L,
                            Code = "1dFi3uMQrBC9JZESx8tPRzesWcbhaNv27836",
                            DiscountValue = 148m,
                            ExpiryDate = new DateTime(2025, 4, 20, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8599)
                        },
                        new
                        {
                            Id = 14L,
                            Code = "3wLeR5MUYAsrvTHhWc6Zy4NjPC9Q99124",
                            DiscountValue = 356m,
                            ExpiryDate = new DateTime(2025, 11, 3, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8631)
                        },
                        new
                        {
                            Id = 15L,
                            Code = "1po28fYiRajQSwuv1WyceCHNXAqKMdxFV5h41333",
                            DiscountValue = 391m,
                            ExpiryDate = new DateTime(2024, 8, 13, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8692)
                        },
                        new
                        {
                            Id = 16L,
                            Code = "1UikFH6BoJPhqLWZupn1NV7aCx34058",
                            DiscountValue = 122m,
                            ExpiryDate = new DateTime(2025, 2, 19, 13, 17, 52, 148, DateTimeKind.Local).AddTicks(8730)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountValue")
                        .IsDescending();

                    b.HasIndex("OperationDate")
                        .IsDescending();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountValue = 874m,
                            OperationDate = new DateTime(2024, 4, 18, 12, 17, 52, 151, DateTimeKind.Local).AddTicks(4955),
                            PersonId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            DiscountValue = 719m,
                            OperationDate = new DateTime(2023, 8, 8, 17, 17, 52, 151, DateTimeKind.Local).AddTicks(4963),
                            PersonId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            DiscountValue = 659m,
                            OperationDate = new DateTime(2023, 11, 23, 1, 17, 52, 151, DateTimeKind.Local).AddTicks(4964),
                            PersonId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            DiscountValue = 626m,
                            OperationDate = new DateTime(2024, 3, 11, 5, 17, 52, 151, DateTimeKind.Local).AddTicks(4966),
                            PersonId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            DiscountValue = 940m,
                            OperationDate = new DateTime(2023, 5, 20, 0, 17, 52, 151, DateTimeKind.Local).AddTicks(4968),
                            PersonId = "5"
                        },
                        new
                        {
                            Id = 6L,
                            DiscountValue = 681m,
                            OperationDate = new DateTime(2024, 4, 29, 8, 17, 52, 151, DateTimeKind.Local).AddTicks(4969),
                            PersonId = "6"
                        },
                        new
                        {
                            Id = 7L,
                            DiscountValue = 959m,
                            OperationDate = new DateTime(2024, 1, 22, 12, 17, 52, 151, DateTimeKind.Local).AddTicks(4970),
                            PersonId = "7"
                        },
                        new
                        {
                            Id = 8L,
                            DiscountValue = 242m,
                            OperationDate = new DateTime(2023, 10, 31, 5, 17, 52, 151, DateTimeKind.Local).AddTicks(4973),
                            PersonId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Buy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sell")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Buy = 1.0m,
                            Currency = "GEL",
                            LogTime = new DateTime(2024, 6, 28, 13, 17, 52, 146, DateTimeKind.Local).AddTicks(5008),
                            Sell = 1.0m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsSeen = false,
                            Message = "quaerat",
                            NotificationDate = new DateTime(2024, 6, 14, 6, 17, 52, 153, DateTimeKind.Local).AddTicks(3030),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsSeen = false,
                            Message = "architecto",
                            NotificationDate = new DateTime(2024, 6, 22, 7, 17, 52, 153, DateTimeKind.Local).AddTicks(3075),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsSeen = false,
                            Message = "amet",
                            NotificationDate = new DateTime(2024, 6, 23, 3, 17, 52, 153, DateTimeKind.Local).AddTicks(3082),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsSeen = false,
                            Message = "ut",
                            NotificationDate = new DateTime(2024, 5, 25, 21, 17, 52, 153, DateTimeKind.Local).AddTicks(3088),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            IsSeen = false,
                            Message = "natus",
                            NotificationDate = new DateTime(2024, 6, 27, 8, 17, 52, 153, DateTimeKind.Local).AddTicks(3095),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            IsSeen = false,
                            Message = "inventore",
                            NotificationDate = new DateTime(2024, 6, 17, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(3101),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            IsSeen = false,
                            Message = "Et quisquam totam est omnis ut. Iure fuga voluptatibus id beatae occaecati dolorem. Eius repellat nostrum molestiae quo voluptates et soluta. Id est et dicta dolores voluptatem rerum tenetur aspernatur. Officia et enim. Alias sit repellat molestiae culpa deleniti quisquam illo ut.",
                            NotificationDate = new DateTime(2024, 6, 14, 11, 17, 52, 153, DateTimeKind.Local).AddTicks(3107),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            IsSeen = false,
                            Message = "laudantium",
                            NotificationDate = new DateTime(2024, 6, 6, 10, 17, 52, 153, DateTimeKind.Local).AddTicks(3372),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            IsSeen = false,
                            Message = "Et aut aliquam recusandae. Voluptatem repellat ipsum dolorem et officia dicta dignissimos porro cumque. Omnis doloribus ea sint eius sit. Quia deleniti voluptas qui. Provident dolor sed ut sed et. Quia incidunt neque facere tempore pariatur illo.",
                            NotificationDate = new DateTime(2024, 5, 20, 10, 17, 52, 153, DateTimeKind.Local).AddTicks(3378),
                            UserId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            IsSeen = false,
                            Message = "eum",
                            NotificationDate = new DateTime(2024, 6, 15, 11, 17, 52, 153, DateTimeKind.Local).AddTicks(3553),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsSeen = false,
                            Message = "Libero pariatur at ut officia.\nOccaecati delectus doloribus qui similique autem occaecati.\nQuae ducimus est nam aut saepe maxime minus sit.\nOmnis aut ipsam.",
                            NotificationDate = new DateTime(2024, 5, 23, 11, 17, 52, 153, DateTimeKind.Local).AddTicks(3559),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 12L,
                            IsSeen = false,
                            Message = "Est est minus.\nCum omnis earum.\nAut non nihil aliquam dignissimos quis.\nFuga consectetur numquam qui incidunt id veniam sit unde.\nTenetur omnis ea et distinctio ut non iure.",
                            NotificationDate = new DateTime(2024, 6, 13, 11, 17, 52, 153, DateTimeKind.Local).AddTicks(3693),
                            UserId = 8L
                        },
                        new
                        {
                            Id = 13L,
                            IsSeen = false,
                            Message = "reprehenderit",
                            NotificationDate = new DateTime(2024, 6, 1, 6, 17, 52, 153, DateTimeKind.Local).AddTicks(3789),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 14L,
                            IsSeen = false,
                            Message = "Omnis aut quis.\nAmet eos eaque aliquid.\nVoluptas aspernatur quisquam eos maxime sed animi excepturi.",
                            NotificationDate = new DateTime(2024, 6, 12, 22, 17, 52, 153, DateTimeKind.Local).AddTicks(3795),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            IsSeen = false,
                            Message = "Iusto sapiente corporis veritatis corporis voluptatem unde voluptatem.\nDistinctio hic corporis adipisci quo.",
                            NotificationDate = new DateTime(2024, 5, 27, 11, 17, 52, 153, DateTimeKind.Local).AddTicks(3850),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            IsSeen = false,
                            Message = "Ex excepturi rerum quas nihil facere ea provident tempore.\nAut voluptas eligendi consectetur.",
                            NotificationDate = new DateTime(2024, 6, 14, 7, 17, 52, 153, DateTimeKind.Local).AddTicks(3983),
                            UserId = 6L
                        },
                        new
                        {
                            Id = 17L,
                            IsSeen = false,
                            Message = "Quia iure ea ipsam sequi deleniti nobis sed voluptas nemo. Quia et repellendus. Aspernatur delectus consectetur.",
                            NotificationDate = new DateTime(2024, 6, 17, 16, 17, 52, 153, DateTimeKind.Local).AddTicks(4029),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            IsSeen = false,
                            Message = "Nulla et voluptatibus minus.\nQui sunt et ratione eligendi architecto.",
                            NotificationDate = new DateTime(2024, 6, 15, 0, 17, 52, 153, DateTimeKind.Local).AddTicks(4102),
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDate")
                        .IsDescending();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 21, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4373),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 4, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4376),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 6, 23, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4377),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 16, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4378),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 3L,
                            OrderDate = new DateTime(2024, 6, 16, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4380),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 5, 30, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4381),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 19, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4383),
                            Status = "done"
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 14, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4385),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 4L,
                            OrderDate = new DateTime(2024, 6, 24, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4386),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 10, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4387),
                            Status = "done"
                        },
                        new
                        {
                            Id = 11L,
                            CustomerId = 1L,
                            OrderDate = new DateTime(2024, 6, 25, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4389),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 12L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 9, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4390),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 13L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 9, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4391),
                            Status = "Decline"
                        },
                        new
                        {
                            Id = 14L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 27, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4392),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 15L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 4, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4394),
                            Status = "processing"
                        },
                        new
                        {
                            Id = 16L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 15, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4395),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 17L,
                            CustomerId = 5L,
                            OrderDate = new DateTime(2024, 6, 21, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4396),
                            Status = "done"
                        },
                        new
                        {
                            Id = 18L,
                            CustomerId = 2L,
                            OrderDate = new DateTime(2024, 6, 12, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4397),
                            Status = "done"
                        },
                        new
                        {
                            Id = 19L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 9, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4399),
                            Status = "Sent"
                        },
                        new
                        {
                            Id = 20L,
                            CustomerId = 6L,
                            OrderDate = new DateTime(2024, 6, 27, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4400),
                            Status = "Done"
                        },
                        new
                        {
                            Id = 21L,
                            CustomerId = 7L,
                            OrderDate = new DateTime(2024, 6, 9, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4401),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 22L,
                            CustomerId = 8L,
                            OrderDate = new DateTime(2024, 6, 15, 13, 17, 52, 153, DateTimeKind.Local).AddTicks(4402),
                            Status = "Done"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("paymentMethodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("paymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 426m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 10, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6894),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 821m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 23, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6899),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 896m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 19, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6901),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 718m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 22, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6903),
                            PaymentMethod = "Credit card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 62m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 8, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6905),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 595m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 10, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6907),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 31m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 24, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6908),
                            PaymentMethod = "ATM",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 645m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 7, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6911),
                            PaymentMethod = "Mobile Bank",
                            paymentMethodId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 632m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 20, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6913),
                            PaymentMethod = "ATM",
                            paymentMethodId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Amount = 790m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 25, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6914),
                            PaymentMethod = "Visa Card",
                            paymentMethodId = 3L
                        },
                        new
                        {
                            Id = 11L,
                            Amount = 658m,
                            OrderId = 5L,
                            PaymentDate = new DateTime(2024, 6, 6, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6916),
                            PaymentMethod = "ATM",
                            paymentMethodId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            Amount = 779m,
                            OrderId = 2L,
                            PaymentDate = new DateTime(2024, 6, 8, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6918),
                            PaymentMethod = "Master Card",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Amount = 855m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 22, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6920),
                            PaymentMethod = "ATM",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 14L,
                            Amount = 444m,
                            OrderId = 1L,
                            PaymentDate = new DateTime(2024, 6, 8, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6921),
                            PaymentMethod = "ATM",
                            paymentMethodId = 6L
                        },
                        new
                        {
                            Id = 15L,
                            Amount = 872m,
                            OrderId = 6L,
                            PaymentDate = new DateTime(2024, 6, 22, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6924),
                            PaymentMethod = "Wallet",
                            paymentMethodId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            Amount = 971m,
                            OrderId = 7L,
                            PaymentDate = new DateTime(2024, 6, 5, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6926),
                            PaymentMethod = "ATM",
                            paymentMethodId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Amount = 67m,
                            OrderId = 4L,
                            PaymentDate = new DateTime(2024, 6, 22, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6928),
                            PaymentMethod = "Apple pay",
                            paymentMethodId = 5L
                        },
                        new
                        {
                            Id = 18L,
                            Amount = 169m,
                            OrderId = 3L,
                            PaymentDate = new DateTime(2024, 6, 15, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6930),
                            PaymentMethod = "ATM",
                            paymentMethodId = 3L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CVV = "138",
                            CardHolderName = "Mercedes Jacobson",
                            CardNumber = "6373-1664-5317-4455",
                            ExpiryDate = new DateTime(2029, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(268)
                        },
                        new
                        {
                            Id = 2L,
                            CVV = "014",
                            CardHolderName = "Shana Langworth",
                            CardNumber = "67638268725837715115",
                            ExpiryDate = new DateTime(2033, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(680)
                        },
                        new
                        {
                            Id = 3L,
                            CVV = "874",
                            CardHolderName = "Carmela Cremin",
                            CardNumber = "3528-9938-7302-6564",
                            ExpiryDate = new DateTime(2030, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(992)
                        },
                        new
                        {
                            Id = 4L,
                            CVV = "221",
                            CardHolderName = "Zachery Hackett",
                            CardNumber = "6771-8972-5036-5841",
                            ExpiryDate = new DateTime(2026, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(1250)
                        },
                        new
                        {
                            Id = 5L,
                            CVV = "603",
                            CardHolderName = "Austyn Lebsack",
                            CardNumber = "6706774365722750889",
                            ExpiryDate = new DateTime(2033, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(1574)
                        },
                        new
                        {
                            Id = 6L,
                            CVV = "482",
                            CardHolderName = "Garrett Goodwin",
                            CardNumber = "3029-802488-4219",
                            ExpiryDate = new DateTime(2029, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(1860)
                        },
                        new
                        {
                            Id = 7L,
                            CVV = "096",
                            CardHolderName = "Cara Gottlieb",
                            CardNumber = "50184035207203133",
                            ExpiryDate = new DateTime(2030, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(2154)
                        },
                        new
                        {
                            Id = 8L,
                            CVV = "999",
                            CardHolderName = "Buford Lockman",
                            CardNumber = "6391-1248-1044-2550",
                            ExpiryDate = new DateTime(2026, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(2460)
                        },
                        new
                        {
                            Id = 9L,
                            CVV = "890",
                            CardHolderName = "Nicola Gibson",
                            CardNumber = "6304726295198603457",
                            ExpiryDate = new DateTime(2031, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(2763)
                        },
                        new
                        {
                            Id = 10L,
                            CVV = "519",
                            CardHolderName = "Kiera Batz",
                            CardNumber = "3490-532006-08718",
                            ExpiryDate = new DateTime(2029, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(3013)
                        },
                        new
                        {
                            Id = 11L,
                            CVV = "340",
                            CardHolderName = "Lina Wisoky",
                            CardNumber = "3495-742250-17494",
                            ExpiryDate = new DateTime(2031, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(3276)
                        },
                        new
                        {
                            Id = 12L,
                            CVV = "050",
                            CardHolderName = "Emery Okuneva",
                            CardNumber = "3437-642997-20539",
                            ExpiryDate = new DateTime(2028, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(3605)
                        },
                        new
                        {
                            Id = 13L,
                            CVV = "808",
                            CardHolderName = "Hayden Klocko",
                            CardNumber = "3529-7403-5413-8437",
                            ExpiryDate = new DateTime(2031, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(3872)
                        },
                        new
                        {
                            Id = 14L,
                            CVV = "964",
                            CardHolderName = "Edmund DuBuque",
                            CardNumber = "6706009311103372494",
                            ExpiryDate = new DateTime(2031, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(4214)
                        },
                        new
                        {
                            Id = 15L,
                            CVV = "829",
                            CardHolderName = "Alana Yundt",
                            CardNumber = "5893-1200-3133-0462",
                            ExpiryDate = new DateTime(2030, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(4639)
                        },
                        new
                        {
                            Id = 16L,
                            CVV = "265",
                            CardHolderName = "Brody Hintz",
                            CardNumber = "4352-9801-1132-4371",
                            ExpiryDate = new DateTime(2033, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(4950)
                        },
                        new
                        {
                            Id = 17L,
                            CVV = "255",
                            CardHolderName = "Macie Miller",
                            CardNumber = "3408-061164-77000",
                            ExpiryDate = new DateTime(2030, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(5198)
                        },
                        new
                        {
                            Id = 18L,
                            CVV = "478",
                            CardHolderName = "Harvey Zboncak",
                            CardNumber = "6394-3091-1440-0498",
                            ExpiryDate = new DateTime(2033, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(5489)
                        },
                        new
                        {
                            Id = 19L,
                            CVV = "505",
                            CardHolderName = "Jazmyn Donnelly",
                            CardNumber = "670920536779548676",
                            ExpiryDate = new DateTime(2032, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(5780)
                        },
                        new
                        {
                            Id = 20L,
                            CVV = "459",
                            CardHolderName = "Hattie Hamill",
                            CardNumber = "3018-042931-1388",
                            ExpiryDate = new DateTime(2032, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6054)
                        },
                        new
                        {
                            Id = 21L,
                            CVV = "481",
                            CardHolderName = "Jalen Kohler",
                            CardNumber = "3528-2384-4058-1018",
                            ExpiryDate = new DateTime(2029, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6349)
                        },
                        new
                        {
                            Id = 22L,
                            CVV = "146",
                            CardHolderName = "Dayna Wehner",
                            CardNumber = "6767-8034-6906-1144",
                            ExpiryDate = new DateTime(2027, 6, 28, 13, 17, 52, 155, DateTimeKind.Local).AddTicks(6640)
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "62b4eef8-f679-4fdd-aefe-b712a1a9fb74",
                            Email = "guram.apkhazava908@ens.tsu.ge",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guga",
                            NormalizedEmail = "GURAM.APKHAZAVA908@ENS.TSU.GE",
                            NormalizedUserName = "Guga13guga",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLcSu/VseLqEPKxz/+q5UoFkfUnoYgNUBQwa5zZubyvNvWIiIVCclc85C4sipZizg==",
                            PhoneNumber = "599042047",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e2f83f72-7ec5-4353-80ef-2e56ea9a1623",
                            Surname = " Apkhazava",
                            TwoFactorEnabled = false,
                            UserName = "Guga13guga"
                        },
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1987, 6, 28, 13, 17, 52, 149, DateTimeKind.Local).AddTicks(699),
                            ConcurrencyStamp = "7afe0d47-54e1-4961-977f-7678a589e73b",
                            Email = "alysson@gulgowski.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Cole",
                            PhoneNumber = "571.672.7909 x83723",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2e88dde-d7dc-438a-80a9-dfc6412f7c1b",
                            Surname = "Rice",
                            TwoFactorEnabled = false,
                            UserName = "nina_nitzsche"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 6, 28, 13, 17, 52, 149, DateTimeKind.Local).AddTicks(4172),
                            ConcurrencyStamp = "8834c198-5598-43f7-b3b0-cdc59045df20",
                            Email = "krystina@leuschke.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Towne",
                            PhoneNumber = "130.489.6593",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "344174a1-1bfa-4949-ab8a-de77d6e6ca38",
                            Surname = "Stehr",
                            TwoFactorEnabled = false,
                            UserName = "dora.boehm"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2004, 6, 28, 13, 17, 52, 149, DateTimeKind.Local).AddTicks(7589),
                            ConcurrencyStamp = "61fd0459-521c-4ccc-8bf6-1f862e66af1d",
                            Email = "jadyn.dare@kiehneffertz.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Breitenberg",
                            PhoneNumber = "740-426-0386 x04760",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2ff8189-cdb9-41c2-9f3b-57d71bd2efeb",
                            Surname = "Haag",
                            TwoFactorEnabled = false,
                            UserName = "dusty.rogahn"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 6, 28, 13, 17, 52, 150, DateTimeKind.Local).AddTicks(676),
                            ConcurrencyStamp = "cc32cadd-c827-4528-b30f-5a6a17674eeb",
                            Email = "albertha_borer@littel.ca",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Cronin",
                            PhoneNumber = "1-101-796-2355 x379",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c33da485-7171-45ae-9b66-ae17c3c69ed7",
                            Surname = "Harris",
                            TwoFactorEnabled = false,
                            UserName = "margot"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1981, 6, 28, 13, 17, 52, 150, DateTimeKind.Local).AddTicks(3427),
                            ConcurrencyStamp = "390c46b3-a080-4ebc-a6de-a2fa15d757c8",
                            Email = "regan@altenwerth.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Batz",
                            PhoneNumber = "(083)918-4406",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b3846d5-57d3-4bc5-abaf-c77b07aa40d4",
                            Surname = "Bartoletti",
                            TwoFactorEnabled = false,
                            UserName = "eloisa_hamill"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2004, 6, 28, 13, 17, 52, 150, DateTimeKind.Local).AddTicks(6323),
                            ConcurrencyStamp = "3222bba7-e746-4146-8415-88a3569af8f4",
                            Email = "jeremy@heaney.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Heathcote",
                            PhoneNumber = "834.394.7936 x40017",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21b1aad1-be63-47fc-8137-0756d8f07050",
                            Surname = "Will",
                            TwoFactorEnabled = false,
                            UserName = "annie"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2012, 6, 28, 13, 17, 52, 150, DateTimeKind.Local).AddTicks(9638),
                            ConcurrencyStamp = "37a4abed-870f-4d38-9150-89ba017031d6",
                            Email = "pete_balistreri@heaney.uk",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Heller",
                            PhoneNumber = "1-687-252-7148 x342",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a648bbb-aa66-47bd-96bf-1b3268109f0a",
                            Surname = "Prohaska",
                            TwoFactorEnabled = false,
                            UserName = "brendon.vonrueden"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1974, 6, 28, 13, 17, 52, 151, DateTimeKind.Local).AddTicks(3044),
                            ConcurrencyStamp = "89853df1-0978-43a9-a784-7b6528587046",
                            Email = "sofia.schneider@krisdurgan.biz",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vandervort",
                            PhoneNumber = "(441)736-2423 x1898",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69d800bc-4583-4243-bf0b-8e9f4fb10b89",
                            Surname = "Harber",
                            TwoFactorEnabled = false,
                            UserName = "aida"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .IsDescending();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductName")
                        .IsDescending();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Price = 917.74m,
                            ProductCategoryId = 1L,
                            ProductName = "Gorgeous Granite Bike"
                        },
                        new
                        {
                            Id = 2L,
                            Price = 991.19m,
                            ProductCategoryId = 2L,
                            ProductName = "Practical Granite Shoes"
                        },
                        new
                        {
                            Id = 3L,
                            Price = 711.59m,
                            ProductCategoryId = 3L,
                            ProductName = "Unbranded Metal Bacon"
                        },
                        new
                        {
                            Id = 4L,
                            Price = 129.00m,
                            ProductCategoryId = 4L,
                            ProductName = "Licensed Fresh Shirt"
                        },
                        new
                        {
                            Id = 5L,
                            Price = 41.37m,
                            ProductCategoryId = 5L,
                            ProductName = "Awesome Steel Sausages"
                        },
                        new
                        {
                            Id = 6L,
                            Price = 414.98m,
                            ProductCategoryId = 6L,
                            ProductName = "Awesome Rubber Salad"
                        },
                        new
                        {
                            Id = 7L,
                            Price = 641.22m,
                            ProductCategoryId = 7L,
                            ProductName = "Unbranded Wooden Chicken"
                        },
                        new
                        {
                            Id = 8L,
                            Price = 841.34m,
                            ProductCategoryId = 8L,
                            ProductName = "Awesome Fresh Computer"
                        },
                        new
                        {
                            Id = 9L,
                            Price = 415.01m,
                            ProductCategoryId = 9L,
                            ProductName = "Fantastic Plastic Towels"
                        },
                        new
                        {
                            Id = 10L,
                            Price = 769.11m,
                            ProductCategoryId = 1L,
                            ProductName = "Practical Fresh Chair"
                        },
                        new
                        {
                            Id = 11L,
                            Price = 741.69m,
                            ProductCategoryId = 3L,
                            ProductName = "Handcrafted Concrete Cheese"
                        },
                        new
                        {
                            Id = 12L,
                            Price = 328.21m,
                            ProductCategoryId = 4L,
                            ProductName = "Tasty Wooden Bike"
                        },
                        new
                        {
                            Id = 13L,
                            Price = 393.20m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Soft Fish"
                        },
                        new
                        {
                            Id = 14L,
                            Price = 685.48m,
                            ProductCategoryId = 6L,
                            ProductName = "Unbranded Steel Ball"
                        },
                        new
                        {
                            Id = 15L,
                            Price = 758.86m,
                            ProductCategoryId = 11L,
                            ProductName = "Refined Fresh Salad"
                        },
                        new
                        {
                            Id = 16L,
                            Price = 383.17m,
                            ProductCategoryId = 12L,
                            ProductName = "Incredible Soft Ball"
                        },
                        new
                        {
                            Id = 17L,
                            Price = 76.25m,
                            ProductCategoryId = 13L,
                            ProductName = "Handcrafted Cotton Bike"
                        },
                        new
                        {
                            Id = 18L,
                            Price = 960.50m,
                            ProductCategoryId = 14L,
                            ProductName = "Incredible Plastic Chips"
                        },
                        new
                        {
                            Id = 19L,
                            Price = 971.96m,
                            ProductCategoryId = 15L,
                            ProductName = "Sleek Plastic Table"
                        },
                        new
                        {
                            Id = 20L,
                            Price = 134.91m,
                            ProductCategoryId = 16L,
                            ProductName = "Small Concrete Hat"
                        },
                        new
                        {
                            Id = 21L,
                            Price = 551.85m,
                            ProductCategoryId = 17L,
                            ProductName = "Gorgeous Metal Bike"
                        },
                        new
                        {
                            Id = 22L,
                            Price = 662.56m,
                            ProductCategoryId = 8L,
                            ProductName = "Gorgeous Metal Keyboard"
                        },
                        new
                        {
                            Id = 23L,
                            Price = 578.94m,
                            ProductCategoryId = 9L,
                            ProductName = "Awesome Fresh Fish"
                        },
                        new
                        {
                            Id = 24L,
                            Price = 141.53m,
                            ProductCategoryId = 14L,
                            ProductName = "Tasty Wooden Sausages"
                        },
                        new
                        {
                            Id = 25L,
                            Price = 701.51m,
                            ProductCategoryId = 13L,
                            ProductName = "Gorgeous Fresh Sausages"
                        },
                        new
                        {
                            Id = 26L,
                            Price = 617.27m,
                            ProductCategoryId = 4L,
                            ProductName = "Awesome Rubber Shirt"
                        },
                        new
                        {
                            Id = 27L,
                            Price = 715.58m,
                            ProductCategoryId = 3L,
                            ProductName = "Incredible Soft Pizza"
                        },
                        new
                        {
                            Id = 28L,
                            Price = 284.33m,
                            ProductCategoryId = 6L,
                            ProductName = "Unbranded Soft Pants"
                        },
                        new
                        {
                            Id = 29L,
                            Price = 865.01m,
                            ProductCategoryId = 1L,
                            ProductName = "Tasty Fresh Keyboard"
                        },
                        new
                        {
                            Id = 30L,
                            Price = 579.24m,
                            ProductCategoryId = 2L,
                            ProductName = "Handmade Concrete Table"
                        },
                        new
                        {
                            Id = 31L,
                            Price = 53.96m,
                            ProductCategoryId = 3L,
                            ProductName = "Incredible Granite Chair"
                        },
                        new
                        {
                            Id = 32L,
                            Price = 16.73m,
                            ProductCategoryId = 4L,
                            ProductName = "Refined Wooden Mouse"
                        },
                        new
                        {
                            Id = 33L,
                            Price = 147.61m,
                            ProductCategoryId = 5L,
                            ProductName = "Sleek Plastic Bike"
                        },
                        new
                        {
                            Id = 34L,
                            Price = 737.23m,
                            ProductCategoryId = 6L,
                            ProductName = "Refined Rubber Keyboard"
                        },
                        new
                        {
                            Id = 35L,
                            Price = 759.54m,
                            ProductCategoryId = 7L,
                            ProductName = "Refined Plastic Ball"
                        },
                        new
                        {
                            Id = 36L,
                            Price = 346.51m,
                            ProductCategoryId = 8L,
                            ProductName = "Tasty Cotton Ball"
                        },
                        new
                        {
                            Id = 37L,
                            Price = 389.03m,
                            ProductCategoryId = 9L,
                            ProductName = "Tasty Fresh Fish"
                        },
                        new
                        {
                            Id = 38L,
                            Price = 287.65m,
                            ProductCategoryId = 1L,
                            ProductName = "Licensed Metal Salad"
                        },
                        new
                        {
                            Id = 39L,
                            Price = 873.58m,
                            ProductCategoryId = 11L,
                            ProductName = "Tasty Soft Fish"
                        },
                        new
                        {
                            Id = 40L,
                            Price = 918.08m,
                            ProductCategoryId = 14L,
                            ProductName = "Handmade Fresh Towels"
                        },
                        new
                        {
                            Id = 41L,
                            Price = 32.27m,
                            ProductCategoryId = 3L,
                            ProductName = "Intelligent Steel Shoes"
                        },
                        new
                        {
                            Id = 42L,
                            Price = 336.54m,
                            ProductCategoryId = 6L,
                            ProductName = "Small Cotton Chicken"
                        },
                        new
                        {
                            Id = 43L,
                            Price = 685.78m,
                            ProductCategoryId = 15L,
                            ProductName = "Fantastic Wooden Tuna"
                        },
                        new
                        {
                            Id = 44L,
                            Price = 179.06m,
                            ProductCategoryId = 2L,
                            ProductName = "Unbranded Metal Car"
                        },
                        new
                        {
                            Id = 45L,
                            Price = 190.90m,
                            ProductCategoryId = 18L,
                            ProductName = "Awesome Metal Tuna"
                        },
                        new
                        {
                            Id = 46L,
                            Price = 602.66m,
                            ProductCategoryId = 4L,
                            ProductName = "Incredible Rubber Salad"
                        },
                        new
                        {
                            Id = 47L,
                            Price = 583.06m,
                            ProductCategoryId = 15L,
                            ProductName = "Handmade Granite Salad"
                        },
                        new
                        {
                            Id = 48L,
                            Price = 355.17m,
                            ProductCategoryId = 19L,
                            ProductName = "Handmade Metal Chicken"
                        },
                        new
                        {
                            Id = 49L,
                            Price = 569.83m,
                            ProductCategoryId = 20L,
                            ProductName = "Rustic Fresh Hat"
                        },
                        new
                        {
                            Id = 50L,
                            Price = 536.23m,
                            ProductCategoryId = 8L,
                            ProductName = "Unbranded Frozen Hat"
                        },
                        new
                        {
                            Id = 51L,
                            Price = 173.88m,
                            ProductCategoryId = 14L,
                            ProductName = "Unbranded Fresh Fish"
                        },
                        new
                        {
                            Id = 52L,
                            Price = 437.33m,
                            ProductCategoryId = 13L,
                            ProductName = "Tasty Wooden Salad"
                        },
                        new
                        {
                            Id = 53L,
                            Price = 552.14m,
                            ProductCategoryId = 19L,
                            ProductName = "Tasty Steel Chips"
                        },
                        new
                        {
                            Id = 54L,
                            Price = 908.84m,
                            ProductCategoryId = 16L,
                            ProductName = "Rustic Fresh Chips"
                        },
                        new
                        {
                            Id = 55L,
                            Price = 895.16m,
                            ProductCategoryId = 11L,
                            ProductName = "Sleek Concrete Hat"
                        },
                        new
                        {
                            Id = 56L,
                            Price = 684.01m,
                            ProductCategoryId = 13L,
                            ProductName = "Awesome Wooden Towels"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsDescending();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Computers"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Beauty"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryName = "Movies"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryName = "Industrial"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryName = "Garden"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryName = "Games"
                        },
                        new
                        {
                            Id = 13L,
                            CategoryName = "Health"
                        },
                        new
                        {
                            Id = 14L,
                            CategoryName = "Grocery"
                        },
                        new
                        {
                            Id = 15L,
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 16L,
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            Id = 17L,
                            CategoryName = "Outdoors"
                        },
                        new
                        {
                            Id = 18L,
                            CategoryName = "Home"
                        },
                        new
                        {
                            Id = 19L,
                            CategoryName = "Jewelery"
                        },
                        new
                        {
                            Id = 20L,
                            CategoryName = "Outdoors"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsCheckedOut")
                        .IsDescending();

                    b.HasIndex("OrderId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            IsCheckedOut = true,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsCheckedOut = false,
                            OrderId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 8L,
                            IsCheckedOut = false,
                            OrderId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            IsCheckedOut = true,
                            OrderId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            IsCheckedOut = false,
                            OrderId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            IsCheckedOut = true,
                            OrderId = 14L
                        },
                        new
                        {
                            Id = 13L,
                            IsCheckedOut = false,
                            OrderId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            IsCheckedOut = true,
                            OrderId = 17L
                        },
                        new
                        {
                            Id = 15L,
                            IsCheckedOut = false,
                            OrderId = 18L
                        },
                        new
                        {
                            Id = 16L,
                            IsCheckedOut = false,
                            OrderId = 19L
                        },
                        new
                        {
                            Id = 17L,
                            IsCheckedOut = true,
                            OrderId = 20L
                        },
                        new
                        {
                            Id = 18L,
                            IsCheckedOut = false,
                            OrderId = 21L
                        },
                        new
                        {
                            Id = 19L,
                            IsCheckedOut = true,
                            OrderId = 9L
                        },
                        new
                        {
                            Id = 20L,
                            IsCheckedOut = false,
                            OrderId = 20L
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DiscountUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("DiscountUnitPrice")
                        .IsDescending();

                    b.HasIndex("Quantity")
                        .IsDescending();

                    b.HasIndex("ReceiptId");

                    b.HasIndex("UnitPrice")
                        .IsDescending();

                    b.ToTable("ReceiptDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 1L,
                            DiscountUnitPrice = 870m,
                            Id = 1L,
                            Quantity = 10,
                            UnitPrice = 932.64m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 155m,
                            Id = 2L,
                            Quantity = 22,
                            UnitPrice = 918.29m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 869m,
                            Id = 3L,
                            Quantity = 43,
                            UnitPrice = 951.09m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 687m,
                            Id = 4L,
                            Quantity = 44,
                            UnitPrice = 452.42m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 4L,
                            DiscountUnitPrice = 640m,
                            Id = 5L,
                            Quantity = 34,
                            UnitPrice = 942.88m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 5L,
                            DiscountUnitPrice = 84m,
                            Id = 6L,
                            Quantity = 60,
                            UnitPrice = 348.34m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 668m,
                            Id = 7L,
                            Quantity = 10,
                            UnitPrice = 970.06m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 627m,
                            Id = 8L,
                            Quantity = 77,
                            UnitPrice = 774.51m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 2L,
                            DiscountUnitPrice = 406m,
                            Id = 9L,
                            Quantity = 49,
                            UnitPrice = 323.42m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 3L,
                            DiscountUnitPrice = 46m,
                            Id = 10L,
                            Quantity = 68,
                            UnitPrice = 180.44m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 11L,
                            DiscountUnitPrice = 736m,
                            Id = 11L,
                            Quantity = 58,
                            UnitPrice = 750.70m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 638m,
                            Id = 12L,
                            Quantity = 84,
                            UnitPrice = 699.72m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 585m,
                            Id = 13L,
                            Quantity = 98,
                            UnitPrice = 299.93m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 10L,
                            DiscountUnitPrice = 937m,
                            Id = 14L,
                            Quantity = 95,
                            UnitPrice = 398.21m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 14L,
                            DiscountUnitPrice = 132m,
                            Id = 15L,
                            Quantity = 33,
                            UnitPrice = 971.16m
                        },
                        new
                        {
                            ProductId = 1L,
                            ReceiptId = 15L,
                            DiscountUnitPrice = 902m,
                            Id = 16L,
                            Quantity = 40,
                            UnitPrice = 525.92m
                        },
                        new
                        {
                            ProductId = 2L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 78m,
                            Id = 17L,
                            Quantity = 15,
                            UnitPrice = 106.77m
                        },
                        new
                        {
                            ProductId = 3L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 40m,
                            Id = 18L,
                            Quantity = 81,
                            UnitPrice = 233.30m
                        },
                        new
                        {
                            ProductId = 4L,
                            ReceiptId = 12L,
                            DiscountUnitPrice = 121m,
                            Id = 19L,
                            Quantity = 19,
                            UnitPrice = 478.57m
                        },
                        new
                        {
                            ProductId = 5L,
                            ReceiptId = 13L,
                            DiscountUnitPrice = 58m,
                            Id = 20L,
                            Quantity = 40,
                            UnitPrice = 27.69m
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ReturnRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            OrderId = 1L,
                            Reason = "Ut sequi eos molestiae dolorem incidunt non quia aut.\nDucimus quia reiciendis quia dignissimos eum in hic soluta.\nDoloremque est nihil enim dolor.\nMolestias dolorem doloribus consequatur quas omnis ut.\nEt qui repellendus aut maxime repellendus.\nMagni eius odit corporis ipsa qui et ipsam repellat itaque.",
                            RequestDate = new DateTime(2024, 5, 29, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(7777),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            OrderId = 2L,
                            Reason = "alias",
                            RequestDate = new DateTime(2024, 3, 20, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(8069),
                            Status = "Passed"
                        },
                        new
                        {
                            Id = 3L,
                            OrderId = 3L,
                            Reason = "Nemo illo placeat voluptatem aut.\nAperiam omnis eligendi deleniti.\nItaque quia reprehenderit tempora eos hic culpa.",
                            RequestDate = new DateTime(2024, 6, 8, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(8077),
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4L,
                            OrderId = 4L,
                            Reason = "Ipsa dolor cupiditate.",
                            RequestDate = new DateTime(2024, 5, 29, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(8137),
                            Status = "Processing"
                        },
                        new
                        {
                            Id = 5L,
                            OrderId = 5L,
                            Reason = "Quas maxime numquam. Distinctio ea et laboriosam officiis ea alias. Veniam molestias aut rem. Architecto a omnis commodi impedit sit id.",
                            RequestDate = new DateTime(2024, 3, 20, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(8150),
                            Status = "To be ready"
                        },
                        new
                        {
                            Id = 6L,
                            OrderId = 6L,
                            Reason = "Quaerat et est. Aliquam ab qui non id fugit soluta. Ut placeat voluptatem at.",
                            RequestDate = new DateTime(2024, 6, 8, 13, 17, 52, 161, DateTimeKind.Local).AddTicks(8264),
                            Status = "Archived"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            ProductId = 1L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 13, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(6776),
                            ReviewText = "minus"
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            ProductId = 2L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 5, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(6809),
                            ReviewText = "Sit eaque neque. Nihil et soluta eius fugiat est reprehenderit facere. Molestiae aliquam aliquam eius architecto sint id."
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            ProductId = 3L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 6, 5, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(6912),
                            ReviewText = "Veritatis maiores impedit voluptatem molestias aliquam dolor voluptatem eveniet aspernatur."
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 2L,
                            ProductId = 4L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 26, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(6991),
                            ReviewText = "Laboriosam beatae at. Sit laborum nulla architecto. In sapiente tempore iure velit. Odio qui quasi."
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 2L,
                            ProductId = 5L,
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 5, 25, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7049),
                            ReviewText = "similique"
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 1L,
                            ProductId = 6L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 24, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7054),
                            ReviewText = "Impedit quia quaerat sapiente iste.\nCupiditate culpa perspiciatis autem et asperiores.\nPossimus voluptatem autem rerum consequatur molestiae.\nAut ut repellendus dolores veritatis doloremque."
                        },
                        new
                        {
                            Id = 7L,
                            CustomerId = 5L,
                            ProductId = 11L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 13, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7197),
                            ReviewText = "Ipsum quam tempora qui.\nQui ut facilis eius molestiae provident quia non.\nUt et dolores.\nAd ut inventore reprehenderit in et dolorem.\nA quos ut sed ut voluptatem tempora consequuntur.\nEt et consequuntur beatae quia ea voluptatem in."
                        },
                        new
                        {
                            Id = 8L,
                            CustomerId = 6L,
                            ProductId = 12L,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 5, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7325),
                            ReviewText = "Eveniet quasi voluptatum modi et voluptatem incidunt unde sit aperiam.\nId ipsum aut nam aliquam fuga sit eius voluptatem asperiores.\nEum quia consequatur autem omnis alias repudiandae libero et saepe.\nAtque corporis cum autem quia facilis maxime."
                        },
                        new
                        {
                            Id = 9L,
                            CustomerId = 7L,
                            ProductId = 7L,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 6, 5, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7479),
                            ReviewText = "Sed rerum aperiam sapiente eius similique."
                        },
                        new
                        {
                            Id = 10L,
                            CustomerId = 8L,
                            ProductId = 13L,
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 6, 26, 13, 17, 52, 163, DateTimeKind.Local).AddTicks(7498),
                            ReviewText = "Vitae rerum eos in delectus ut est corrupti optio iste."
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Carrier = "32Kn8pxEQed1zF465YstATPcuNr9MjmJyBa",
                            OrderId = 1L,
                            ShippingDate = new DateTime(2024, 6, 24, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1481),
                            Status = "Sent from abroad",
                            TrackingNumber = "WYXACDM1130"
                        },
                        new
                        {
                            Id = 2L,
                            Carrier = "3DXJ8ckwFE7CnqaofBLgQ2V41S9RP",
                            OrderId = 2L,
                            ShippingDate = new DateTime(2024, 6, 23, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1624),
                            Status = "Recieved from abroad",
                            TrackingNumber = "FGNAKPH1"
                        },
                        new
                        {
                            Id = 3L,
                            Carrier = "1y6YkFAK1CEzQr583q4bdohSDnwm9tZs",
                            OrderId = 3L,
                            ShippingDate = new DateTime(2024, 5, 14, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1664),
                            Status = "recieve in sorting centre",
                            TrackingNumber = "VSXEVEC1"
                        },
                        new
                        {
                            Id = 4L,
                            Carrier = "3N3LM5VkHGuh9So2QvqiWCtpKRJbDXfFU1",
                            OrderId = 4L,
                            ShippingDate = new DateTime(2024, 5, 14, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1703),
                            Status = "delivered",
                            TrackingNumber = "HXQOIOM1"
                        },
                        new
                        {
                            Id = 5L,
                            Carrier = "1LR93SAZ8hBNPwd2qvtcEenMmQsgD6a",
                            OrderId = 5L,
                            ShippingDate = new DateTime(2024, 6, 25, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1742),
                            Status = "Unsuccesfull delivery",
                            TrackingNumber = "APFIADJ1"
                        },
                        new
                        {
                            Id = 6L,
                            Carrier = "3BFJhPkgeEZiS7aq8DMTxucw1XYR9v6z3Wm",
                            OrderId = 6L,
                            ShippingDate = new DateTime(2024, 6, 17, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1778),
                            Status = "recieved",
                            TrackingNumber = "PZRUMEL1"
                        },
                        new
                        {
                            Id = 7L,
                            Carrier = "1KDvRAz2NbkEujMZX7cxhFopiQsw4GJy",
                            OrderId = 7L,
                            ShippingDate = new DateTime(2024, 5, 3, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(1851),
                            Status = "boxing",
                            TrackingNumber = "CFTUWSJ1047"
                        });
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfLastModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("productId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("productId");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerId = 1L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2094),
                            productId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CustomerId = 2L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2096),
                            productId = 21L
                        },
                        new
                        {
                            Id = 3L,
                            CustomerId = 3L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2098),
                            productId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CustomerId = 4L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2099),
                            productId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CustomerId = 5L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2101),
                            productId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CustomerId = 6L,
                            DateOfLastModification = new DateTime(2024, 6, 28, 13, 17, 52, 165, DateTimeKind.Local).AddTicks(2102),
                            productId = 6L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe - afbf - 59f706d72cf6",
                            RoleId = "341743f0 - asd2–42de - afbf - 59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.BonusProgram", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("bonuses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Notification", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Payment", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithMany("payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.PaymentMethod", "method")
                        .WithMany("Payments")
                        .HasForeignKey("paymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("method");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "order")
                        .WithMany("Receipts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReceiptDetail", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Receipt", "Receipt")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ReturnRequest", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("ReturnRequest")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.ReturnRequest", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Review", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Shipping", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Order", "Order")
                        .WithOne("Shipping")
                        .HasForeignKey("GA.TradeMarket.Domain.Entitites.Shipping", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.WIshList", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Customer", "customer")
                        .WithMany("wishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Product", "product")
                        .WithMany("WishLists")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GA.TradeMarket.Domain.Entitites.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Customer", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("bonuses");

                    b.Navigation("wishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Order", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("ReturnRequest")
                        .IsRequired();

                    b.Navigation("Shipping")
                        .IsRequired();

                    b.Navigation("payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Person", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Product", b =>
                {
                    b.Navigation("ReceiptDetails");

                    b.Navigation("Reviews");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GA.TradeMarket.Domain.Entitites.Receipt", b =>
                {
                    b.Navigation("ReceiptDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
